<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structfaiss_1_1VStackInvertedLists" kind="struct" language="C++" prot="public">
    <compoundname>faiss::VStackInvertedLists</compoundname>
    <basecompoundref refid="structfaiss_1_1ReadOnlyInvertedLists" prot="public" virt="non-virtual">faiss::ReadOnlyInvertedLists</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1VStackInvertedLists_1a656f22a259d1aa602b6efde620cb4300" prot="public" static="no" mutable="no">
        <type>std::vector&lt; const <ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> * &gt;</type>
        <definition>std::vector&lt;const InvertedLists*&gt; faiss::VStackInvertedLists::ils</definition>
        <argsstring></argsstring>
        <name>ils</name>
        <qualifiedname>faiss::VStackInvertedLists::ils</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="416" column="17" bodyfile="faiss/invlists/InvertedLists.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1VStackInvertedLists_1ad9c47fdc34b29918bfc07ea2a16d50e6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> &gt;</type>
        <definition>std::vector&lt;idx_t&gt; faiss::VStackInvertedLists::cumsz</definition>
        <argsstring></argsstring>
        <name>cumsz</name>
        <qualifiedname>faiss::VStackInvertedLists::cumsz</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="417" column="17" bodyfile="faiss/invlists/InvertedLists.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1InvertedLists_1afaf8b7aa3e846aa4553f6aae67827ec8" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::InvertedLists::nlist</definition>
        <argsstring></argsstring>
        <name>nlist</name>
        <qualifiedname>faiss::InvertedLists::nlist</qualifiedname>
        <briefdescription>
<para>number of possible key values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="40" column="12" bodyfile="faiss/invlists/InvertedLists.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1InvertedLists_1ae06049e4259edb47d443ef87bdedc744" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::InvertedLists::code_size</definition>
        <argsstring></argsstring>
        <name>code_size</name>
        <qualifiedname>faiss::InvertedLists::code_size</qualifiedname>
        <briefdescription>
<para>code size per vector in bytes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="41" column="12" bodyfile="faiss/invlists/InvertedLists.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1InvertedLists_1a8d364ca073bda125730576b8cda17c9d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::InvertedLists::use_iterator</definition>
        <argsstring></argsstring>
        <name>use_iterator</name>
        <qualifiedname>faiss::InvertedLists::use_iterator</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>request to use iterator rather than get_codes / get_ids </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="44" column="10" bodyfile="faiss/invlists/InvertedLists.h" bodystart="44" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1a8f6ba4b3d64b74409742edad6c6c0f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::VStackInvertedLists::VStackInvertedLists</definition>
        <argsstring>(int nil, const InvertedLists **ils)</argsstring>
        <name>VStackInvertedLists</name>
        <qualifiedname>faiss::VStackInvertedLists::VStackInvertedLists</qualifiedname>
        <param>
          <type>int</type>
          <declname>nil</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> **</type>
          <declname>ils</declname>
        </param>
        <briefdescription>
<para>build <ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> by concatenating nil of them </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="420" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1a6398b7faee56b47f1f9817f3763fef01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t faiss::VStackInvertedLists::list_size</definition>
        <argsstring>(size_t list_no) const override</argsstring>
        <name>list_size</name>
        <qualifiedname>faiss::VStackInvertedLists::list_size</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1a9bd256053ee360473842105460fe285f">list_size</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <briefdescription>
<para>get the size of a list </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="422" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1a112f9458bd91ca5dbed2cb6d090a0034" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t * faiss::VStackInvertedLists::get_codes</definition>
        <argsstring>(size_t list_no) const override</argsstring>
        <name>get_codes</name>
        <qualifiedname>faiss::VStackInvertedLists::get_codes</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1aa1be529b56651dc8b0f3530788af280b">get_codes</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the codes for an inverted list must be released by release_codes</para>
<para><simplesect kind="return"><para>codes size list_size * code_size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="423" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1a061e9123a506a65a2b72994ae3edc9b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
        <definition>const idx_t * faiss::VStackInvertedLists::get_ids</definition>
        <argsstring>(size_t list_no) const override</argsstring>
        <name>get_ids</name>
        <qualifiedname>faiss::VStackInvertedLists::get_ids</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1a3ada775764613c5491e95096232df8cc">get_ids</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the ids for an inverted list must be released by release_ids</para>
<para><simplesect kind="return"><para>ids size list_size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="424" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1a331222282fb32dc55d6f5847bbd1c848" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::VStackInvertedLists::release_codes</definition>
        <argsstring>(size_t list_no, const uint8_t *codes) const override</argsstring>
        <name>release_codes</name>
        <qualifiedname>faiss::VStackInvertedLists::release_codes</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1a9a24bd313ece4e8e281f8bb28b5f528c">release_codes</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <briefdescription>
<para>release codes returned by get_codes (default implementation is nop </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="426" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1a3048d4656332d160502cd95b22b53be5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::VStackInvertedLists::release_ids</definition>
        <argsstring>(size_t list_no, const idx_t *ids) const override</argsstring>
        <name>release_ids</name>
        <qualifiedname>faiss::VStackInvertedLists::release_ids</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1ad9bd9641ac86e0851d39a96119db3e78">release_ids</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
<para>release ids returned by get_ids </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="427" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1a568b36928c391086da14f36eaf005fea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
        <definition>idx_t faiss::VStackInvertedLists::get_single_id</definition>
        <argsstring>(size_t list_no, size_t offset) const override</argsstring>
        <name>get_single_id</name>
        <qualifiedname>faiss::VStackInvertedLists::get_single_id</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1ac1fb72410cefa4f4d28ec90677c02ab3">get_single_id</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a single id in an inverted list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="429" column="11"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1a3c229e59737b533464f5403c5cf5fca4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t * faiss::VStackInvertedLists::get_single_code</definition>
        <argsstring>(size_t list_no, size_t offset) const override</argsstring>
        <name>get_single_code</name>
        <qualifiedname>faiss::VStackInvertedLists::get_single_code</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1aa91b9da89f2992774d7c2becf8a0dcd3">get_single_code</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a single code in an inverted list (should be deallocated with release_codes) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="431" column="19"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1VStackInvertedLists_1af37c2171d22f7f9200fa5cdedb363471" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::VStackInvertedLists::prefetch_lists</definition>
        <argsstring>(const idx_t *list_nos, int nlist) const override</argsstring>
        <name>prefetch_lists</name>
        <qualifiedname>faiss::VStackInvertedLists::prefetch_lists</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1aa661652a062ecb58b02f10d2a671c9fe">prefetch_lists</reimplements>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>list_nos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nlist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>prepare the following lists (default does nothing) a list can be -1 hence the signed long </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="434" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ReadOnlyInvertedLists_1a0734538244d8c5969e3e23e38faf1c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t faiss::ReadOnlyInvertedLists::add_entries</definition>
        <argsstring>(size_t list_no, size_t n_entry, const idx_t *ids, const uint8_t *code) override</argsstring>
        <name>add_entries</name>
        <qualifiedname>faiss::ReadOnlyInvertedLists::add_entries</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1a0a2adbbd1d6b4f8ed1cbfa9bb93f4401">add_entries</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_entry</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="353" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ReadOnlyInvertedLists_1a33c3a5174bcf6709dcefec8bdc4b9a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::ReadOnlyInvertedLists::update_entries</definition>
        <argsstring>(size_t list_no, size_t offset, size_t n_entry, const idx_t *ids, const uint8_t *code) override</argsstring>
        <name>update_entries</name>
        <qualifiedname>faiss::ReadOnlyInvertedLists::update_entries</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1afb45f0f325bf82f73737d804f8dbf49e">update_entries</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_entry</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="359" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ReadOnlyInvertedLists_1a7b65c76388ba2fbc17a7060f6cf87039" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::ReadOnlyInvertedLists::resize</definition>
        <argsstring>(size_t list_no, size_t new_size) override</argsstring>
        <name>resize</name>
        <qualifiedname>faiss::ReadOnlyInvertedLists::resize</qualifiedname>
        <reimplements refid="structfaiss_1_1InvertedLists_1aae502a3372d94450e0b8ff4350b43610">resize</reimplements>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="366" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1adc9d4472a745350a9dcbc92f799e73fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool faiss::InvertedLists::is_empty</definition>
        <argsstring>(size_t list_no, void *inverted_list_context=nullptr) const</argsstring>
        <name>is_empty</name>
        <qualifiedname>faiss::InvertedLists::is_empty</qualifiedname>
        <reimplementedby refid="structfaiss_1_1ArrayInvertedLists_1a88c4b8532f054274ec2ade7194e95698">is_empty</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>inverted_list_context</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>check if the list is empty </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="95" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1a033771088288195d5098b3760a2e7c3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structfaiss_1_1InvertedListsIterator" kindref="compound">InvertedListsIterator</ref> *</type>
        <definition>virtual InvertedListsIterator * faiss::InvertedLists::get_iterator</definition>
        <argsstring>(size_t list_no, void *inverted_list_context=nullptr) const</argsstring>
        <name>get_iterator</name>
        <qualifiedname>faiss::InvertedLists::get_iterator</qualifiedname>
        <reimplementedby refid="structfaiss_1_1ArrayInvertedListsPanorama_1a8ef31fda6ea1aff6847983add66a06d4">get_iterator</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>inverted_list_context</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>get iterable for lists that use_iterator </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="99" column="35"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1aa8fe060cb73a42c570d7e835ab172356" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t faiss::InvertedLists::add_entry</definition>
        <argsstring>(size_t list_no, idx_t theid, const uint8_t *code, void *inverted_list_context=nullptr)</argsstring>
        <name>add_entry</name>
        <qualifiedname>faiss::InvertedLists::add_entry</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>theid</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>code</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>inverted_list_context</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>add one entry to an inverted list </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="107" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1aa4fca5b69a56ab5b65274f3ff5ca7705" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::InvertedLists::update_entry</definition>
        <argsstring>(size_t list_no, size_t offset, idx_t id, const uint8_t *code)</argsstring>
        <name>update_entry</name>
        <qualifiedname>faiss::InvertedLists::update_entry</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>list_no</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="119" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1ada14d9bbf04c21b36f61971abece616e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::InvertedLists::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <qualifiedname>faiss::InvertedLists::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="134" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1ac2a0686121ef5bdd6eb70f7eb3cf9b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::InvertedLists::merge_from</definition>
        <argsstring>(InvertedLists *oivf, size_t add_id)</argsstring>
        <name>merge_from</name>
        <qualifiedname>faiss::InvertedLists::merge_from</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> *</type>
          <declname>oivf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>add_id</declname>
        </param>
        <briefdescription>
<para>move all entries from oivf (empty on output) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="140" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1a8ceb168dc21abb9f9a711558a7ef4b71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::InvertedLists::copy_subset_to</definition>
        <argsstring>(InvertedLists &amp;other, subset_type_t subset_type, idx_t a1, idx_t a2) const</argsstring>
        <name>copy_subset_to</name>
        <qualifiedname>faiss::InvertedLists::copy_subset_to</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>subset_type_t</type>
          <declname>subset_type</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>a1</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>a2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copy a subset of the entries index to the other index <simplesect kind="return"><para>number of entries copied </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="161" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1a022deb11a08e2dad3386369e90f946a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double faiss::InvertedLists::imbalance_factor</definition>
        <argsstring>() const</argsstring>
        <name>imbalance_factor</name>
        <qualifiedname>faiss::InvertedLists::imbalance_factor</qualifiedname>
        <briefdescription>
<para>1= perfectly balanced, &gt;1: imbalanced </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="171" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1ac82ad98d664f6478aa919c0ec1b811cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::InvertedLists::print_stats</definition>
        <argsstring>() const</argsstring>
        <name>print_stats</name>
        <qualifiedname>faiss::InvertedLists::print_stats</qualifiedname>
        <briefdescription>
<para>display some stats about the inverted lists </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="174" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1InvertedLists_1a903eed79c2fd1483c6e0eb500200da9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::InvertedLists::compute_ntotal</definition>
        <argsstring>() const</argsstring>
        <name>compute_ntotal</name>
        <qualifiedname>faiss::InvertedLists::compute_ntotal</qualifiedname>
        <briefdescription>
<para>sum up list sizes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="177" column="12"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573" prot="public" static="no" strong="no">
        <type>int</type>
        <name>subset_type_t</name>
        <qualifiedname>faiss::InvertedLists::subset_type_t</qualifiedname>
        <enumvalue id="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573a92622c38feac08c114d0e5da0a46a64f" prot="public">
          <name>SUBSET_TYPE_ID_RANGE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573af2dcf35ecd64791d658dadb082d64119" prot="public">
          <name>SUBSET_TYPE_ID_MOD</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573adff0557b40fbf1001a01e45e39bd67ee" prot="public">
          <name>SUBSET_TYPE_ELEMENT_RANGE</name>
          <initializer>=
                2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573a5d55a8816a2f7a3f98de02e44a4976dc" prot="public">
          <name>SUBSET_TYPE_INVLIST_FRACTION</name>
          <initializer>=
                3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573a28818c3eeac36130c18c2e6bac7ee4ef" prot="public">
          <name>SUBSET_TYPE_INVLIST</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="144" column="5" bodyfile="faiss/invlists/InvertedLists.h" bodystart="144" bodyend="156"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structfaiss_1_1InvertedLists_1aae4b0f912ddda23dfef1085b4b683af7" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t faiss::InvertedLists::INVALID_CODE_SIZE</definition>
        <argsstring></argsstring>
        <name>INVALID_CODE_SIZE</name>
        <qualifiedname>faiss::InvertedLists::INVALID_CODE_SIZE</qualifiedname>
        <initializer>= static_cast&lt;size_t&gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>used for <ref refid="structfaiss_1_1BlockInvertedLists" kindref="compound">BlockInvertedLists</ref>, where the codes are packed into groups and the individual code size is meaningless </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="52" column="25" bodyfile="faiss/invlists/InvertedLists.h" bodystart="52" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>faiss::InvertedLists</label>
        <link refid="structfaiss_1_1InvertedLists"/>
      </node>
      <node id="2">
        <label>faiss::ReadOnlyInvertedLists</label>
        <link refid="structfaiss_1_1ReadOnlyInvertedLists"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>faiss::VStackInvertedLists</label>
        <link refid="structfaiss_1_1VStackInvertedLists"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>faiss::InvertedLists</label>
        <link refid="structfaiss_1_1InvertedLists"/>
      </node>
      <node id="2">
        <label>faiss::ReadOnlyInvertedLists</label>
        <link refid="structfaiss_1_1ReadOnlyInvertedLists"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>faiss::VStackInvertedLists</label>
        <link refid="structfaiss_1_1VStackInvertedLists"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="faiss/invlists/InvertedLists.h" line="415" column="1" bodyfile="faiss/invlists/InvertedLists.h" bodystart="415" bodyend="435"/>
    <listofallmembers>
      <member refid="structfaiss_1_1ReadOnlyInvertedLists_1a0734538244d8c5969e3e23e38faf1c0c" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>add_entries</name></member>
      <member refid="structfaiss_1_1InvertedLists_1aa8fe060cb73a42c570d7e835ab172356" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>add_entry</name></member>
      <member refid="structfaiss_1_1InvertedLists_1ae06049e4259edb47d443ef87bdedc744" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>code_size</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a903eed79c2fd1483c6e0eb500200da9f" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>compute_ntotal</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a8ceb168dc21abb9f9a711558a7ef4b71" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>copy_subset_to</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1ad9c47fdc34b29918bfc07ea2a16d50e6" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>cumsz</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a112f9458bd91ca5dbed2cb6d090a0034" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>get_codes</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a061e9123a506a65a2b72994ae3edc9b7" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>get_ids</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a033771088288195d5098b3760a2e7c3a" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>get_iterator</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a3c229e59737b533464f5403c5cf5fca4" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>get_single_code</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a568b36928c391086da14f36eaf005fea" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>get_single_id</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a656f22a259d1aa602b6efde620cb4300" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>ils</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a022deb11a08e2dad3386369e90f946a8" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>imbalance_factor</name></member>
      <member refid="structfaiss_1_1InvertedLists_1aae4b0f912ddda23dfef1085b4b683af7" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>INVALID_CODE_SIZE</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a83d053d03720d938dc4fc4e2f674619c" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>InvertedLists</name></member>
      <member refid="structfaiss_1_1InvertedLists_1adc9d4472a745350a9dcbc92f799e73fe" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>is_empty</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a6398b7faee56b47f1f9817f3763fef01" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>list_size</name></member>
      <member refid="structfaiss_1_1InvertedLists_1ac2a0686121ef5bdd6eb70f7eb3cf9b3a" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>merge_from</name></member>
      <member refid="structfaiss_1_1InvertedLists_1afaf8b7aa3e846aa4553f6aae67827ec8" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>nlist</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1af37c2171d22f7f9200fa5cdedb363471" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>prefetch_lists</name></member>
      <member refid="structfaiss_1_1InvertedLists_1ac82ad98d664f6478aa919c0ec1b811cc" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>print_stats</name></member>
      <member refid="structfaiss_1_1ReadOnlyInvertedLists_1a38b8814659bc9dd48a96191aa3f1b01c" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>ReadOnlyInvertedLists</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a331222282fb32dc55d6f5847bbd1c848" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>release_codes</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a3048d4656332d160502cd95b22b53be5" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>release_ids</name></member>
      <member refid="structfaiss_1_1InvertedLists_1ada14d9bbf04c21b36f61971abece616e" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>reset</name></member>
      <member refid="structfaiss_1_1ReadOnlyInvertedLists_1a7b65c76388ba2fbc17a7060f6cf87039" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>resize</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573adff0557b40fbf1001a01e45e39bd67ee" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>SUBSET_TYPE_ELEMENT_RANGE</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573af2dcf35ecd64791d658dadb082d64119" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>SUBSET_TYPE_ID_MOD</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573a92622c38feac08c114d0e5da0a46a64f" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>SUBSET_TYPE_ID_RANGE</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573a28818c3eeac36130c18c2e6bac7ee4ef" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>SUBSET_TYPE_INVLIST</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573a5d55a8816a2f7a3f98de02e44a4976dc" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>SUBSET_TYPE_INVLIST_FRACTION</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a102adbbc3c4457ab23932e9113d98573" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>subset_type_t</name></member>
      <member refid="structfaiss_1_1ReadOnlyInvertedLists_1a33c3a5174bcf6709dcefec8bdc4b9a52" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>update_entries</name></member>
      <member refid="structfaiss_1_1InvertedLists_1aa4fca5b69a56ab5b65274f3ff5ca7705" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>update_entry</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a8d364ca073bda125730576b8cda17c9d" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>use_iterator</name></member>
      <member refid="structfaiss_1_1VStackInvertedLists_1a8f6ba4b3d64b74409742edad6c6c0f37" prot="public" virt="non-virtual"><scope>faiss::VStackInvertedLists</scope><name>VStackInvertedLists</name></member>
      <member refid="structfaiss_1_1InvertedLists_1a74508f4759d1b37c5a9e016c495d0dc1" prot="public" virt="virtual"><scope>faiss::VStackInvertedLists</scope><name>~InvertedLists</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
