<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structfaiss_1_1IndexBinaryHNSWCagra" kind="struct" language="C++" prot="public">
    <compoundname>faiss::IndexBinaryHNSWCagra</compoundname>
    <basecompoundref refid="structfaiss_1_1IndexBinaryHNSW" prot="public" virt="non-virtual">faiss::IndexBinaryHNSW</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1IndexBinaryHNSWCagra_1a0157df8a36e387929c3d985c765bd803" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexBinaryHNSWCagra::base_level_only</definition>
        <argsstring></argsstring>
        <name>base_level_only</name>
        <qualifiedname>faiss::IndexBinaryHNSWCagra::base_level_only</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When set to true, the index is immutable. This option is used to copy the knn graph from GpuIndexBinaryCagra to the base level of <ref refid="structfaiss_1_1IndexBinaryHNSWCagra" kindref="compound">IndexBinaryHNSWCagra</ref> without adding upper levels. Doing so enables to search the <ref refid="structfaiss_1_1HNSW" kindref="compound">HNSW</ref> index, but removes the ability to add vectors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="89" column="10" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinaryHNSWCagra_1ac5033e01ec3b444551a908ec38332dab" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::IndexBinaryHNSWCagra::num_base_level_search_entrypoints</definition>
        <argsstring></argsstring>
        <name>num_base_level_search_entrypoints</name>
        <qualifiedname>faiss::IndexBinaryHNSWCagra::num_base_level_search_entrypoints</qualifiedname>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When <computeroutput>base_level_only</computeroutput> is set to <computeroutput>True</computeroutput>, the search function searches only the base level knn graph of the <ref refid="structfaiss_1_1HNSW" kindref="compound">HNSW</ref> index. This parameter selects the entry point by randomly selecting some points and using the best one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="95" column="9" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinaryHNSW_1a85919341ea47e6dec7968e29d09cbb1e" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1HNSW" kindref="compound">HNSW</ref></type>
        <definition>HNSW faiss::IndexBinaryHNSW::hnsw</definition>
        <argsstring></argsstring>
        <name>hnsw</name>
        <qualifiedname>faiss::IndexBinaryHNSW::hnsw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="25" column="10" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinaryHNSW_1a66ef25000227ce004b285cfa39dadb24" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexBinaryHNSW::own_fields</definition>
        <argsstring></argsstring>
        <name>own_fields</name>
        <qualifiedname>faiss::IndexBinaryHNSW::own_fields</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="28" column="10" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinaryHNSW_1a1f17d1e2fddd93dfedeef219d4388fdc" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary* faiss::IndexBinaryHNSW::storage</definition>
        <argsstring></argsstring>
        <name>storage</name>
        <qualifiedname>faiss::IndexBinaryHNSW::storage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="29" column="17" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinaryHNSW_1a7e370041e7fdaaf992684c53632592dd" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexBinaryHNSW::init_level0</definition>
        <argsstring></argsstring>
        <name>init_level0</name>
        <qualifiedname>faiss::IndexBinaryHNSW::init_level0</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="35" column="10" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinaryHNSW_1a9bb86344140e03d28a49bd80384b2443" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexBinaryHNSW::keep_max_size_level0</definition>
        <argsstring></argsstring>
        <name>keep_max_size_level0</name>
        <qualifiedname>faiss::IndexBinaryHNSW::keep_max_size_level0</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="41" column="10" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a0e485a7189eec2675032486d3b12cf88" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::IndexBinary::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>faiss::IndexBinary::d</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>vector dimension </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="33" column="9" bodyfile="faiss/IndexBinary.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a277c2645b8def11c5d982384098c5380" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::IndexBinary::code_size</definition>
        <argsstring></argsstring>
        <name>code_size</name>
        <qualifiedname>faiss::IndexBinary::code_size</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>number of bytes per vector ( = d / 8 ) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="34" column="9" bodyfile="faiss/IndexBinary.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a41b6759d127475d5fcd2b3982a8f355e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
        <definition>idx_t faiss::IndexBinary::ntotal</definition>
        <argsstring></argsstring>
        <name>ntotal</name>
        <qualifiedname>faiss::IndexBinary::ntotal</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>total nb of indexed vectors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="35" column="11" bodyfile="faiss/IndexBinary.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a1656c00d77d55999becd71e3d8ea6dd7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexBinary::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <qualifiedname>faiss::IndexBinary::verbose</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>verbosity level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="36" column="10" bodyfile="faiss/IndexBinary.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a132119ae93e240b54621c5c669853c7f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexBinary::is_trained</definition>
        <argsstring></argsstring>
        <name>is_trained</name>
        <qualifiedname>faiss::IndexBinary::is_trained</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set if the <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> does not require training, or if training is done already </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="40" column="10" bodyfile="faiss/IndexBinary.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a344529c829717012b530ef9c13b145b7" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
        <definition>MetricType faiss::IndexBinary::metric_type</definition>
        <argsstring></argsstring>
        <name>metric_type</name>
        <qualifiedname>faiss::IndexBinary::metric_type</qualifiedname>
        <initializer>= <ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752cace9aa175fe11f346aa0a70df58977ff1" kindref="member">METRIC_L2</ref></initializer>
        <briefdescription>
<para>type of metric this index uses for search </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="43" column="16" bodyfile="faiss/IndexBinary.h" bodystart="43" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSWCagra_1a3793bd8c0e9bfdc478c1f8edc2f86cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexBinaryHNSWCagra::IndexBinaryHNSWCagra</definition>
        <argsstring>()</argsstring>
        <name>IndexBinaryHNSWCagra</name>
        <qualifiedname>faiss::IndexBinaryHNSWCagra::IndexBinaryHNSWCagra</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="81" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSWCagra_1a064afe06254715088ed0d3e89227a54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexBinaryHNSWCagra::IndexBinaryHNSWCagra</definition>
        <argsstring>(int d, int M)</argsstring>
        <name>IndexBinaryHNSWCagra</name>
        <qualifiedname>faiss::IndexBinaryHNSWCagra::IndexBinaryHNSWCagra</qualifiedname>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="82" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSWCagra_1a7025f344df296c7013e1f0cae6b2ad1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexBinaryHNSWCagra::add</definition>
        <argsstring>(idx_t n, const uint8_t *x) override</argsstring>
        <name>add</name>
        <qualifiedname>faiss::IndexBinaryHNSWCagra::add</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinaryHNSW_1aca2c449410d48edb72228016463aed5d">add</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add n vectors of dimension d to the index.</para>
<para>Vectors are implicitly assigned labels ntotal .. ntotal + n - 1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix, size n * d / 8 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="97" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSWCagra_1a27062d5b8113dacd2385e97ee61815f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexBinaryHNSWCagra::search</definition>
        <argsstring>(idx_t n, const uint8_t *x, idx_t k, int32_t *distances, idx_t *labels, const SearchParameters *params=nullptr) const override</argsstring>
        <name>search</name>
        <qualifiedname>faiss::IndexBinaryHNSWCagra::search</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinaryHNSW_1ae8d7ab52b6ff6b3b43e6b2122f94424e">search</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>entry point for search </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="100" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSW_1a7e5fd2b6a03e56690293ae8a1dae3ea1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1DistanceComputer" kindref="compound">DistanceComputer</ref> *</type>
        <definition>DistanceComputer * faiss::IndexBinaryHNSW::get_distance_computer</definition>
        <argsstring>() const</argsstring>
        <name>get_distance_computer</name>
        <qualifiedname>faiss::IndexBinaryHNSW::get_distance_computer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="49" column="22"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSW_1a384cbb714369ea28bf55209450d6e160" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexBinaryHNSW::add</definition>
        <argsstring>(idx_t n, const void *x, NumericType numeric_type) override</argsstring>
        <name>add</name>
        <qualifiedname>faiss::IndexBinaryHNSW::add</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1a733b00988a4c48b1182023d13dc0f0b2">add</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="52" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSW_1afc2793b3b3c53e5acd8315dfea500e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexBinaryHNSW::train</definition>
        <argsstring>(idx_t n, const uint8_t *x) override</argsstring>
        <name>train</name>
        <qualifiedname>faiss::IndexBinaryHNSW::train</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1a3c0ffd1655d8a5486660cb025340c9a4">train</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Trains the storage if needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="55" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSW_1a54d064dc7fb501af4a3cad5de069d71b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexBinaryHNSW::train</definition>
        <argsstring>(idx_t n, const void *x, NumericType numeric_type) override</argsstring>
        <name>train</name>
        <qualifiedname>faiss::IndexBinaryHNSW::train</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1a3ea5e39564542897806c38f45256bfb6">train</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSW_1ad24f16c343ac124c00950b3076dda6f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexBinaryHNSW::search</definition>
        <argsstring>(idx_t n, const void *x, NumericType numeric_type, idx_t k, int32_t *distances, idx_t *labels, const SearchParameters *params=nullptr) const override</argsstring>
        <name>search</name>
        <qualifiedname>faiss::IndexBinaryHNSW::search</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1a8c53952b7b317a6302e32e8fdf8b3b7f">search</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="66" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSW_1af509e0e2a6194a270a4887e20f54d866" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexBinaryHNSW::reconstruct</definition>
        <argsstring>(idx_t key, uint8_t *recons) const override</argsstring>
        <name>reconstruct</name>
        <qualifiedname>faiss::IndexBinaryHNSW::reconstruct</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1ad4938acd1d31afd49c81fbb5211121c3">reconstruct</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct a stored vector.</para>
<para>This function may not be defined for some indexes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the vector to reconstruct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstucted vector (size d / 8) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="75" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinaryHNSW_1a7bab1a84623e4b9531263c4935315ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexBinaryHNSW::reset</definition>
        <argsstring>() override</argsstring>
        <name>reset</name>
        <qualifiedname>faiss::IndexBinaryHNSW::reset</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1a11bff8bcaa366c563076a3d18f3ae30c">reset</reimplements>
        <briefdescription>
<para>Removes all elements from the database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="77" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a33c74f55b919bf39138bb2ba60bbaafc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::add_with_ids</definition>
        <argsstring>(idx_t n, const uint8_t *x, const idx_t *xids)</argsstring>
        <name>add_with_ids</name>
        <qualifiedname>faiss::IndexBinary::add_with_ids</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryHash_1a4c173c78924cc5ebe82c809cbc4882ba">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1ace01cca47e08dfe5c74c5b4f31977032">add_with_ids</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as add, but stores xids instead of sequential ids.</para>
<para>The default implementation fails with an assertion, as it is not supported by all indexes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xids</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-null, ids to store for the vectors (size n) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="84" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1abf82dd0c7719eb18aa89cdad773fee6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::add_with_ids</definition>
        <argsstring>(idx_t n, const void *x, NumericType numeric_type, const idx_t *xids)</argsstring>
        <name>add_with_ids</name>
        <qualifiedname>faiss::IndexBinary::add_with_ids</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="85" column="18" bodyfile="faiss/IndexBinary.h" bodystart="85" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a7d8f56aff2b732ce74fbc0f09af45e63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::range_search</definition>
        <argsstring>(idx_t n, const uint8_t *x, int radius, RangeSearchResult *result, const SearchParameters *params=nullptr) const</argsstring>
        <name>range_search</name>
        <qualifiedname>faiss::IndexBinary::range_search</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryFlat_1aecebd5a7e9073092343c337857b1e899">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryHash_1a5cc2617a99fe0f6218709bb34e7647b6">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryMultiHash_1af77a28b7a9e427208362ef2ad1c0dbe0">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a0c916e679ab3ebc366d16e55d77995d2">range_search</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radius</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query n vectors of dimension d to the index.</para>
<para>return all vectors with distance &lt; radius. Note that many indexes do not implement the range_search (only the k-NN search is mandatory). The distances are converted to float to reuse the <ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> structure, but they are integer. By convention, only distances &lt; radius (strict comparison) are returned, ie. radius = 0 does not return any result and 1 returns only exact same vectors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d / 8 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>search radius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>result table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="148" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1aa706d8807d29c91e0a148553a8202bc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexBinary::assign</definition>
        <argsstring>(idx_t n, const uint8_t *x, idx_t *labels, idx_t k=1) const</argsstring>
        <name>assign</name>
        <qualifiedname>faiss::IndexBinary::assign</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the indexes of the k vectors closest to the query x.</para>
<para>This function is identical to search but only returns labels of neighbors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d / 8 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output labels of the NNs, size n*k </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="162" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a5ea7dee38e40f66b86d892bab2b6b80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t faiss::IndexBinary::remove_ids</definition>
        <argsstring>(const IDSelector &amp;sel)</argsstring>
        <name>remove_ids</name>
        <qualifiedname>faiss::IndexBinary::remove_ids</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryFlat_1ae5127fb557880bf5996531714f32b3d6">remove_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1ad05e4e6f3ce7bb54f88ece7fe645447b">remove_ids</reimplementedby>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> &amp;</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes IDs from the index. Not supported by all indexes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="169" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1afbeb7aa476a119b17cbfdb87e9de91e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::reconstruct_n</definition>
        <argsstring>(idx_t i0, idx_t ni, uint8_t *recons) const</argsstring>
        <name>reconstruct_n</name>
        <qualifiedname>faiss::IndexBinary::reconstruct_n</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a4a8cd9437b9adc21696aefe1fa440a22">reconstruct_n</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>i0</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>ni</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct vectors i0 to i0 + ni - 1.</para>
<para>This function may not be defined for some indexes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstucted vectors (size ni * d / 8) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="184" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a82b07fe855fba3208ae05391328b9ec3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::search_and_reconstruct</definition>
        <argsstring>(idx_t n, const uint8_t *x, idx_t k, int32_t *distances, idx_t *labels, uint8_t *recons, const SearchParameters *params=nullptr) const</argsstring>
        <name>search_and_reconstruct</name>
        <qualifiedname>faiss::IndexBinary::search_and_reconstruct</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a198ca7067fd9a08583f257f00b741b39">search_and_reconstruct</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>recons</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Similar to search, but also reconstructs the stored vectors (or an approximation in the case of lossy coding) for the search results.</para>
<para>If there are not enough results for a query, the resulting array is padded with -1s.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstructed vectors size (n, k, d) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="194" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1aa22c24398be85229e338b15ea9a0e3f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexBinary::display</definition>
        <argsstring>() const</argsstring>
        <name>display</name>
        <qualifiedname>faiss::IndexBinary::display</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display the actual class name and some more info. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="204" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1ab148fd07d1066eea71123640c764b377" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::merge_from</definition>
        <argsstring>(IndexBinary &amp;otherIndex, idx_t add_id=0)</argsstring>
        <name>merge_from</name>
        <qualifiedname>faiss::IndexBinary::merge_from</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1ad80e8243ce1a800b7e22088b0fb2800d">merge_from</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &amp;</type>
          <declname>otherIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>add_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>moves the entries from another dataset to self. On output, other is empty. add_id is added to all moved ids (for sequential ids, this would be this-&gt;ntotal) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="210" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a75b9b404f77c107b192e25d6406337bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::check_compatible_for_merge</definition>
        <argsstring>(const IndexBinary &amp;otherIndex) const</argsstring>
        <name>check_compatible_for_merge</name>
        <qualifiedname>faiss::IndexBinary::check_compatible_for_merge</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a6a65e485671efc395161c12ee6fe3fc5">check_compatible_for_merge</reimplementedby>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &amp;</type>
          <declname>otherIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check that the two indexes are compatible (ie, they are trained in the same way and have the same parameters). Otherwise throw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="215" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1aa65f1178997d72127f1ebca5cd7656a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t faiss::IndexBinary::sa_code_size</definition>
        <argsstring>() const</argsstring>
        <name>sa_code_size</name>
        <qualifiedname>faiss::IndexBinary::sa_code_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>size of the produced codes in bytes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="219" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a144d5d72fceb98fe9daea9cb393bbfd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::add_sa_codes</definition>
        <argsstring>(idx_t n, const uint8_t *codes, const idx_t *xids)</argsstring>
        <name>add_sa_codes</name>
        <qualifiedname>faiss::IndexBinary::add_sa_codes</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as add_with_ids for <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="222" column="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfaiss_1_1IndexBinaryHNSW_1af031247c5c51de88a6a459fdf628359b" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HNSW_1a382cd6d2641ad241e804c1fa4d2b03c6" kindref="member">HNSW::storage_idx_t</ref></type>
        <definition>typedef HNSW::storage_idx_t faiss::IndexBinaryHNSW::storage_idx_t</definition>
        <argsstring></argsstring>
        <name>storage_idx_t</name>
        <qualifiedname>faiss::IndexBinaryHNSW::storage_idx_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHNSW.h" line="22" column="33" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1IndexBinary_1aaa0f338d22575d508cd6141972addaa6" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using faiss::IndexBinary::component_t =  uint8_t</definition>
        <argsstring></argsstring>
        <name>component_t</name>
        <qualifiedname>faiss::IndexBinary::component_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="30" column="5" bodyfile="faiss/IndexBinary.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1IndexBinary_1af958aa9b51dac1fcc433014959cad20c" prot="public" static="no">
        <type>int32_t</type>
        <definition>using faiss::IndexBinary::distance_t =  int32_t</definition>
        <argsstring></argsstring>
        <name>distance_t</name>
        <qualifiedname>faiss::IndexBinary::distance_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="31" column="5" bodyfile="faiss/IndexBinary.h" bodystart="31" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>faiss::IndexBinary</label>
        <link refid="structfaiss_1_1IndexBinary"/>
      </node>
      <node id="2">
        <label>faiss::IndexBinaryHNSW</label>
        <link refid="structfaiss_1_1IndexBinaryHNSW"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>faiss::IndexBinaryHNSWCagra</label>
        <link refid="structfaiss_1_1IndexBinaryHNSWCagra"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>faiss::MaybeOwnedVector&lt; storage_idx_t &gt;</label>
        <link refid="structfaiss_1_1MaybeOwnedVector"/>
      </node>
      <node id="4">
        <label>faiss::HNSW</label>
        <link refid="structfaiss_1_1HNSW"/>
        <childnode refid="5" relation="usage">
          <edgelabel>neighbors</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>rng</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>faiss::IndexBinary</label>
        <link refid="structfaiss_1_1IndexBinary"/>
      </node>
      <node id="2">
        <label>faiss::IndexBinaryHNSW</label>
        <link refid="structfaiss_1_1IndexBinaryHNSW"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>hnsw</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>storage</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>faiss::IndexBinaryHNSWCagra</label>
        <link refid="structfaiss_1_1IndexBinaryHNSWCagra"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>faiss::RandomGenerator</label>
        <link refid="structfaiss_1_1RandomGenerator"/>
      </node>
    </collaborationgraph>
    <location file="faiss/IndexBinaryHNSW.h" line="80" column="1" bodyfile="faiss/IndexBinaryHNSW.h" bodystart="80" bodyend="107"/>
    <listofallmembers>
      <member refid="structfaiss_1_1IndexBinaryHNSWCagra_1a7025f344df296c7013e1f0cae6b2ad1f" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>add</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a384cbb714369ea28bf55209450d6e160" prot="public" virt="virtual" ambiguityscope="faiss::IndexBinaryHNSW::"><scope>faiss::IndexBinaryHNSWCagra</scope><name>add</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a144d5d72fceb98fe9daea9cb393bbfd9" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>add_sa_codes</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a33c74f55b919bf39138bb2ba60bbaafc" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>add_with_ids</name></member>
      <member refid="structfaiss_1_1IndexBinary_1abf82dd0c7719eb18aa89cdad773fee6a" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>add_with_ids</name></member>
      <member refid="structfaiss_1_1IndexBinary_1aa706d8807d29c91e0a148553a8202bc9" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>assign</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSWCagra_1a0157df8a36e387929c3d985c765bd803" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>base_level_only</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a75b9b404f77c107b192e25d6406337bb" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>check_compatible_for_merge</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a277c2645b8def11c5d982384098c5380" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>code_size</name></member>
      <member refid="structfaiss_1_1IndexBinary_1aaa0f338d22575d508cd6141972addaa6" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>component_t</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a0e485a7189eec2675032486d3b12cf88" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>d</name></member>
      <member refid="structfaiss_1_1IndexBinary_1aa22c24398be85229e338b15ea9a0e3f1" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>display</name></member>
      <member refid="structfaiss_1_1IndexBinary_1af958aa9b51dac1fcc433014959cad20c" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>distance_t</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a7e5fd2b6a03e56690293ae8a1dae3ea1" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>get_distance_computer</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a85919341ea47e6dec7968e29d09cbb1e" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>hnsw</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a2a76f22851e42963b6a42c6d39e93b4b" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>IndexBinary</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a29fd13bc49b1edcf2b27df710f46f99d" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>IndexBinaryHNSW</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1ae16b61a8deba0c838dc014f37d3e2bdf" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>IndexBinaryHNSW</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a302d59e8290c617242da789a79ff0831" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>IndexBinaryHNSW</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSWCagra_1a3793bd8c0e9bfdc478c1f8edc2f86cfa" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>IndexBinaryHNSWCagra</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSWCagra_1a064afe06254715088ed0d3e89227a54b" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>IndexBinaryHNSWCagra</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a7e370041e7fdaaf992684c53632592dd" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>init_level0</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a132119ae93e240b54621c5c669853c7f" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>is_trained</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a9bb86344140e03d28a49bd80384b2443" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>keep_max_size_level0</name></member>
      <member refid="structfaiss_1_1IndexBinary_1ab148fd07d1066eea71123640c764b377" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>merge_from</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a344529c829717012b530ef9c13b145b7" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>metric_type</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a41b6759d127475d5fcd2b3982a8f355e" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>ntotal</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSWCagra_1ac5033e01ec3b444551a908ec38332dab" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>num_base_level_search_entrypoints</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a66ef25000227ce004b285cfa39dadb24" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>own_fields</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a7d8f56aff2b732ce74fbc0f09af45e63" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>range_search</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1af509e0e2a6194a270a4887e20f54d866" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>reconstruct</name></member>
      <member refid="structfaiss_1_1IndexBinary_1afbeb7aa476a119b17cbfdb87e9de91e4" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>reconstruct_n</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a5ea7dee38e40f66b86d892bab2b6b80e" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>remove_ids</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a7bab1a84623e4b9531263c4935315ca9" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>reset</name></member>
      <member refid="structfaiss_1_1IndexBinary_1aa65f1178997d72127f1ebca5cd7656a2" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>sa_code_size</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSWCagra_1a27062d5b8113dacd2385e97ee61815f4" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>search</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1ad24f16c343ac124c00950b3076dda6f4" prot="public" virt="virtual" ambiguityscope="faiss::IndexBinaryHNSW::"><scope>faiss::IndexBinaryHNSWCagra</scope><name>search</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a82b07fe855fba3208ae05391328b9ec3" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>search_and_reconstruct</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a1f17d1e2fddd93dfedeef219d4388fdc" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>storage</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1af031247c5c51de88a6a459fdf628359b" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>storage_idx_t</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1afc2793b3b3c53e5acd8315dfea500e68" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>train</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1a54d064dc7fb501af4a3cad5de069d71b" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>train</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a1656c00d77d55999becd71e3d8ea6dd7" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>verbose</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a9d2ee94e3bb4cbb82bf01d04b909f2d8" prot="public" virt="virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>~IndexBinary</name></member>
      <member refid="structfaiss_1_1IndexBinaryHNSW_1ab327c861a19dbbb033852008cd4c8b62" prot="public" virt="non-virtual"><scope>faiss::IndexBinaryHNSWCagra</scope><name>~IndexBinaryHNSW</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
