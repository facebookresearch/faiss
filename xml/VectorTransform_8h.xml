<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="VectorTransform_8h" kind="file" language="C++">
    <compoundname>VectorTransform.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">vector</includes>
    <includes refid="Index_8h" local="no">faiss/Index.h</includes>
    <includedby refid="IndexIVFIndependentQuantizer_8h" local="no">faiss/IndexIVFIndependentQuantizer.h</includedby>
    <includedby refid="IndexLSH_8h" local="no">faiss/IndexLSH.h</includedby>
    <includedby refid="IndexPreTransform_8h" local="no">faiss/IndexPreTransform.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>faiss/Index.h</label>
        <link refid="Index_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>faiss/MetricType.h</label>
        <link refid="MetricType_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>faiss/VectorTransform.h</label>
        <link refid="VectorTransform_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>faiss/impl/FaissAssert.h</label>
        <link refid="FaissAssert_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>faiss/impl/FaissException.h</label>
        <link refid="FaissException_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>faiss/impl/platform_macros.h</label>
        <link refid="platform__macros_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="7">
        <label>cstdio</label>
      </node>
      <node id="14">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>exception</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="12">
        <label>utility</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>faiss/IndexIVFIndependentQuantizer.h</label>
        <link refid="IndexIVFIndependentQuantizer_8h_source"/>
      </node>
      <node id="3">
        <label>faiss/IndexLSH.h</label>
        <link refid="IndexLSH_8h_source"/>
      </node>
      <node id="4">
        <label>faiss/IndexPreTransform.h</label>
        <link refid="IndexPreTransform_8h_source"/>
      </node>
      <node id="1">
        <label>faiss/VectorTransform.h</label>
        <link refid="VectorTransform_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structfaiss_1_1VectorTransform" prot="public">faiss::VectorTransform</innerclass>
    <innerclass refid="structfaiss_1_1LinearTransform" prot="public">faiss::LinearTransform</innerclass>
    <innerclass refid="structfaiss_1_1RandomRotationMatrix" prot="public">faiss::RandomRotationMatrix</innerclass>
    <innerclass refid="structfaiss_1_1PCAMatrix" prot="public">faiss::PCAMatrix</innerclass>
    <innerclass refid="structfaiss_1_1ITQMatrix" prot="public">faiss::ITQMatrix</innerclass>
    <innerclass refid="structfaiss_1_1ITQTransform" prot="public">faiss::ITQTransform</innerclass>
    <innerclass refid="structfaiss_1_1OPQMatrix" prot="public">faiss::OPQMatrix</innerclass>
    <innerclass refid="structfaiss_1_1RemapDimensionsTransform" prot="public">faiss::RemapDimensionsTransform</innerclass>
    <innerclass refid="structfaiss_1_1NormalizationTransform" prot="public">faiss::NormalizationTransform</innerclass>
    <innerclass refid="structfaiss_1_1CenteringTransform" prot="public">faiss::CenteringTransform</innerclass>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Meta<sp/>Platforms,<sp/>Inc.<sp/>and<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-*-<sp/>c++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAISS_VECTOR_TRANSFORM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAISS_VECTOR_TRANSFORM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">/**<sp/>Defines<sp/>a<sp/>few<sp/>objects<sp/>that<sp/>apply<sp/>transformations<sp/>to<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>vectors<sp/>Often<sp/>these<sp/>are<sp/>pre-processing<sp/>steps.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/Index.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">/**<sp/>Any<sp/>transformation<sp/>applied<sp/>on<sp/>a<sp/>set<sp/>of<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structfaiss_1_1VectorTransform" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_in;<sp/><sp/></highlight><highlight class="comment">///!<sp/>input<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref>;<sp/></highlight><highlight class="comment">///!<sp/>output<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structfaiss_1_1VectorTransform_1a137f48bab695736f0b1d79a50cddc858" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a137f48bab695736f0b1d79a50cddc858" kindref="member">VectorTransform</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_in<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref><sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>d_in(d_in),<sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref>(<ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref>),<sp/><ref refid="structfaiss_1_1VectorTransform_1ab511f1ddf608c00204555881ca28cb02" kindref="member">is_trained</ref>(true)<sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>set<sp/>if<sp/>the<sp/>VectorTransform<sp/>does<sp/>not<sp/>require<sp/>training,<sp/>or<sp/>if</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>training<sp/>is<sp/>done<sp/>already</highlight></codeline>
<codeline lineno="34" refid="structfaiss_1_1VectorTransform_1ab511f1ddf608c00204555881ca28cb02" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1ab511f1ddf608c00204555881ca28cb02" kindref="member">is_trained</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Perform<sp/>training<sp/>on<sp/>a<sp/>representative<sp/>set<sp/>of<sp/>vectors.<sp/>Does</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>nothing<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>n<sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>of<sp/>training<sp/>vectors</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/>training<sp/>vecors,<sp/>size<sp/>n<sp/>*<sp/>d</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structfaiss_1_1VectorTransform_1ab781e04a6c8afe04689b3fc64be512d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1ab781e04a6c8afe04689b3fc64be512d5" kindref="member">train</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>apply<sp/>the<sp/>transformation<sp/>and<sp/>return<sp/>the<sp/>result<sp/>in<sp/>an<sp/>allocated<sp/>pointer</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/>n<sp/>number<sp/>of<sp/>vectors<sp/>to<sp/>transform</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/>x<sp/>input<sp/>vectors,<sp/>size<sp/>n<sp/>*<sp/>d_in</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/><sp/><sp/><sp/>output<sp/>vectors,<sp/>size<sp/>n<sp/>*<sp/>d_out</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structfaiss_1_1VectorTransform_1a99fb80aeff049dc92300d2ed79d30883" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="structfaiss_1_1VectorTransform_1a99fb80aeff049dc92300d2ed79d30883" kindref="member">apply</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>apply<sp/>the<sp/>transformation<sp/>and<sp/>return<sp/>the<sp/>result<sp/>in<sp/>a<sp/>provided<sp/>matrix</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/>n<sp/>number<sp/>of<sp/>vectors<sp/>to<sp/>transform</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/><sp/><sp/><sp/><sp/>x<sp/>input<sp/>vectors,<sp/>size<sp/>n<sp/>*<sp/>d_in</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/><sp/><sp/><sp/>xt<sp/>output<sp/>vectors,<sp/>size<sp/>n<sp/>*<sp/>d_out</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structfaiss_1_1VectorTransform_1a90f1a218c224c049f1bd8b77a78d6aa0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a90f1a218c224c049f1bd8b77a78d6aa0" kindref="member">apply_noalloc</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>reverse<sp/>transformation.<sp/>May<sp/>not<sp/>be<sp/>implemented<sp/>or<sp/>may<sp/>return</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>approximate<sp/>result</highlight></codeline>
<codeline lineno="60" refid="structfaiss_1_1VectorTransform_1a0913e3b521a6d34f523c291508e82adb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a0913e3b521a6d34f523c291508e82adb" kindref="member">reverse_transform</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>the<sp/>two<sp/>transforms<sp/>are<sp/>identical<sp/>(to<sp/>merge<sp/>indexes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_identical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">~VectorTransform</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**<sp/>Generic<sp/>linear<sp/>transformation,<sp/>with<sp/>bias<sp/>term<sp/>applied<sp/>on<sp/>output</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>y<sp/>=<sp/>A<sp/>*<sp/>x<sp/>+<sp/>b</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structfaiss_1_1LinearTransform" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1LinearTransform" kindref="compound">LinearTransform</ref><sp/>:<sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>have_bias;<sp/></highlight><highlight class="comment">///!<sp/>whether<sp/>to<sp/>use<sp/>the<sp/>bias<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>check<sp/>if<sp/>matrix<sp/>A<sp/>is<sp/>orthonormal<sp/>(enables<sp/>reverse_transform)</highlight></codeline>
<codeline lineno="75" refid="structfaiss_1_1LinearTransform_1a8a67a0178eab513cf87545f5d12d9569" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1LinearTransform_1a8a67a0178eab513cf87545f5d12d9569" kindref="member">is_orthonormal</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Transformation<sp/>matrix,<sp/>size<sp/>d_out<sp/>*<sp/>d_in</highlight></codeline>
<codeline lineno="78" refid="structfaiss_1_1LinearTransform_1aa40e156ef57fe206cd5f3a58ec0660da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1LinearTransform_1aa40e156ef57fe206cd5f3a58ec0660da" kindref="member">A</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>bias<sp/>vector,<sp/>size<sp/>d_out</highlight></codeline>
<codeline lineno="81" refid="structfaiss_1_1LinearTransform_1ab0383f690aeb823876e9143febad1a87" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1LinearTransform_1ab0383f690aeb823876e9143febad1a87" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>both<sp/>d_in<sp/>&gt;<sp/>d_out<sp/>and<sp/>d_out<sp/>&lt;<sp/>d_in<sp/>are<sp/>supported</highlight></codeline>
<codeline lineno="84" refid="structfaiss_1_1LinearTransform_1a7bf766de1abac428d18b8817208fcab0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1LinearTransform_1a7bf766de1abac428d18b8817208fcab0" kindref="member">LinearTransform</ref>(</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_in<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>have_bias<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>same<sp/>as<sp/>apply,<sp/>but<sp/>result<sp/>is<sp/>pre-allocated</highlight></codeline>
<codeline lineno="90" refid="structfaiss_1_1LinearTransform_1aefb0ae9416652e408a96604f18a78d7d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1LinearTransform_1aefb0ae9416652e408a96604f18a78d7d" kindref="member">apply_noalloc</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>compute<sp/>x<sp/>=<sp/>A^T<sp/>*<sp/>(x<sp/>-<sp/>b)</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>is<sp/>reverse<sp/>transform<sp/>if<sp/>A<sp/>has<sp/>orthonormal<sp/>lines</highlight></codeline>
<codeline lineno="94" refid="structfaiss_1_1LinearTransform_1a29af2cf35a13b538eb327aa64b07e474" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1LinearTransform_1a29af2cf35a13b538eb327aa64b07e474" kindref="member">transform_transpose</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>works<sp/>only<sp/>if<sp/>is_orthonormal</highlight></codeline>
<codeline lineno="97" refid="structfaiss_1_1LinearTransform_1aabcea47432734c860fdf6fcc3a998563" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1LinearTransform_1aabcea47432734c860fdf6fcc3a998563" kindref="member">reverse_transform</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>compute<sp/>A^T<sp/>*<sp/>A<sp/>to<sp/>set<sp/>the<sp/>is_orthonormal<sp/>flag</highlight></codeline>
<codeline lineno="100" refid="structfaiss_1_1LinearTransform_1a1f75b8a58b9f452eb08fd8e54c134fe0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1LinearTransform_1a1f75b8a58b9f452eb08fd8e54c134fe0" kindref="member">set_is_orthonormal</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_if_verbose(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>mat,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_identical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1LinearTransform" kindref="compound">~LinearTransform</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">///<sp/>Randomly<sp/>rotate<sp/>a<sp/>set<sp/>of<sp/>vectors</highlight></codeline>
<codeline lineno="115" refid="structfaiss_1_1RandomRotationMatrix" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1RandomRotationMatrix" kindref="compound">RandomRotationMatrix</ref><sp/>:<sp/><ref refid="structfaiss_1_1LinearTransform" kindref="compound">LinearTransform</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>both<sp/>d_in<sp/>&gt;<sp/>d_out<sp/>and<sp/>d_out<sp/>&lt;<sp/>d_in<sp/>are<sp/>supported</highlight></codeline>
<codeline lineno="117" refid="structfaiss_1_1RandomRotationMatrix_1a64e406c8f73c7692bcf7d97b27305fc6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1RandomRotationMatrix_1a64e406c8f73c7692bcf7d97b27305fc6" kindref="member">RandomRotationMatrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref>)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structfaiss_1_1LinearTransform" kindref="compound">LinearTransform</ref>(d_in,<sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref>,<sp/>false)<sp/>{}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>must<sp/>be<sp/>called<sp/>before<sp/>the<sp/>transform<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="121" refid="structfaiss_1_1RandomRotationMatrix_1a35d70d2b2e01b10ac041002e8851d5ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1RandomRotationMatrix_1a35d70d2b2e01b10ac041002e8851d5ce" kindref="member">init</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initializes<sp/>with<sp/>an<sp/>arbitrary<sp/>seed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="structfaiss_1_1RandomRotationMatrix_1a8d7cd3057072bc2db0527ae4ac84b181" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1RandomRotationMatrix_1a8d7cd3057072bc2db0527ae4ac84b181" kindref="member">train</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1RandomRotationMatrix" kindref="compound">RandomRotationMatrix</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**<sp/>Applies<sp/>a<sp/>principal<sp/>component<sp/>analysis<sp/>on<sp/>a<sp/>set<sp/>of<sp/>vectors,</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>with<sp/>optionally<sp/>whitening<sp/>and<sp/>random<sp/>rotation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="structfaiss_1_1PCAMatrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1PCAMatrix" kindref="compound">PCAMatrix</ref><sp/>:<sp/><ref refid="structfaiss_1_1LinearTransform" kindref="compound">LinearTransform</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>after<sp/>transformation<sp/>the<sp/>components<sp/>are<sp/>multiplied<sp/>by</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>eigenvalues^eigen_power</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>=0:<sp/>no<sp/>whitening</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>=-0.5:<sp/>full<sp/>whitening</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structfaiss_1_1PCAMatrix_1a4e48e801f98ba2cf57c03b0913d6fafc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1a4e48e801f98ba2cf57c03b0913d6fafc" kindref="member">eigen_power</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>value<sp/>added<sp/>to<sp/>eigenvalues<sp/>to<sp/>avoid<sp/>division<sp/>by<sp/>0<sp/>when<sp/>whitening</highlight></codeline>
<codeline lineno="141" refid="structfaiss_1_1PCAMatrix_1a0c2483343aeff1c43c10f66a136a7f37" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1a0c2483343aeff1c43c10f66a136a7f37" kindref="member">epsilon</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>random<sp/>rotation<sp/>after<sp/>PCA</highlight></codeline>
<codeline lineno="144" refid="structfaiss_1_1PCAMatrix_1af111f055b7571703a3aa270d89e99321" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1af111f055b7571703a3aa270d89e99321" kindref="member">random_rotation</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>ratio<sp/>between<sp/>#<sp/>training<sp/>vectors<sp/>and<sp/>dimension</highlight></codeline>
<codeline lineno="147" refid="structfaiss_1_1PCAMatrix_1abdce90f57a3c4401f5230f03da901e0d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1abdce90f57a3c4401f5230f03da901e0d" kindref="member">max_points_per_d</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>try<sp/>to<sp/>distribute<sp/>output<sp/>eigenvectors<sp/>in<sp/>this<sp/>many<sp/>bins</highlight></codeline>
<codeline lineno="150" refid="structfaiss_1_1PCAMatrix_1ac9a4c97b5861081dfd8ca5881bb1a677" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1ac9a4c97b5861081dfd8ca5881bb1a677" kindref="member">balanced_bins</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Mean,<sp/>size<sp/>d_in</highlight></codeline>
<codeline lineno="153" refid="structfaiss_1_1PCAMatrix_1a721c338c1df5c99471db82e6d3dc8f93" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1PCAMatrix_1a721c338c1df5c99471db82e6d3dc8f93" kindref="member">mean</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>eigenvalues<sp/>of<sp/>covariance<sp/>matrix<sp/>(=<sp/>squared<sp/>singular<sp/>values)</highlight></codeline>
<codeline lineno="156" refid="structfaiss_1_1PCAMatrix_1ae80e130c0667b66cea608c4926d7d561" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1PCAMatrix_1ae80e130c0667b66cea608c4926d7d561" kindref="member">eigenvalues</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>PCA<sp/>matrix,<sp/>size<sp/>d_in<sp/>*<sp/>d_in</highlight></codeline>
<codeline lineno="159" refid="structfaiss_1_1PCAMatrix_1aef5c130774e5d4f697a3e1c82647bfd3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1PCAMatrix_1aef5c130774e5d4f697a3e1c82647bfd3" kindref="member">PCAMat</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>final<sp/>matrix<sp/>is<sp/>computed<sp/>after<sp/>random<sp/>rotation<sp/>and/or<sp/>whitening</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix" kindref="compound">PCAMatrix</ref>(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_in<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1a4e48e801f98ba2cf57c03b0913d6fafc" kindref="member">eigen_power</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1af111f055b7571703a3aa270d89e99321" kindref="member">random_rotation</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>train<sp/>on<sp/>n<sp/>vectors.<sp/>If<sp/>n<sp/>&lt;<sp/>d_in<sp/>then<sp/>the<sp/>eigenvector<sp/>matrix</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>will<sp/>be<sp/>completed<sp/>with<sp/>0s</highlight></codeline>
<codeline lineno="170" refid="structfaiss_1_1PCAMatrix_1a42f2fefbabe122868c59ea35b4ff080b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1a42f2fefbabe122868c59ea35b4ff080b" kindref="member">train</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>copy<sp/>pre-trained<sp/>PCA<sp/>matrix</highlight></codeline>
<codeline lineno="173" refid="structfaiss_1_1PCAMatrix_1a5eeb75861ade62cf606d003da398a09f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1a5eeb75861ade62cf606d003da398a09f" kindref="member">copy_from</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix" kindref="compound">PCAMatrix</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>called<sp/>after<sp/>mean,<sp/>PCAMat<sp/>and<sp/>eigenvalues<sp/>are<sp/>computed</highlight></codeline>
<codeline lineno="176" refid="structfaiss_1_1PCAMatrix_1ac13555c4d9007ae338d3392882b8e0db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PCAMatrix_1ac13555c4d9007ae338d3392882b8e0db" kindref="member">prepare_Ab</ref>();</highlight></codeline>
<codeline lineno="177"><highlight class="normal">};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">/**<sp/>ITQ<sp/>implementation<sp/>from</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Iterative<sp/>quantization:<sp/>A<sp/>procrustean<sp/>approach<sp/>to<sp/>learning<sp/>binary<sp/>codes</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>for<sp/>large-scale<sp/>image<sp/>retrieval,</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>Yunchao<sp/>Gong,<sp/>Svetlana<sp/>Lazebnik,<sp/>Albert<sp/>Gordo,<sp/>Florent<sp/>Perronnin,</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>PAMI&apos;12.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="structfaiss_1_1ITQMatrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ITQMatrix" kindref="compound">ITQMatrix</ref><sp/>:<sp/><ref refid="structfaiss_1_1LinearTransform" kindref="compound">LinearTransform</ref><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_iter;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>force<sp/>initialization<sp/>of<sp/>the<sp/>rotation<sp/>(for<sp/>debugging)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>init_rotation;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ITQMatrix" kindref="compound">ITQMatrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="structfaiss_1_1ITQMatrix_1abac7b3a00aa622c1590ea11f01abf073" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ITQMatrix_1abac7b3a00aa622c1590ea11f01abf073" kindref="member">train</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">/**<sp/>The<sp/>full<sp/>ITQ<sp/>transform,<sp/>including<sp/>normalizations<sp/>and<sp/>PCA<sp/>transformation</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="structfaiss_1_1ITQTransform" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ITQTransform" kindref="compound">ITQTransform</ref><sp/>:<sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>mean;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_pca;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ITQMatrix" kindref="compound">ITQMatrix</ref><sp/>itq;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>max<sp/>training<sp/>points<sp/>per<sp/>dimension</highlight></codeline>
<codeline lineno="208" refid="structfaiss_1_1ITQTransform_1a3ddcff467c157575e7df14754efa84e8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ITQTransform_1a3ddcff467c157575e7df14754efa84e8" kindref="member">max_train_per_dim</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>concatenation<sp/>of<sp/>PCA<sp/>+<sp/>ITQ<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1LinearTransform" kindref="compound">LinearTransform</ref><sp/>pca_then_itq;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ITQTransform" kindref="compound">ITQTransform</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_in<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref><sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>do_pca<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="structfaiss_1_1ITQTransform_1a836c8adc25326ade1a5998276648c736" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ITQTransform_1a836c8adc25326ade1a5998276648c736" kindref="member">train</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="structfaiss_1_1ITQTransform_1af9bbe5be9e3c3f3f2919a46cc931443a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ITQTransform_1af9bbe5be9e3c3f3f2919a46cc931443a" kindref="member">apply_noalloc</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_identical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">/**<sp/>Applies<sp/>a<sp/>rotation<sp/>to<sp/>align<sp/>the<sp/>dimensions<sp/>with<sp/>a<sp/>PQ<sp/>to<sp/>minimize</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>reconstruction<sp/>error.<sp/>Can<sp/>be<sp/>used<sp/>before<sp/>an<sp/>IndexPQ<sp/>or<sp/>an</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/>IndexIVFPQ.<sp/>The<sp/>method<sp/>is<sp/>the<sp/>non-parametric<sp/>version<sp/>described<sp/>in:</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>&quot;Optimized<sp/>Product<sp/>Quantization<sp/>for<sp/>Approximate<sp/>Nearest<sp/>Neighbor<sp/>Search&quot;</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>Tiezheng<sp/>Ge,<sp/>Kaiming<sp/>He,<sp/>Qifa<sp/>Ke,<sp/>Jian<sp/>Sun,<sp/>CVPR&apos;13</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="structfaiss_1_1OPQMatrix" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1OPQMatrix" kindref="compound">OPQMatrix</ref><sp/>:<sp/><ref refid="structfaiss_1_1LinearTransform" kindref="compound">LinearTransform</ref><sp/>{</highlight></codeline>
<codeline lineno="233" refid="structfaiss_1_1OPQMatrix_1a07ad0c0c84f96a6880c1c8eaf09596e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1OPQMatrix_1a07ad0c0c84f96a6880c1c8eaf09596e3" kindref="member">M</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>nb<sp/>of<sp/>subquantizers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="structfaiss_1_1OPQMatrix_1a12cb3e05989dee37592b682070c31000" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1OPQMatrix_1a12cb3e05989dee37592b682070c31000" kindref="member">niter</ref><sp/>=<sp/>50;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>outer<sp/>training<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="structfaiss_1_1OPQMatrix_1ab88c87a3931ec356904abf5f1f797a83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1OPQMatrix_1ab88c87a3931ec356904abf5f1f797a83" kindref="member">niter_pq</ref><sp/>=<sp/>4;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>training<sp/>iterations<sp/>for<sp/>the<sp/>PQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="structfaiss_1_1OPQMatrix_1a6406e97b05c831cc19b9343be3b43a1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1OPQMatrix_1a6406e97b05c831cc19b9343be3b43a1f" kindref="member">niter_pq_0</ref><sp/>=<sp/>40;<sp/></highlight><highlight class="comment">///&lt;<sp/>same,<sp/>for<sp/>the<sp/>first<sp/>outer<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>if<sp/>there<sp/>are<sp/>too<sp/>many<sp/>training<sp/>points,<sp/>resample</highlight></codeline>
<codeline lineno="239" refid="structfaiss_1_1OPQMatrix_1afdd5b2c74d19ccc5c7a6e0199333321a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1OPQMatrix_1afdd5b2c74d19ccc5c7a6e0199333321a" kindref="member">max_train_points</ref><sp/>=<sp/>256<sp/>*<sp/>256;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>if<sp/>non-NULL,<sp/>use<sp/>this<sp/>product<sp/>quantizer<sp/>for<sp/>training</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>should<sp/>be<sp/>constructed<sp/>with<sp/>(d_out,<sp/>M,<sp/>_)</highlight></codeline>
<codeline lineno="244" refid="structfaiss_1_1OPQMatrix_1a01d3736c8e725f596b99440324544a59" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref>*<sp/><ref refid="structfaiss_1_1OPQMatrix_1a01d3736c8e725f596b99440324544a59" kindref="member">pq</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>if<sp/>d2<sp/>!=<sp/>-1,<sp/>output<sp/>vectors<sp/>of<sp/>this<sp/>dimension</highlight></codeline>
<codeline lineno="247" refid="structfaiss_1_1OPQMatrix_1a377b53c090c7ab05814aaf9d6ec58fcf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1OPQMatrix_1a377b53c090c7ab05814aaf9d6ec58fcf" kindref="member">OPQMatrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1OPQMatrix_1a07ad0c0c84f96a6880c1c8eaf09596e3" kindref="member">M</ref><sp/>=<sp/>1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="structfaiss_1_1OPQMatrix_1abc57f03c88623a5844c7ac06a927ab6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1OPQMatrix_1abc57f03c88623a5844c7ac06a927ab6a" kindref="member">train</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">};</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment">/**<sp/>remap<sp/>dimensions<sp/>for<sp/>intput<sp/>vectors,<sp/>possibly<sp/>inserting<sp/>0s</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>strictly<sp/>speaking<sp/>this<sp/>is<sp/>also<sp/>a<sp/>linear<sp/>transform<sp/>but<sp/>we<sp/>don&apos;t<sp/>want</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>to<sp/>compute<sp/>it<sp/>with<sp/>matrix<sp/>multiplies<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="structfaiss_1_1RemapDimensionsTransform" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1RemapDimensionsTransform" kindref="compound">RemapDimensionsTransform</ref><sp/>:<sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>map<sp/>from<sp/>output<sp/>dimension<sp/>to<sp/>input,<sp/>size<sp/>d_out</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>-1<sp/>-&gt;<sp/>set<sp/>output<sp/>to<sp/>0</highlight></codeline>
<codeline lineno="258" refid="structfaiss_1_1RemapDimensionsTransform_1a09202a195ff5f75f83e68792751a637f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="structfaiss_1_1RemapDimensionsTransform_1a09202a195ff5f75f83e68792751a637f" kindref="member">map</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1RemapDimensionsTransform" kindref="compound">RemapDimensionsTransform</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="structfaiss_1_1RemapDimensionsTransform_1a09202a195ff5f75f83e68792751a637f" kindref="member">map</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>remap<sp/>input<sp/>to<sp/>output,<sp/>skipping<sp/>or<sp/>inserting<sp/>dimensions<sp/>as<sp/>needed</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>if<sp/>uniform:<sp/>distribute<sp/>dimensions<sp/>uniformly</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>otherwise<sp/>just<sp/>take<sp/>the<sp/>d_out<sp/>first<sp/>ones.</highlight></codeline>
<codeline lineno="265" refid="structfaiss_1_1RemapDimensionsTransform_1a9d0b75731ea2b7cc46c40ee5afe94b14" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1RemapDimensionsTransform_1a9d0b75731ea2b7cc46c40ee5afe94b14" kindref="member">RemapDimensionsTransform</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform_1a589d612f7b1773614619a0cbecd728a9" kindref="member">d_out</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uniform<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="structfaiss_1_1RemapDimensionsTransform_1aa3028183624634f5ab0d7d3fe78ffa9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1RemapDimensionsTransform_1aa3028183624634f5ab0d7d3fe78ffa9e" kindref="member">apply_noalloc</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>reverse<sp/>transform<sp/>correct<sp/>only<sp/>when<sp/>the<sp/>mapping<sp/>is<sp/>a<sp/>permutation</highlight></codeline>
<codeline lineno="270" refid="structfaiss_1_1RemapDimensionsTransform_1ac94a16755e3eb8693547f3a7ae90cec3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1RemapDimensionsTransform_1ac94a16755e3eb8693547f3a7ae90cec3" kindref="member">reverse_transform</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1RemapDimensionsTransform" kindref="compound">RemapDimensionsTransform</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_identical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">};</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">/**<sp/>per-vector<sp/>normalization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="structfaiss_1_1NormalizationTransform" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1NormalizationTransform" kindref="compound">NormalizationTransform</ref><sp/>:<sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>norm;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1NormalizationTransform" kindref="compound">NormalizationTransform</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>2.0);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1NormalizationTransform" kindref="compound">NormalizationTransform</ref>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="structfaiss_1_1NormalizationTransform_1a282007331f7f6d96792c89fe1f9ecefd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1NormalizationTransform_1a282007331f7f6d96792c89fe1f9ecefd" kindref="member">apply_noalloc</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Identity<sp/>transform<sp/>since<sp/>norm<sp/>is<sp/>not<sp/>revertible</highlight></codeline>
<codeline lineno="287" refid="structfaiss_1_1NormalizationTransform_1af280b21563b819ebb292a6f63d011ad1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1NormalizationTransform_1af280b21563b819ebb292a6f63d011ad1" kindref="member">reverse_transform</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_identical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">};</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment">/**<sp/>Subtract<sp/>the<sp/>mean<sp/>of<sp/>each<sp/>component<sp/>from<sp/>the<sp/>vectors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="structfaiss_1_1CenteringTransform" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1CenteringTransform" kindref="compound">CenteringTransform</ref><sp/>:<sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Mean,<sp/>size<sp/>d_in<sp/>=<sp/>d_out</highlight></codeline>
<codeline lineno="295" refid="structfaiss_1_1CenteringTransform_1af96e272f0f51d71ed098cdfe3e4ff87d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1CenteringTransform_1af96e272f0f51d71ed098cdfe3e4ff87d" kindref="member">mean</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1CenteringTransform" kindref="compound">CenteringTransform</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>train<sp/>on<sp/>n<sp/>vectors.</highlight></codeline>
<codeline lineno="300" refid="structfaiss_1_1CenteringTransform_1ae63f2afed997c435fda588b5a8642893" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1CenteringTransform_1ae63f2afed997c435fda588b5a8642893" kindref="member">train</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>subtract<sp/>the<sp/>mean</highlight></codeline>
<codeline lineno="303" refid="structfaiss_1_1CenteringTransform_1a0d9a07e911c43a598f64981f23afec0a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1CenteringTransform_1a0d9a07e911c43a598f64981f23afec0a" kindref="member">apply_noalloc</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>add<sp/>the<sp/>mean</highlight></codeline>
<codeline lineno="306" refid="structfaiss_1_1CenteringTransform_1a01aacceb0950fcb39b0f5e18103ea6d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1CenteringTransform_1a01aacceb0950fcb39b0f5e18103ea6d5" kindref="member">reverse_transform</ref>(<ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>xt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_identical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="faiss/VectorTransform.h"/>
  </compounddef>
</doxygen>
