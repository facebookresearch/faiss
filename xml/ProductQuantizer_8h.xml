<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="ProductQuantizer_8h" kind="file" language="C++">
    <compoundname>ProductQuantizer.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">vector</includes>
    <includes refid="Clustering_8h" local="no">faiss/Clustering.h</includes>
    <includes refid="Quantizer_8h" local="no">faiss/impl/Quantizer.h</includes>
    <includes refid="platform__macros_8h" local="no">faiss/impl/platform_macros.h</includes>
    <includes refid="Heap_8h" local="no">faiss/utils/Heap.h</includes>
    <includes refid="ProductQuantizer-inl_8h" local="no">faiss/impl/ProductQuantizer-inl.h</includes>
    <includedby refid="IndexIVFPQFastScan_8h" local="no">faiss/IndexIVFPQFastScan.h</includedby>
    <includedby refid="IndexPQ_8h" local="no">faiss/IndexPQ.h</includedby>
    <includedby refid="IndexPQFastScan_8h" local="no">faiss/IndexPQFastScan.h</includedby>
    <includedby refid="GpuIndexIVFPQ_8h" local="no">faiss/gpu/GpuIndexIVFPQ.h</includedby>
    <includedby refid="PolysemousTraining_8h" local="no">faiss/impl/PolysemousTraining.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>faiss/Clustering.h</label>
        <link refid="Clustering_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>faiss/Index.h</label>
        <link refid="Index_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>faiss/MetricType.h</label>
        <link refid="MetricType_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>faiss/impl/FaissAssert.h</label>
        <link refid="FaissAssert_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>faiss/impl/FaissException.h</label>
        <link refid="FaissException_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>faiss/impl/ProductQuantizer-inl.h</label>
        <link refid="ProductQuantizer-inl_8h_source"/>
      </node>
      <node id="1">
        <label>faiss/impl/ProductQuantizer.h</label>
        <link refid="ProductQuantizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>faiss/impl/Quantizer.h</label>
        <link refid="Quantizer_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>faiss/impl/platform_macros.h</label>
        <link refid="platform__macros_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>faiss/utils/Heap.h</label>
        <link refid="Heap_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>faiss/utils/ordered_key_value.h</label>
        <link refid="ordered__key__value_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>cassert</label>
      </node>
      <node id="19">
        <label>climits</label>
      </node>
      <node id="20">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="8">
        <label>cstdio</label>
      </node>
      <node id="15">
        <label>cstdlib</label>
      </node>
      <node id="21">
        <label>cstring</label>
      </node>
      <node id="11">
        <label>exception</label>
      </node>
      <node id="23">
        <label>limits</label>
      </node>
      <node id="16">
        <label>sstream</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="13">
        <label>utility</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>faiss/Index2Layer.h</label>
        <link refid="Index2Layer_8h_source"/>
      </node>
      <node id="5">
        <label>faiss/IndexHNSW.h</label>
        <link refid="IndexHNSW_8h_source"/>
      </node>
      <node id="6">
        <label>faiss/IndexIVFPQ.h</label>
        <link refid="IndexIVFPQ_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>faiss/IndexIVFPQFastScan.h</label>
        <link refid="IndexIVFPQFastScan_8h_source"/>
      </node>
      <node id="7">
        <label>faiss/IndexIVFPQR.h</label>
        <link refid="IndexIVFPQR_8h_source"/>
      </node>
      <node id="8">
        <label>faiss/IndexNSG.h</label>
        <link refid="IndexNSG_8h_source"/>
      </node>
      <node id="3">
        <label>faiss/IndexPQ.h</label>
        <link refid="IndexPQ_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>faiss/IndexPQFastScan.h</label>
        <link refid="IndexPQFastScan_8h_source"/>
      </node>
      <node id="12">
        <label>faiss/gpu/GpuIndexBinaryCagra.h</label>
        <link refid="GpuIndexBinaryCagra_8h_source"/>
      </node>
      <node id="11">
        <label>faiss/gpu/GpuIndexCagra.h</label>
        <link refid="GpuIndexCagra_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>faiss/gpu/GpuIndexIVFPQ.h</label>
        <link refid="GpuIndexIVFPQ_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>faiss/impl/PolysemousTraining.h</label>
        <link refid="PolysemousTraining_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>faiss/impl/ProductQuantizer.h</label>
        <link refid="ProductQuantizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structfaiss_1_1ProductQuantizer" prot="public">faiss::ProductQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1PQEncoderGeneric" prot="public">faiss::PQEncoderGeneric</innerclass>
    <innerclass refid="structfaiss_1_1PQEncoder8" prot="public">faiss::PQEncoder8</innerclass>
    <innerclass refid="structfaiss_1_1PQEncoder16" prot="public">faiss::PQEncoder16</innerclass>
    <innerclass refid="structfaiss_1_1PQDecoderGeneric" prot="public">faiss::PQDecoderGeneric</innerclass>
    <innerclass refid="structfaiss_1_1PQDecoder8" prot="public">faiss::PQDecoder8</innerclass>
    <innerclass refid="structfaiss_1_1PQDecoder16" prot="public">faiss::PQDecoder16</innerclass>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Meta<sp/>Platforms,<sp/>Inc.<sp/>and<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-*-<sp/>c++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAISS_PRODUCT_QUANTIZER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAISS_PRODUCT_QUANTIZER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/Clustering.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/impl/Quantizer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/impl/platform_macros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/utils/Heap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">/**<sp/>Product<sp/>Quantizer.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>PQ<sp/>is<sp/>trained<sp/>using<sp/>k-means,<sp/>minimizing<sp/>the<sp/>L2<sp/>distance<sp/>to<sp/>centroids.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PQ<sp/>supports<sp/>L2<sp/>and<sp/>Inner<sp/>Product<sp/>search,<sp/>however<sp/>the<sp/>quantization<sp/>error<sp/>is</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>biased<sp/>towards<sp/>L2<sp/>distance.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structfaiss_1_1ProductQuantizer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref><sp/>:<sp/><ref refid="structfaiss_1_1Quantizer" kindref="compound">Quantizer</ref><sp/>{</highlight></codeline>
<codeline lineno="30" refid="structfaiss_1_1ProductQuantizer_1a83600e328893ce5f41fe459f5a3acf41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a83600e328893ce5f41fe459f5a3acf41" kindref="member">M</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>number<sp/>of<sp/>subquantizers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structfaiss_1_1ProductQuantizer_1ac920fea11f02e8407d12cc99a09f5ea5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1ac920fea11f02e8407d12cc99a09f5ea5" kindref="member">nbits</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>number<sp/>of<sp/>bits<sp/>per<sp/>quantization<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>derived<sp/>from<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="structfaiss_1_1ProductQuantizer_1a467b451ca203544e42c250e4be65b983" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a467b451ca203544e42c250e4be65b983" kindref="member">dsub</ref>;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>dimensionality<sp/>of<sp/>each<sp/>subvector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structfaiss_1_1ProductQuantizer_1a0feee45e4151547b7a0444c14bad398f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a0feee45e4151547b7a0444c14bad398f" kindref="member">ksub</ref>;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>number<sp/>of<sp/>centroids<sp/>for<sp/>each<sp/>subquantizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structfaiss_1_1ProductQuantizer_1a1e4056fa3938ed8c9fe701e90d94ad95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a1e4056fa3938ed8c9fe701e90d94ad95" kindref="member">verbose</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>verbose<sp/>during<sp/>training?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>initialization</highlight></codeline>
<codeline lineno="39" refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35" kindref="member">train_type_t</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Train_default,</highlight></codeline>
<codeline lineno="41" refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35a4960d143d2aa49cf92028cf3470c47a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35a4960d143d2aa49cf92028cf3470c47a0" kindref="member">Train_hot_start</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>the<sp/>centroids<sp/>are<sp/>already<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35aa1aefc6c08f0ca974de9f59d9557aa0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35aa1aefc6c08f0ca974de9f59d9557aa0d" kindref="member">Train_shared</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>share<sp/>dictionary<sp/>across<sp/>PQ<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35ac8040c8792a014a2ea7188583575013e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35ac8040c8792a014a2ea7188583575013e" kindref="member">Train_hypercube</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>initialize<sp/>centroids<sp/>with<sp/>nbits-D<sp/>hypercube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35a6b330bc2cfa02a402d002d657f214931" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35a6b330bc2cfa02a402d002d657f214931" kindref="member">Train_hypercube_pca</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>initialize<sp/>centroids<sp/>with<sp/>nbits-D<sp/>hypercube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a3a41c6286095e731be744548d9535a35" kindref="member">train_type_t</ref><sp/>train_type;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structfaiss_1_1ProductQuantizer_1af265acf5aa1bcda60898002287e6a3d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ClusteringParameters" kindref="compound">ClusteringParameters</ref><sp/><ref refid="structfaiss_1_1ProductQuantizer_1af265acf5aa1bcda60898002287e6a3d6" kindref="member">cp</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>parameters<sp/>used<sp/>during<sp/>clustering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>if<sp/>non-NULL,<sp/>use<sp/>this<sp/>index<sp/>for<sp/>assignment<sp/>(should<sp/>be<sp/>of<sp/>size</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>d<sp/>/<sp/>M)</highlight></codeline>
<codeline lineno="52" refid="structfaiss_1_1ProductQuantizer_1a62def246cfef670f2973fdf4af1414e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref>*<sp/><ref refid="structfaiss_1_1ProductQuantizer_1a62def246cfef670f2973fdf4af1414e1" kindref="member">assign_index</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Centroid<sp/>table,<sp/>size<sp/>M<sp/>*<sp/>ksub<sp/>*<sp/>dsub.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Layout:<sp/>(M,<sp/>ksub,<sp/>dsub)</highlight></codeline>
<codeline lineno="56" refid="structfaiss_1_1ProductQuantizer_1aab1109a29ba0544358e274d727b23cae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1ProductQuantizer_1aab1109a29ba0544358e274d727b23cae" kindref="member">centroids</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Transposed<sp/>centroid<sp/>table,<sp/>size<sp/>M<sp/>*<sp/>ksub<sp/>*<sp/>dsub.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Layout:<sp/>(dsub,<sp/>M,<sp/>ksub)</highlight></codeline>
<codeline lineno="60" refid="structfaiss_1_1ProductQuantizer_1a106129ce7f970aaa059c6c43437d72e5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1ProductQuantizer_1a106129ce7f970aaa059c6c43437d72e5" kindref="member">transposed_centroids</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Squared<sp/>lengths<sp/>of<sp/>centroids,<sp/>size<sp/>M<sp/>*<sp/>ksub</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Layout:<sp/>(M,<sp/>ksub)</highlight></codeline>
<codeline lineno="64" refid="structfaiss_1_1ProductQuantizer_1adb062ef85ba4ad595add97ac9751e18c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1ProductQuantizer_1adb062ef85ba4ad595add97ac9751e18c" kindref="member">centroids_sq_lengths</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>return<sp/>the<sp/>centroids<sp/>associated<sp/>with<sp/>subvector<sp/>m</highlight></codeline>
<codeline lineno="67" refid="structfaiss_1_1ProductQuantizer_1ae9124e52d1c7b69ec88e1096af00ac2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="structfaiss_1_1ProductQuantizer_1ae9124e52d1c7b69ec88e1096af00ac2c" kindref="member">get_centroids</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="structfaiss_1_1ProductQuantizer_1aab1109a29ba0544358e274d727b23cae" kindref="member">centroids</ref>[(m<sp/>*<sp/><ref refid="structfaiss_1_1ProductQuantizer_1a0feee45e4151547b7a0444c14bad398f" kindref="member">ksub</ref><sp/>+<sp/>i)<sp/>*<sp/><ref refid="structfaiss_1_1ProductQuantizer_1a467b451ca203544e42c250e4be65b983" kindref="member">dsub</ref>];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="structfaiss_1_1ProductQuantizer_1ae9124e52d1c7b69ec88e1096af00ac2c" kindref="member">get_centroids</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="structfaiss_1_1ProductQuantizer_1aab1109a29ba0544358e274d727b23cae" kindref="member">centroids</ref>[(m<sp/>*<sp/><ref refid="structfaiss_1_1ProductQuantizer_1a0feee45e4151547b7a0444c14bad398f" kindref="member">ksub</ref><sp/>+<sp/>i)<sp/>*<sp/><ref refid="structfaiss_1_1ProductQuantizer_1a467b451ca203544e42c250e4be65b983" kindref="member">dsub</ref>];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Train<sp/>the<sp/>product<sp/>quantizer<sp/>on<sp/>a<sp/>set<sp/>of<sp/>points.<sp/>A<sp/>clustering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>set<sp/>on<sp/>input<sp/>to<sp/>define<sp/>non-default<sp/>clustering<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structfaiss_1_1ProductQuantizer_1a3d066376adf471dd936c251f9f5706c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a3d066376adf471dd936c251f9f5706c3" kindref="member">train</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref>(</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1Quantizer_1a416da1bab43fefa36563210a86298a75" kindref="member">d</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dimensionality<sp/>of<sp/>the<sp/>input<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a83600e328893ce5f41fe459f5a3acf41" kindref="member">M</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>subquantizers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1ac920fea11f02e8407d12cc99a09f5ea5" kindref="member">nbits</ref>);<sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>bit<sp/>per<sp/>subvector<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>compute<sp/>derived<sp/>values<sp/>when<sp/>d,<sp/>M<sp/>and<sp/>nbits<sp/>have<sp/>been<sp/>set</highlight></codeline>
<codeline lineno="86" refid="structfaiss_1_1ProductQuantizer_1ab3067f333b26811537a8519fb08292ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1ab3067f333b26811537a8519fb08292ce" kindref="member">set_derived_values</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Define<sp/>the<sp/>centroids<sp/>for<sp/>subquantizer<sp/>m</highlight></codeline>
<codeline lineno="89" refid="structfaiss_1_1ProductQuantizer_1ad291f113c6d44a634ddc1972f9a3c775" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1ad291f113c6d44a634ddc1972f9a3c775" kindref="member">set_params</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="structfaiss_1_1ProductQuantizer_1aab1109a29ba0544358e274d727b23cae" kindref="member">centroids</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Quantize<sp/>one<sp/>vector<sp/>with<sp/>the<sp/>product<sp/>quantizer</highlight></codeline>
<codeline lineno="92" refid="structfaiss_1_1ProductQuantizer_1a0af195096d925aa3daaedca4884c6ccd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a0af195096d925aa3daaedca4884c6ccd" kindref="member">compute_code</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/>uint8_t*<sp/>code)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>same<sp/>as<sp/>compute_code<sp/>for<sp/>several<sp/>vectors</highlight></codeline>
<codeline lineno="95" refid="structfaiss_1_1ProductQuantizer_1a4cf7deeb4d4454e2b79876458ada36bc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a4cf7deeb4d4454e2b79876458ada36bc" kindref="member">compute_codes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/>uint8_t*<sp/>codes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>speed<sp/>up<sp/>code<sp/>assignment<sp/>using<sp/>assign_index</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>(non-const<sp/>because<sp/>the<sp/>index<sp/>is<sp/>changed)</highlight></codeline>
<codeline lineno="99" refid="structfaiss_1_1ProductQuantizer_1aecd05d180799f3956065b0c5c54fd406" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1aecd05d180799f3956065b0c5c54fd406" kindref="member">compute_codes_with_assign_index</ref>(</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/>codes,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>decode<sp/>a<sp/>vector<sp/>from<sp/>a<sp/>given<sp/>code<sp/>(or<sp/>n<sp/>vectors<sp/>if<sp/>third<sp/>argument)</highlight></codeline>
<codeline lineno="105" refid="structfaiss_1_1ProductQuantizer_1a933a195a8e8deabb40ed1a31661a53c1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a933a195a8e8deabb40ed1a31661a53c1" kindref="member">decode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>code,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106" refid="structfaiss_1_1ProductQuantizer_1ad8c4cd19b05301ef3afca0589d16a199" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1ad8c4cd19b05301ef3afca0589d16a199" kindref="member">decode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>code,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>If<sp/>we<sp/>happen<sp/>to<sp/>have<sp/>the<sp/>distance<sp/>tables<sp/>precomputed,<sp/>this<sp/>is</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>more<sp/>efficient<sp/>to<sp/>compute<sp/>the<sp/>codes.</highlight></codeline>
<codeline lineno="110" refid="structfaiss_1_1ProductQuantizer_1a95ddfd9f296816a6bdb7470d92abe4c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a95ddfd9f296816a6bdb7470d92abe4c4" kindref="member">compute_code_from_distance_table</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>tab,<sp/>uint8_t*<sp/>code)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Compute<sp/>distance<sp/>table<sp/>for<sp/>one<sp/>vector.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>distance<sp/>table<sp/>for<sp/>x<sp/>=<sp/>[x_0<sp/>x_1<sp/>..<sp/>x_(M-1)]<sp/>is<sp/>a<sp/>M<sp/>*<sp/>ksub</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>matrix<sp/>that<sp/>contains</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>dis_table<sp/>(m,<sp/>j)<sp/>=<sp/>||<sp/>x_m<sp/>-<sp/>c_(m,<sp/>j)||^2</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>for<sp/>m<sp/>=<sp/>0..M-1<sp/>and<sp/>j<sp/>=<sp/>0<sp/>..<sp/>ksub<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>where<sp/>c_(m,<sp/>j)<sp/>is<sp/>the<sp/>centroid<sp/>no<sp/>j<sp/>of<sp/>sub-quantizer<sp/>m.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>vector<sp/>size<sp/>d</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>dis_table<sp/>output<sp/>table,<sp/>size<sp/>M<sp/>*<sp/>ksub</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="structfaiss_1_1ProductQuantizer_1a6363a356656b77497dd2f544ea1c8607" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a6363a356656b77497dd2f544ea1c8607" kindref="member">compute_distance_table</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dis_table)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_inner_prod_table(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dis_table)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>compute<sp/>distance<sp/>table<sp/>for<sp/>several<sp/>vectors</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>nx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>of<sp/>input<sp/>vectors</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>vector<sp/>size<sp/>nx<sp/>*<sp/>d</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>dis_table<sp/>output<sp/>table,<sp/>size<sp/>nx<sp/>*<sp/>M<sp/>*<sp/>ksub</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="structfaiss_1_1ProductQuantizer_1ad4743f0b4ae6034ad8801593dc97b711" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1ad4743f0b4ae6034ad8801593dc97b711" kindref="member">compute_distance_tables</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dis_tables)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_inner_prod_tables(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dis_tables)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>perform<sp/>a<sp/>search<sp/>(L2<sp/>distance)</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query<sp/>vectors,<sp/>size<sp/>nx<sp/>*<sp/>d</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>nx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>of<sp/>queries</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>codes<sp/><sp/><sp/><sp/>database<sp/>codes,<sp/>size<sp/>ncodes<sp/>*<sp/>code_size</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>ncodes<sp/><sp/><sp/>nb<sp/>of<sp/>nb<sp/>vectors</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>res<sp/><sp/><sp/><sp/><sp/><sp/>heap<sp/>array<sp/>to<sp/>store<sp/>results<sp/>(nh<sp/>==<sp/>nx)</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>init_finalize_heap<sp/><sp/>initialize<sp/>heap<sp/>(input)<sp/>and<sp/>sort<sp/>(output)?</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="structfaiss_1_1ProductQuantizer_1a7a1da5dbad9cfdd552590af1df9e96ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a7a1da5dbad9cfdd552590af1df9e96ad" kindref="member">search</ref>(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nx,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>codes,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_maxheap_array_t</ref>*<sp/>res,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init_finalize_heap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>same<sp/>as<sp/>search,<sp/>but<sp/>with<sp/>inner<sp/>product<sp/>similarity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="structfaiss_1_1ProductQuantizer_1a7aebd290b0d52de7789d68599002bcf3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1a7aebd290b0d52de7789d68599002bcf3" kindref="member">search_ip</ref>(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>x,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nx,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>codes,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_minheap_array_t</ref>*<sp/>res,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init_finalize_heap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Symmetric<sp/>Distance<sp/>Table</highlight></codeline>
<codeline lineno="167" refid="structfaiss_1_1ProductQuantizer_1a6bd65fb4407452f73acb7242931d09e4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="structfaiss_1_1ProductQuantizer_1a6bd65fb4407452f73acb7242931d09e4" kindref="member">sdc_table</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intitialize<sp/>the<sp/>SDC<sp/>table<sp/>from<sp/>the<sp/>centroids</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute_sdc_table();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>search_sdc(</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>qcodes,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nq,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bcodes,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_maxheap_array_t</ref>*<sp/>res,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init_finalize_heap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Sync<sp/>transposed<sp/>centroids<sp/>with<sp/>regular<sp/>centroids.<sp/>This<sp/>call</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>is<sp/>needed<sp/>if<sp/>centroids<sp/>were<sp/>edited<sp/>directly.</highlight></codeline>
<codeline lineno="182" refid="structfaiss_1_1ProductQuantizer_1ac2e3dc171f2b58a0394ab81368cf4b78" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1ac2e3dc171f2b58a0394ab81368cf4b78" kindref="member">sync_transposed_centroids</ref>();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Clear<sp/>transposed<sp/>centroids<sp/>table<sp/>so<sp/>ones<sp/>are<sp/>no<sp/>longer<sp/>used.</highlight></codeline>
<codeline lineno="185" refid="structfaiss_1_1ProductQuantizer_1ac8b70d04d5037883ac69772f1967ab7e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1ProductQuantizer_1ac8b70d04d5037883ac69772f1967ab7e" kindref="member">clear_transposed_centroids</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>block<sp/>size<sp/>used<sp/>in<sp/>ProductQuantizer::compute_codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">FAISS_API<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>product_quantizer_compute_codes_bs;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*************************************************</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>Objects<sp/>to<sp/>encode<sp/>/<sp/>decode<sp/>strings<sp/>of<sp/>bits</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="structfaiss_1_1PQEncoderGeneric" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1PQEncoderGeneric" kindref="compound">PQEncoderGeneric</ref><sp/>{</highlight></codeline>
<codeline lineno="196" refid="structfaiss_1_1PQEncoderGeneric_1a1eb9629c00521f2df491ce87c694094b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><ref refid="structfaiss_1_1PQEncoderGeneric_1a1eb9629c00521f2df491ce87c694094b" kindref="member">code</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>code<sp/>for<sp/>this<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>offset;</highlight></codeline>
<codeline lineno="198" refid="structfaiss_1_1PQEncoderGeneric_1ab538bb3439bcad5f51d06d4b0f94fd65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PQEncoderGeneric_1ab538bb3439bcad5f51d06d4b0f94fd65" kindref="member">nbits</ref>;<sp/></highlight><highlight class="comment">///&lt;<sp/>number<sp/>of<sp/>bits<sp/>per<sp/>subquantizer<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reg;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1PQEncoderGeneric" kindref="compound">PQEncoderGeneric</ref>(uint8_t*<sp/><ref refid="structfaiss_1_1PQEncoderGeneric_1a1eb9629c00521f2df491ce87c694094b" kindref="member">code</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1PQEncoderGeneric_1ab538bb3439bcad5f51d06d4b0f94fd65" kindref="member">nbits</ref>,<sp/>uint8_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode(uint64_t<sp/>x);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1PQEncoderGeneric" kindref="compound">~PQEncoderGeneric</ref>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal">};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="structfaiss_1_1PQEncoder8" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1PQEncoder8" kindref="compound">PQEncoder8</ref><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>code;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1PQEncoder8" kindref="compound">PQEncoder8</ref>(uint8_t*<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode(uint64_t<sp/>x);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="structfaiss_1_1PQEncoder16" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1PQEncoder16" kindref="compound">PQEncoder16</ref><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t*<sp/>code;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1PQEncoder16" kindref="compound">PQEncoder16</ref>(uint8_t*<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encode(uint64_t<sp/>x);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="structfaiss_1_1PQDecoderGeneric" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1PQDecoderGeneric" kindref="compound">PQDecoderGeneric</ref><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>code;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>offset;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>mask;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reg;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1PQDecoderGeneric" kindref="compound">PQDecoderGeneric</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>decode();</highlight></codeline>
<codeline lineno="229"><highlight class="normal">};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="structfaiss_1_1PQDecoder8" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1PQDecoder8" kindref="compound">PQDecoder8</ref><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>code;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1PQDecoder8" kindref="compound">PQDecoder8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>decode();</highlight></codeline>
<codeline lineno="236"><highlight class="normal">};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="structfaiss_1_1PQDecoder16" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1PQDecoder16" kindref="compound">PQDecoder16</ref><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t*<sp/>code;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1PQDecoder16" kindref="compound">PQDecoder16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbits);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>decode();</highlight></codeline>
<codeline lineno="243"><highlight class="normal">};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/impl/ProductQuantizer-inl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="faiss/impl/ProductQuantizer.h"/>
  </compounddef>
</doxygen>
