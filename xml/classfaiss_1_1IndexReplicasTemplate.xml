<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classfaiss_1_1IndexReplicasTemplate" kind="class" language="C++" prot="public">
    <compoundname>faiss::IndexReplicasTemplate</compoundname>
    <basecompoundref refid="classfaiss_1_1ThreadedIndex" prot="public" virt="non-virtual">faiss::ThreadedIndex&lt; IndexT &gt;</basecompoundref>
    <includes refid="IndexReplicas_8h" local="no">IndexReplicas.h</includes>
    <templateparamlist>
      <param>
        <type>typename IndexT</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classfaiss_1_1IndexReplicasTemplate_1aa2482e6d6245830bad1cd29551262793" prot="public" static="no">
        <type>typename IndexT::component_t</type>
        <definition>using faiss::IndexReplicasTemplate&lt; IndexT &gt;::component_t =  typename IndexT::component_t</definition>
        <argsstring></argsstring>
        <name>component_t</name>
        <qualifiedname>faiss::IndexReplicasTemplate::component_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="23" column="5" bodyfile="faiss/IndexReplicas.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classfaiss_1_1IndexReplicasTemplate_1a33eb25784833dd8dbb24544d8043eec0" prot="public" static="no">
        <type>typename IndexT::distance_t</type>
        <definition>using faiss::IndexReplicasTemplate&lt; IndexT &gt;::distance_t =  typename IndexT::distance_t</definition>
        <argsstring></argsstring>
        <name>distance_t</name>
        <qualifiedname>faiss::IndexReplicasTemplate::distance_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="24" column="5" bodyfile="faiss/IndexReplicas.h" bodystart="24" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1a29d851d995abc011c759a855ae0057ae" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexReplicasTemplate&lt; IndexT &gt;::IndexReplicasTemplate</definition>
        <argsstring>(bool threaded=true)</argsstring>
        <name>IndexReplicasTemplate</name>
        <qualifiedname>faiss::IndexReplicasTemplate::IndexReplicasTemplate</qualifiedname>
        <param>
          <type>bool</type>
          <declname>threaded</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The dimension that all sub-indices must share will be the dimension of the first sub-index added <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threaded</parametername>
</parameternamelist>
<parameterdescription>
<para>do we use one thread per sub-index or do queries sequentially? </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="30" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1ada9226643e1a48e45c65ffecc57b7391" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexReplicasTemplate&lt; IndexT &gt;::IndexReplicasTemplate</definition>
        <argsstring>(idx_t d, bool threaded=true)</argsstring>
        <name>IndexReplicasTemplate</name>
        <qualifiedname>faiss::IndexReplicasTemplate::IndexReplicasTemplate</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threaded</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>the dimension that all sub-indices must share </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threaded</parametername>
</parameternamelist>
<parameterdescription>
<para>do we use one thread per sub index or do queries sequentially? </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="35" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1adbad834789bb985ce8c99a82dc020248" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexReplicasTemplate&lt; IndexT &gt;::IndexReplicasTemplate</definition>
        <argsstring>(int d, bool threaded=true)</argsstring>
        <name>IndexReplicasTemplate</name>
        <qualifiedname>faiss::IndexReplicasTemplate::IndexReplicasTemplate</qualifiedname>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threaded</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>int version due to the implicit bool conversion ambiguity of int as dimension </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="39" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1a34bf1c7e890c2e5a57307fd3ee5b980b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::add_replica</definition>
        <argsstring>(IndexT *index)</argsstring>
        <name>add_replica</name>
        <qualifiedname>faiss::IndexReplicasTemplate::add_replica</qualifiedname>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for <ref refid="classfaiss_1_1ThreadedIndex_1a9a11a672369d48f45cf1dd1bfe0dad87" kindref="member">addIndex()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="42" column="10" bodyfile="faiss/IndexReplicas.h" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1affcfc49402a7c3d5604689bfbab00326" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::remove_replica</definition>
        <argsstring>(IndexT *index)</argsstring>
        <name>remove_replica</name>
        <qualifiedname>faiss::IndexReplicasTemplate::remove_replica</qualifiedname>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for <ref refid="classfaiss_1_1ThreadedIndex_1a21604d6b8b8d42e6cc78c26e85564027" kindref="member">removeIndex()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="47" column="10" bodyfile="faiss/IndexReplicas.h" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1a5cdb2a340a3b4f45ec244d5398a29005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::train</definition>
        <argsstring>(idx_t n, const component_t *x) override</argsstring>
        <name>train</name>
        <qualifiedname>faiss::IndexReplicasTemplate::train</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const component_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> API All indices receive the same call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="53" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1a6b110e7efab3d01be7ae7cb346d9fbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::add</definition>
        <argsstring>(idx_t n, const component_t *x) override</argsstring>
        <name>add</name>
        <qualifiedname>faiss::IndexReplicasTemplate::add</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const component_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> API All indices receive the same call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="57" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1ad789f012a72a2b2db938d06ad1295019" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::search</definition>
        <argsstring>(idx_t n, const component_t *x, idx_t k, distance_t *distances, idx_t *labels, const SearchParameters *params=nullptr) const override</argsstring>
        <name>search</name>
        <qualifiedname>faiss::IndexReplicasTemplate::search</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const component_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>distance_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> API Query is partitioned into a slice for each sub-index split by ceil(n / #indices) for our sub-indices </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="62" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1a9fb6804492c12359b5cc2aa26fe6a6d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::reconstruct</definition>
        <argsstring>(idx_t, component_t *v) const override</argsstring>
        <name>reconstruct</name>
        <qualifiedname>faiss::IndexReplicasTemplate::reconstruct</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
        </param>
        <param>
          <type>component_t *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>reconstructs from the first index </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="71" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1a7b1233eb598fc053e61b7ceccdb9d71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::syncWithSubIndexes</definition>
        <argsstring>()</argsstring>
        <name>syncWithSubIndexes</name>
        <qualifiedname>faiss::IndexReplicasTemplate::syncWithSubIndexes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronize the top-level index (IndexShards) with data in the sub-indices </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="75" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1a9a11a672369d48f45cf1dd1bfe0dad87" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::ThreadedIndex&lt; IndexT &gt;::addIndex</definition>
        <argsstring>(IndexT *index)</argsstring>
        <name>addIndex</name>
        <qualifiedname>faiss::ThreadedIndex::addIndex</qualifiedname>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>override an index that is managed by ourselves. WARNING: once an index is added, it becomes unsafe to touch it from any other thread than that on which is managing it, until we are shut down. Use runOnIndex to perform work on it instead. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="32" column="18" bodyfile="faiss/impl/ThreadedIndex-inl.h" bodystart="47" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1a21604d6b8b8d42e6cc78c26e85564027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ThreadedIndex&lt; IndexT &gt;::removeIndex</definition>
        <argsstring>(IndexT *index)</argsstring>
        <name>removeIndex</name>
        <qualifiedname>faiss::ThreadedIndex::removeIndex</qualifiedname>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove an index that is managed by ourselves. This will flush all pending work on that index, and then shut down its managing thread, and will remove the index. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="37" column="10" bodyfile="faiss/impl/ThreadedIndex-inl.h" bodystart="90" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1a30ade89dc4e571868cf121e5592d6687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ThreadedIndex&lt; IndexT &gt;::runOnIndex</definition>
        <argsstring>(std::function&lt; void(int, IndexT *)&gt; f)</argsstring>
        <name>runOnIndex</name>
        <qualifiedname>faiss::ThreadedIndex::runOnIndex</qualifiedname>
        <param>
          <type>std::function&lt; void(int, IndexT *)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run a function on all indices, in the thread that the index is managed in. Function arguments are (index in collection, index pointer) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="42" column="10" bodyfile="faiss/impl/ThreadedIndex-inl.h" bodystart="121" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1af5188782bc9e776800b96d1610b3f22b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ThreadedIndex&lt; IndexT &gt;::runOnIndex</definition>
        <argsstring>(std::function&lt; void(int, const IndexT *)&gt; f) const</argsstring>
        <name>runOnIndex</name>
        <qualifiedname>faiss::ThreadedIndex::runOnIndex</qualifiedname>
        <param>
          <type>std::function&lt; void(int, const IndexT *)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="43" column="10" bodyfile="faiss/impl/ThreadedIndex-inl.h" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1a4536f6e7a8cce1f79bebc420ae1e909b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ThreadedIndex&lt; IndexT &gt;::reset</definition>
        <argsstring>() override</argsstring>
        <name>reset</name>
        <qualifiedname>faiss::ThreadedIndex::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> API All indices receive the same call </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="47" column="10" bodyfile="faiss/impl/ThreadedIndex-inl.h" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1a2f9cadbcb9335c0833f61259230429a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::ThreadedIndex&lt; IndexT &gt;::count</definition>
        <argsstring>() const</argsstring>
        <name>count</name>
        <qualifiedname>faiss::ThreadedIndex::count</qualifiedname>
        <briefdescription>
<para>Returns the number of sub-indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="50" column="9" bodyfile="faiss/impl/ThreadedIndex.h" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1a357254021639c167dedf37fce2427d9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>IndexT *</type>
        <definition>IndexT * faiss::ThreadedIndex&lt; IndexT &gt;::at</definition>
        <argsstring>(size_t i)</argsstring>
        <name>at</name>
        <qualifiedname>faiss::ThreadedIndex::at</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the i-th sub-index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="55" column="12" bodyfile="faiss/impl/ThreadedIndex.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1a8f8108166de42429361baa030698c119" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const IndexT *</type>
        <definition>const IndexT * faiss::ThreadedIndex&lt; IndexT &gt;::at</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>at</name>
        <qualifiedname>faiss::ThreadedIndex::at</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the i-th sub-index (const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="60" column="18" bodyfile="faiss/impl/ThreadedIndex.h" bodystart="60" bodyend="62"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1a4fd98a5ba105391bfb3e490d84d26b27" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::onAfterAddIndex</definition>
        <argsstring>(IndexT *index) override</argsstring>
        <name>onAfterAddIndex</name>
        <qualifiedname>faiss::IndexReplicasTemplate::onAfterAddIndex</qualifiedname>
        <reimplements refid="classfaiss_1_1ThreadedIndex_1abdcae15f8589c53d4fa648fb2d5ab625">onAfterAddIndex</reimplements>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Called just after an index is added. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="79" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1IndexReplicasTemplate_1a1cc7b38bf2e478ac1ee26d332953fb30" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexReplicasTemplate&lt; IndexT &gt;::onAfterRemoveIndex</definition>
        <argsstring>(IndexT *index) override</argsstring>
        <name>onAfterRemoveIndex</name>
        <qualifiedname>faiss::IndexReplicasTemplate::onAfterRemoveIndex</qualifiedname>
        <reimplements refid="classfaiss_1_1ThreadedIndex_1a3bfc1a3002a150d850b20dc40c5d31fe">onAfterRemoveIndex</reimplements>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Called just after an index is removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="82" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classfaiss_1_1ThreadedIndex_1a1223180acd3979e7205c91d2dba9d306" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::ThreadedIndex&lt; IndexT &gt;::own_indices</definition>
        <argsstring></argsstring>
        <name>own_indices</name>
        <qualifiedname>faiss::ThreadedIndex::own_indices</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether or not we are responsible for deleting our contained indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="65" column="10" bodyfile="faiss/impl/ThreadedIndex.h" bodystart="65" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classfaiss_1_1ThreadedIndex_1acb0dc6a321ad80636d5fef5cc7edd05b" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; IndexT *, std::unique_ptr&lt; <ref refid="classfaiss_1_1WorkerThread" kindref="compound">WorkerThread</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;IndexT*, std::unique_ptr&lt;WorkerThread&gt; &gt; &gt; faiss::ThreadedIndex&lt; IndexT &gt;::indices_</definition>
        <argsstring></argsstring>
        <name>indices_</name>
        <qualifiedname>faiss::ThreadedIndex::indices_</qualifiedname>
        <briefdescription>
<para>Collection of <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> instances, with their managing worker thread if any. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="78" column="17" bodyfile="faiss/impl/ThreadedIndex.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1ThreadedIndex_1a1031b2c900e9ba53573e617539b3c488" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::ThreadedIndex&lt; IndexT &gt;::isThreaded_</definition>
        <argsstring></argsstring>
        <name>isThreaded_</name>
        <qualifiedname>faiss::ThreadedIndex::isThreaded_</qualifiedname>
        <briefdescription>
<para>Is this index multi-threaded? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="81" column="10" bodyfile="faiss/impl/ThreadedIndex.h" bodystart="81" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classfaiss_1_1ThreadedIndex_1a4ef2398a63568d069b17ef56a4b3ac09" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ThreadedIndex&lt; IndexT &gt;::waitAndHandleFutures</definition>
        <argsstring>(std::vector&lt; std::future&lt; bool &gt; &gt; &amp;v)</argsstring>
        <name>waitAndHandleFutures</name>
        <qualifiedname>faiss::ThreadedIndex::waitAndHandleFutures</qualifiedname>
        <param>
          <type>std::vector&lt; std::future&lt; bool &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ThreadedIndex.h" line="75" column="17" bodyfile="faiss/impl/ThreadedIndex-inl.h" bodystart="173" bodyend="191"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Takes individual <ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> instances, and splits queries for sending to each <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> instance, and joins the results together when done. Each index is managed by a separate CPU thread. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>IndexT</label>
      </node>
      <node id="1">
        <label>faiss::IndexReplicasTemplate&lt; IndexT &gt;</label>
        <link refid="classfaiss_1_1IndexReplicasTemplate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>faiss::ThreadedIndex&lt; IndexT &gt;</label>
        <link refid="classfaiss_1_1ThreadedIndex"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>IndexT</label>
      </node>
      <node id="1">
        <label>faiss::IndexReplicasTemplate&lt; IndexT &gt;</label>
        <link refid="classfaiss_1_1IndexReplicasTemplate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>faiss::ThreadedIndex&lt; IndexT &gt;</label>
        <link refid="classfaiss_1_1ThreadedIndex"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="faiss/IndexReplicas.h" line="21" column="1" bodyfile="faiss/IndexReplicas.h" bodystart="21" bodyend="83"/>
    <listofallmembers>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a6b110e7efab3d01be7ae7cb346d9fbf9" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>add</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a34bf1c7e890c2e5a57307fd3ee5b980b" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>add_replica</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a9a11a672369d48f45cf1dd1bfe0dad87" prot="public" virt="virtual"><scope>faiss::IndexReplicasTemplate</scope><name>addIndex</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a357254021639c167dedf37fce2427d9d" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>at</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a8f8108166de42429361baa030698c119" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>at</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1aa2482e6d6245830bad1cd29551262793" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>component_t</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a2f9cadbcb9335c0833f61259230429a7" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>count</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a33eb25784833dd8dbb24544d8043eec0" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>distance_t</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a29d851d995abc011c759a855ae0057ae" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>IndexReplicasTemplate</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1ada9226643e1a48e45c65ffecc57b7391" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>IndexReplicasTemplate</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1adbad834789bb985ce8c99a82dc020248" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>IndexReplicasTemplate</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1acb0dc6a321ad80636d5fef5cc7edd05b" prot="protected" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>indices_</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a1031b2c900e9ba53573e617539b3c488" prot="protected" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>isThreaded_</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a4fd98a5ba105391bfb3e490d84d26b27" prot="protected" virt="virtual"><scope>faiss::IndexReplicasTemplate</scope><name>onAfterAddIndex</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a1cc7b38bf2e478ac1ee26d332953fb30" prot="protected" virt="virtual"><scope>faiss::IndexReplicasTemplate</scope><name>onAfterRemoveIndex</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a1223180acd3979e7205c91d2dba9d306" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>own_indices</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a9fb6804492c12359b5cc2aa26fe6a6d6" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>reconstruct</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1affcfc49402a7c3d5604689bfbab00326" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>remove_replica</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a21604d6b8b8d42e6cc78c26e85564027" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>removeIndex</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a4536f6e7a8cce1f79bebc420ae1e909b" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>reset</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a30ade89dc4e571868cf121e5592d6687" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>runOnIndex</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1af5188782bc9e776800b96d1610b3f22b" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>runOnIndex</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1ad789f012a72a2b2db938d06ad1295019" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>search</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a7b1233eb598fc053e61b7ceccdb9d71d" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>syncWithSubIndexes</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1ac603a659e678e154a49722bc428538e9" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>ThreadedIndex</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a52a2c216ed16feb3be6a57e15253b368" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>ThreadedIndex</name></member>
      <member refid="classfaiss_1_1IndexReplicasTemplate_1a5cdb2a340a3b4f45ec244d5398a29005" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>train</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a4ef2398a63568d069b17ef56a4b3ac09" prot="protected" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>waitAndHandleFutures</name></member>
      <member refid="classfaiss_1_1ThreadedIndex_1a79fdffee4cc4aef5dd3d91183e2be5f9" prot="public" virt="non-virtual"><scope>faiss::IndexReplicasTemplate</scope><name>~ThreadedIndex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
