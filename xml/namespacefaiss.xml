<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacefaiss" kind="namespace" language="C++">
    <compoundname>faiss</compoundname>
    <innerclass refid="structfaiss_1_1AdditiveCoarseQuantizer" prot="public">faiss::AdditiveCoarseQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1AdditiveQuantizer" prot="public">faiss::AdditiveQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1AlignedTable" prot="public">faiss::AlignedTable</innerclass>
    <innerclass refid="structfaiss_1_1AlignedTableTightAlloc" prot="public">faiss::AlignedTableTightAlloc</innerclass>
    <innerclass refid="structfaiss_1_1ArrayInvertedLists" prot="public">faiss::ArrayInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1AutoTuneCriterion" prot="public">faiss::AutoTuneCriterion</innerclass>
    <innerclass refid="structfaiss_1_1BinaryInvertedListScanner" prot="public">faiss::BinaryInvertedListScanner</innerclass>
    <innerclass refid="structfaiss_1_1BitstringReader" prot="public">faiss::BitstringReader</innerclass>
    <innerclass refid="structfaiss_1_1BitstringWriter" prot="public">faiss::BitstringWriter</innerclass>
    <innerclass refid="structfaiss_1_1BlockInvertedLists" prot="public">faiss::BlockInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1BlockInvertedListsIOHook" prot="public">faiss::BlockInvertedListsIOHook</innerclass>
    <innerclass refid="structfaiss_1_1BlockResultHandler" prot="public">faiss::BlockResultHandler</innerclass>
    <innerclass refid="structfaiss_1_1BufferedIOReader" prot="public">faiss::BufferedIOReader</innerclass>
    <innerclass refid="structfaiss_1_1BufferedIOWriter" prot="public">faiss::BufferedIOWriter</innerclass>
    <innerclass refid="structfaiss_1_1BufferList" prot="public">faiss::BufferList</innerclass>
    <innerclass refid="structfaiss_1_1CenteringTransform" prot="public">faiss::CenteringTransform</innerclass>
    <innerclass refid="structfaiss_1_1Cloner" prot="public">faiss::Cloner</innerclass>
    <innerclass refid="structfaiss_1_1Clustering" prot="public">faiss::Clustering</innerclass>
    <innerclass refid="structfaiss_1_1Clustering1D" prot="public">faiss::Clustering1D</innerclass>
    <innerclass refid="structfaiss_1_1ClusteringIterationStats" prot="public">faiss::ClusteringIterationStats</innerclass>
    <innerclass refid="structfaiss_1_1ClusteringParameters" prot="public">faiss::ClusteringParameters</innerclass>
    <innerclass refid="structfaiss_1_1CMax" prot="public">faiss::CMax</innerclass>
    <innerclass refid="structfaiss_1_1CMin" prot="public">faiss::CMin</innerclass>
    <innerclass refid="structfaiss_1_1CodePacker" prot="public">faiss::CodePacker</innerclass>
    <innerclass refid="structfaiss_1_1CodePackerFlat" prot="public">faiss::CodePackerFlat</innerclass>
    <innerclass refid="structfaiss_1_1CodePackerPQ4" prot="public">faiss::CodePackerPQ4</innerclass>
    <innerclass refid="structfaiss_1_1CodeSet" prot="public">faiss::CodeSet</innerclass>
    <innerclass refid="structfaiss_1_1CombinerRangeKNN" prot="public">faiss::CombinerRangeKNN</innerclass>
    <innerclass refid="structfaiss_1_1DirectMap" prot="public">faiss::DirectMap</innerclass>
    <innerclass refid="structfaiss_1_1DirectMapAdd" prot="public">faiss::DirectMapAdd</innerclass>
    <innerclass refid="structfaiss_1_1DistanceComputer" prot="public">faiss::DistanceComputer</innerclass>
    <innerclass refid="structfaiss_1_1DummyScaler" prot="public">faiss::DummyScaler</innerclass>
    <innerclass refid="structfaiss_1_1EnumeratedVectors" prot="public">faiss::EnumeratedVectors</innerclass>
    <innerclass refid="classfaiss_1_1FaissException" prot="public">faiss::FaissException</innerclass>
    <innerclass refid="structfaiss_1_1FastScanDistancePostProcessing" prot="public">faiss::FastScanDistancePostProcessing</innerclass>
    <innerclass refid="structfaiss_1_1FastScanStats" prot="public">faiss::FastScanStats</innerclass>
    <innerclass refid="structfaiss_1_1FileIOReader" prot="public">faiss::FileIOReader</innerclass>
    <innerclass refid="structfaiss_1_1FileIOWriter" prot="public">faiss::FileIOWriter</innerclass>
    <innerclass refid="structfaiss_1_1FlatCodesDistanceComputer" prot="public">faiss::FlatCodesDistanceComputer</innerclass>
    <innerclass refid="structfaiss_1_1GenHammingComputer16" prot="public">faiss::GenHammingComputer16</innerclass>
    <innerclass refid="structfaiss_1_1GenHammingComputer32" prot="public">faiss::GenHammingComputer32</innerclass>
    <innerclass refid="structfaiss_1_1GenHammingComputer8" prot="public">faiss::GenHammingComputer8</innerclass>
    <innerclass refid="structfaiss_1_1GenHammingComputerM8" prot="public">faiss::GenHammingComputerM8</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer" prot="public">faiss::HammingComputer</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer16" prot="public">faiss::HammingComputer16</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer20" prot="public">faiss::HammingComputer20</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer32" prot="public">faiss::HammingComputer32</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer4" prot="public">faiss::HammingComputer4</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer64" prot="public">faiss::HammingComputer64</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer8" prot="public">faiss::HammingComputer8</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputerDefault" prot="public">faiss::HammingComputerDefault</innerclass>
    <innerclass refid="structfaiss_1_1HCounterState" prot="public">faiss::HCounterState</innerclass>
    <innerclass refid="structfaiss_1_1HeapArray" prot="public">faiss::HeapArray</innerclass>
    <innerclass refid="structfaiss_1_1HeapBlockResultHandler" prot="public">faiss::HeapBlockResultHandler</innerclass>
    <innerclass refid="structfaiss_1_1HeapWithBuckets" prot="public">faiss::HeapWithBuckets</innerclass>
    <innerclass refid="structfaiss_1_1HeapWithBuckets_3_01CMax_3_01float_00_01int_01_4_00_01NBUCKETS_00_01N_01_4" prot="public">faiss::HeapWithBuckets&lt; CMax&lt; float, int &gt;, NBUCKETS, N &gt;</innerclass>
    <innerclass refid="structfaiss_1_1HeapWithBucketsForHamming16" prot="public">faiss::HeapWithBucketsForHamming16</innerclass>
    <innerclass refid="structfaiss_1_1HeapWithBucketsForHamming16_3_01CMax_3_01int_00_01int64__t_01_4_00_01NBUCKETS_00_01N_00_01HammingComputerT_01_4" prot="public">faiss::HeapWithBucketsForHamming16&lt; CMax&lt; int, int64_t &gt;, NBUCKETS, N, HammingComputerT &gt;</innerclass>
    <innerclass refid="structfaiss_1_1HeapWithBucketsForHamming32" prot="public">faiss::HeapWithBucketsForHamming32</innerclass>
    <innerclass refid="structfaiss_1_1HeapWithBucketsForHamming32_3_01CMax_3_01int_00_01int64__t_01_4_00_01NBUCKETS_00_01N_00_01HammingComputerT_01_4" prot="public">faiss::HeapWithBucketsForHamming32&lt; CMax&lt; int, int64_t &gt;, NBUCKETS, N, HammingComputerT &gt;</innerclass>
    <innerclass refid="structfaiss_1_1HNSW" prot="public">faiss::HNSW</innerclass>
    <innerclass refid="structfaiss_1_1HNSWStats" prot="public">faiss::HNSWStats</innerclass>
    <innerclass refid="structfaiss_1_1HStackInvertedLists" prot="public">faiss::HStackInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1IDSelector" prot="public">faiss::IDSelector</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorAll" prot="public">faiss::IDSelectorAll</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorAnd" prot="public">faiss::IDSelectorAnd</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorArray" prot="public">faiss::IDSelectorArray</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorBatch" prot="public">faiss::IDSelectorBatch</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorBitmap" prot="public">faiss::IDSelectorBitmap</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorNot" prot="public">faiss::IDSelectorNot</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorOr" prot="public">faiss::IDSelectorOr</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorRange" prot="public">faiss::IDSelectorRange</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorTranslated" prot="public">faiss::IDSelectorTranslated</innerclass>
    <innerclass refid="structfaiss_1_1IDSelectorXOr" prot="public">faiss::IDSelectorXOr</innerclass>
    <innerclass refid="structfaiss_1_1Index" prot="public">faiss::Index</innerclass>
    <innerclass refid="structfaiss_1_1Index2Layer" prot="public">faiss::Index2Layer</innerclass>
    <innerclass refid="structfaiss_1_1IndexAdditiveQuantizer" prot="public">faiss::IndexAdditiveQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexAdditiveQuantizerFastScan" prot="public">faiss::IndexAdditiveQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinary" prot="public">faiss::IndexBinary</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryFlat" prot="public">faiss::IndexBinaryFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryFromFloat" prot="public">faiss::IndexBinaryFromFloat</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryHash" prot="public">faiss::IndexBinaryHash</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryHashStats" prot="public">faiss::IndexBinaryHashStats</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryHNSW" prot="public">faiss::IndexBinaryHNSW</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryHNSWCagra" prot="public">faiss::IndexBinaryHNSWCagra</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryIVF" prot="public">faiss::IndexBinaryIVF</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryMultiHash" prot="public">faiss::IndexBinaryMultiHash</innerclass>
    <innerclass refid="structfaiss_1_1IndexFastScan" prot="public">faiss::IndexFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlat" prot="public">faiss::IndexFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlat1D" prot="public">faiss::IndexFlat1D</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlatCodes" prot="public">faiss::IndexFlatCodes</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlatIP" prot="public">faiss::IndexFlatIP</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlatL2" prot="public">faiss::IndexFlatL2</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSW" prot="public">faiss::IndexHNSW</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSW2Level" prot="public">faiss::IndexHNSW2Level</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSWCagra" prot="public">faiss::IndexHNSWCagra</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSWFlat" prot="public">faiss::IndexHNSWFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSWPQ" prot="public">faiss::IndexHNSWPQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSWSQ" prot="public">faiss::IndexHNSWSQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexIDMap2Template" prot="public">faiss::IndexIDMap2Template</innerclass>
    <innerclass refid="structfaiss_1_1IndexIDMapTemplate" prot="public">faiss::IndexIDMapTemplate</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVF" prot="public">faiss::IndexIVF</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFAdditiveQuantizer" prot="public">faiss::IndexIVFAdditiveQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFAdditiveQuantizerFastScan" prot="public">faiss::IndexIVFAdditiveQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFFastScan" prot="public">faiss::IndexIVFFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFFlat" prot="public">faiss::IndexIVFFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFFlatDedup" prot="public">faiss::IndexIVFFlatDedup</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFIndependentQuantizer" prot="public">faiss::IndexIVFIndependentQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFInterface" prot="public">faiss::IndexIVFInterface</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFLocalSearchQuantizer" prot="public">faiss::IndexIVFLocalSearchQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFLocalSearchQuantizerFastScan" prot="public">faiss::IndexIVFLocalSearchQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFPQ" prot="public">faiss::IndexIVFPQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFPQFastScan" prot="public">faiss::IndexIVFPQFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFPQR" prot="public">faiss::IndexIVFPQR</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFPQStats" prot="public">faiss::IndexIVFPQStats</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFProductLocalSearchQuantizer" prot="public">faiss::IndexIVFProductLocalSearchQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFProductLocalSearchQuantizerFastScan" prot="public">faiss::IndexIVFProductLocalSearchQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFProductResidualQuantizer" prot="public">faiss::IndexIVFProductResidualQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFProductResidualQuantizerFastScan" prot="public">faiss::IndexIVFProductResidualQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFRaBitQ" prot="public">faiss::IndexIVFRaBitQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFRaBitQFastScan" prot="public">faiss::IndexIVFRaBitQFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFResidualQuantizer" prot="public">faiss::IndexIVFResidualQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFResidualQuantizerFastScan" prot="public">faiss::IndexIVFResidualQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFScalarQuantizer" prot="public">faiss::IndexIVFScalarQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFSpectralHash" prot="public">faiss::IndexIVFSpectralHash</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFStats" prot="public">faiss::IndexIVFStats</innerclass>
    <innerclass refid="structfaiss_1_1IndexLattice" prot="public">faiss::IndexLattice</innerclass>
    <innerclass refid="structfaiss_1_1IndexLocalSearchQuantizer" prot="public">faiss::IndexLocalSearchQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexLocalSearchQuantizerFastScan" prot="public">faiss::IndexLocalSearchQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexLSH" prot="public">faiss::IndexLSH</innerclass>
    <innerclass refid="structfaiss_1_1IndexNeuralNetCodec" prot="public">faiss::IndexNeuralNetCodec</innerclass>
    <innerclass refid="structfaiss_1_1IndexNNDescent" prot="public">faiss::IndexNNDescent</innerclass>
    <innerclass refid="structfaiss_1_1IndexNNDescentFlat" prot="public">faiss::IndexNNDescentFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexNSG" prot="public">faiss::IndexNSG</innerclass>
    <innerclass refid="structfaiss_1_1IndexNSGFlat" prot="public">faiss::IndexNSGFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexNSGPQ" prot="public">faiss::IndexNSGPQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexNSGSQ" prot="public">faiss::IndexNSGSQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexPQ" prot="public">faiss::IndexPQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexPQFastScan" prot="public">faiss::IndexPQFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexPQStats" prot="public">faiss::IndexPQStats</innerclass>
    <innerclass refid="structfaiss_1_1IndexPreTransform" prot="public">faiss::IndexPreTransform</innerclass>
    <innerclass refid="structfaiss_1_1IndexProductLocalSearchQuantizer" prot="public">faiss::IndexProductLocalSearchQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexProductLocalSearchQuantizerFastScan" prot="public">faiss::IndexProductLocalSearchQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexProductResidualQuantizer" prot="public">faiss::IndexProductResidualQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexProductResidualQuantizerFastScan" prot="public">faiss::IndexProductResidualQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexQINCo" prot="public">faiss::IndexQINCo</innerclass>
    <innerclass refid="structfaiss_1_1IndexRaBitQ" prot="public">faiss::IndexRaBitQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexRaBitQFastScan" prot="public">faiss::IndexRaBitQFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexRandom" prot="public">faiss::IndexRandom</innerclass>
    <innerclass refid="structfaiss_1_1IndexRefine" prot="public">faiss::IndexRefine</innerclass>
    <innerclass refid="structfaiss_1_1IndexRefineFlat" prot="public">faiss::IndexRefineFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexRefineSearchParameters" prot="public">faiss::IndexRefineSearchParameters</innerclass>
    <innerclass refid="classfaiss_1_1IndexReplicasTemplate" prot="public">faiss::IndexReplicasTemplate</innerclass>
    <innerclass refid="structfaiss_1_1IndexResidualQuantizer" prot="public">faiss::IndexResidualQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexResidualQuantizerFastScan" prot="public">faiss::IndexResidualQuantizerFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexRowwiseMinMax" prot="public">faiss::IndexRowwiseMinMax</innerclass>
    <innerclass refid="structfaiss_1_1IndexRowwiseMinMaxBase" prot="public">faiss::IndexRowwiseMinMaxBase</innerclass>
    <innerclass refid="structfaiss_1_1IndexRowwiseMinMaxFP16" prot="public">faiss::IndexRowwiseMinMaxFP16</innerclass>
    <innerclass refid="structfaiss_1_1IndexScalarQuantizer" prot="public">faiss::IndexScalarQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexShardsIVF" prot="public">faiss::IndexShardsIVF</innerclass>
    <innerclass refid="structfaiss_1_1IndexShardsTemplate" prot="public">faiss::IndexShardsTemplate</innerclass>
    <innerclass refid="structfaiss_1_1IndexSplitVectors" prot="public">faiss::IndexSplitVectors</innerclass>
    <innerclass refid="structfaiss_1_1InterruptCallback" prot="public">faiss::InterruptCallback</innerclass>
    <innerclass refid="structfaiss_1_1IntersectionCriterion" prot="public">faiss::IntersectionCriterion</innerclass>
    <innerclass refid="structfaiss_1_1InvertedLists" prot="public">faiss::InvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1InvertedListScanner" prot="public">faiss::InvertedListScanner</innerclass>
    <innerclass refid="structfaiss_1_1InvertedListsIOHook" prot="public">faiss::InvertedListsIOHook</innerclass>
    <innerclass refid="structfaiss_1_1InvertedListsIterator" prot="public">faiss::InvertedListsIterator</innerclass>
    <innerclass refid="structfaiss_1_1IOReader" prot="public">faiss::IOReader</innerclass>
    <innerclass refid="structfaiss_1_1IOWriter" prot="public">faiss::IOWriter</innerclass>
    <innerclass refid="structfaiss_1_1is__maybe__owned__vector" prot="public">faiss::is_maybe_owned_vector</innerclass>
    <innerclass refid="structfaiss_1_1is__maybe__owned__vector_3_01MaybeOwnedVector_3_01T_01_4_01_4" prot="public">faiss::is_maybe_owned_vector&lt; MaybeOwnedVector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structfaiss_1_1ITQMatrix" prot="public">faiss::ITQMatrix</innerclass>
    <innerclass refid="structfaiss_1_1ITQTransform" prot="public">faiss::ITQTransform</innerclass>
    <innerclass refid="structfaiss_1_1IVFFastScanStats" prot="public">faiss::IVFFastScanStats</innerclass>
    <innerclass refid="structfaiss_1_1IVFPQSearchParameters" prot="public">faiss::IVFPQSearchParameters</innerclass>
    <innerclass refid="structfaiss_1_1IVFRaBitQFastScanSearchParameters" prot="public">faiss::IVFRaBitQFastScanSearchParameters</innerclass>
    <innerclass refid="structfaiss_1_1IVFRaBitQSearchParameters" prot="public">faiss::IVFRaBitQSearchParameters</innerclass>
    <innerclass refid="structfaiss_1_1Level1Quantizer" prot="public">faiss::Level1Quantizer</innerclass>
    <innerclass refid="structfaiss_1_1LinearTransform" prot="public">faiss::LinearTransform</innerclass>
    <innerclass refid="structfaiss_1_1LocalSearchCoarseQuantizer" prot="public">faiss::LocalSearchCoarseQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1LocalSearchQuantizer" prot="public">faiss::LocalSearchQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1MappedFileIOReader" prot="public">faiss::MappedFileIOReader</innerclass>
    <innerclass refid="structfaiss_1_1MaskedInvertedLists" prot="public">faiss::MaskedInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1MatrixStats" prot="public">faiss::MatrixStats</innerclass>
    <innerclass refid="structfaiss_1_1MaybeOwnedVector" prot="public">faiss::MaybeOwnedVector</innerclass>
    <innerclass refid="structfaiss_1_1MaybeOwnedVectorOwner" prot="public">faiss::MaybeOwnedVectorOwner</innerclass>
    <innerclass refid="structfaiss_1_1MmappedFileMappingOwner" prot="public">faiss::MmappedFileMappingOwner</innerclass>
    <innerclass refid="structfaiss_1_1MultiIndexQuantizer" prot="public">faiss::MultiIndexQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1MultiIndexQuantizer2" prot="public">faiss::MultiIndexQuantizer2</innerclass>
    <innerclass refid="structfaiss_1_1NegativeDistanceComputer" prot="public">faiss::NegativeDistanceComputer</innerclass>
    <innerclass refid="structfaiss_1_1NeuralNetCodec" prot="public">faiss::NeuralNetCodec</innerclass>
    <innerclass refid="structfaiss_1_1NNDescent" prot="public">faiss::NNDescent</innerclass>
    <innerclass refid="structfaiss_1_1NormalizationTransform" prot="public">faiss::NormalizationTransform</innerclass>
    <innerclass refid="structfaiss_1_1NormTableScaler" prot="public">faiss::NormTableScaler</innerclass>
    <innerclass refid="structfaiss_1_1NSG" prot="public">faiss::NSG</innerclass>
    <innerclass refid="structfaiss_1_1OnDiskInvertedLists" prot="public">faiss::OnDiskInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1OnDiskInvertedListsIOHook" prot="public">faiss::OnDiskInvertedListsIOHook</innerclass>
    <innerclass refid="structfaiss_1_1OnDiskOneList" prot="public">faiss::OnDiskOneList</innerclass>
    <innerclass refid="structfaiss_1_1OneRecallAtRCriterion" prot="public">faiss::OneRecallAtRCriterion</innerclass>
    <innerclass refid="structfaiss_1_1OperatingPoint" prot="public">faiss::OperatingPoint</innerclass>
    <innerclass refid="structfaiss_1_1OperatingPoints" prot="public">faiss::OperatingPoints</innerclass>
    <innerclass refid="structfaiss_1_1OPQMatrix" prot="public">faiss::OPQMatrix</innerclass>
    <innerclass refid="structfaiss_1_1ParameterRange" prot="public">faiss::ParameterRange</innerclass>
    <innerclass refid="structfaiss_1_1ParameterSpace" prot="public">faiss::ParameterSpace</innerclass>
    <innerclass refid="structfaiss_1_1PartitionStats" prot="public">faiss::PartitionStats</innerclass>
    <innerclass refid="structfaiss_1_1PCAMatrix" prot="public">faiss::PCAMatrix</innerclass>
    <innerclass refid="structfaiss_1_1PermutationObjective" prot="public">faiss::PermutationObjective</innerclass>
    <innerclass refid="structfaiss_1_1PolysemousTraining" prot="public">faiss::PolysemousTraining</innerclass>
    <innerclass refid="structfaiss_1_1PQDecoder16" prot="public">faiss::PQDecoder16</innerclass>
    <innerclass refid="structfaiss_1_1PQDecoder8" prot="public">faiss::PQDecoder8</innerclass>
    <innerclass refid="structfaiss_1_1PQDecoderGeneric" prot="public">faiss::PQDecoderGeneric</innerclass>
    <innerclass refid="structfaiss_1_1PQEncoder16" prot="public">faiss::PQEncoder16</innerclass>
    <innerclass refid="structfaiss_1_1PQEncoder8" prot="public">faiss::PQEncoder8</innerclass>
    <innerclass refid="structfaiss_1_1PQEncoderGeneric" prot="public">faiss::PQEncoderGeneric</innerclass>
    <innerclass refid="structfaiss_1_1ProductAdditiveQuantizer" prot="public">faiss::ProductAdditiveQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1ProductLocalSearchQuantizer" prot="public">faiss::ProductLocalSearchQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1ProductQuantizer" prot="public">faiss::ProductQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1ProductResidualQuantizer" prot="public">faiss::ProductResidualQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1ProgressiveDimClustering" prot="public">faiss::ProgressiveDimClustering</innerclass>
    <innerclass refid="structfaiss_1_1ProgressiveDimClusteringParameters" prot="public">faiss::ProgressiveDimClusteringParameters</innerclass>
    <innerclass refid="structfaiss_1_1ProgressiveDimIndexFactory" prot="public">faiss::ProgressiveDimIndexFactory</innerclass>
    <innerclass refid="structfaiss_1_1QINCo" prot="public">faiss::QINCo</innerclass>
    <innerclass refid="structfaiss_1_1QINCoStep" prot="public">faiss::QINCoStep</innerclass>
    <innerclass refid="structfaiss_1_1Quantizer" prot="public">faiss::Quantizer</innerclass>
    <innerclass refid="structfaiss_1_1RaBitQHeapHandler" prot="public">faiss::RaBitQHeapHandler</innerclass>
    <innerclass refid="structfaiss_1_1RaBitQSearchParameters" prot="public">faiss::RaBitQSearchParameters</innerclass>
    <innerclass refid="structfaiss_1_1RaBitQuantizer" prot="public">faiss::RaBitQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1RandomGenerator" prot="public">faiss::RandomGenerator</innerclass>
    <innerclass refid="structfaiss_1_1RandomRotationMatrix" prot="public">faiss::RandomRotationMatrix</innerclass>
    <innerclass refid="structfaiss_1_1RangeQueryResult" prot="public">faiss::RangeQueryResult</innerclass>
    <innerclass refid="structfaiss_1_1RangeSearchBlockResultHandler" prot="public">faiss::RangeSearchBlockResultHandler</innerclass>
    <innerclass refid="structfaiss_1_1RangeSearchPartialResult" prot="public">faiss::RangeSearchPartialResult</innerclass>
    <innerclass refid="structfaiss_1_1RangeSearchResult" prot="public">faiss::RangeSearchResult</innerclass>
    <innerclass refid="structfaiss_1_1ReadOnlyInvertedLists" prot="public">faiss::ReadOnlyInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1RemapDimensionsTransform" prot="public">faiss::RemapDimensionsTransform</innerclass>
    <innerclass refid="structfaiss_1_1Repeat" prot="public">faiss::Repeat</innerclass>
    <innerclass refid="structfaiss_1_1Repeats" prot="public">faiss::Repeats</innerclass>
    <innerclass refid="structfaiss_1_1ReproduceDistancesObjective" prot="public">faiss::ReproduceDistancesObjective</innerclass>
    <innerclass refid="structfaiss_1_1ReservoirBlockResultHandler" prot="public">faiss::ReservoirBlockResultHandler</innerclass>
    <innerclass refid="structfaiss_1_1ReservoirTopN" prot="public">faiss::ReservoirTopN</innerclass>
    <innerclass refid="structfaiss_1_1ResidualCoarseQuantizer" prot="public">faiss::ResidualCoarseQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1ResidualQuantizer" prot="public">faiss::ResidualQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1ResultHandler" prot="public">faiss::ResultHandler</innerclass>
    <innerclass refid="structfaiss_1_1ScalarQuantizer" prot="public">faiss::ScalarQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1SearchParameters" prot="public">faiss::SearchParameters</innerclass>
    <innerclass refid="structfaiss_1_1SearchParametersHNSW" prot="public">faiss::SearchParametersHNSW</innerclass>
    <innerclass refid="structfaiss_1_1SearchParametersIVF" prot="public">faiss::SearchParametersIVF</innerclass>
    <innerclass refid="structfaiss_1_1SearchParametersPQ" prot="public">faiss::SearchParametersPQ</innerclass>
    <innerclass refid="structfaiss_1_1SearchParametersPreTransform" prot="public">faiss::SearchParametersPreTransform</innerclass>
    <innerclass refid="structfaiss_1_1SearchParametersResidualCoarseQuantizer" prot="public">faiss::SearchParametersResidualCoarseQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1simd16uint16" prot="public">faiss::simd16uint16</innerclass>
    <innerclass refid="structfaiss_1_1simd256bit" prot="public">faiss::simd256bit</innerclass>
    <innerclass refid="structfaiss_1_1simd32uint16" prot="public">faiss::simd32uint16</innerclass>
    <innerclass refid="structfaiss_1_1simd32uint8" prot="public">faiss::simd32uint8</innerclass>
    <innerclass refid="structfaiss_1_1simd512bit" prot="public">faiss::simd512bit</innerclass>
    <innerclass refid="structfaiss_1_1simd64uint8" prot="public">faiss::simd64uint8</innerclass>
    <innerclass refid="structfaiss_1_1simd8float32" prot="public">faiss::simd8float32</innerclass>
    <innerclass refid="structfaiss_1_1simd8uint32" prot="public">faiss::simd8uint32</innerclass>
    <innerclass refid="structfaiss_1_1SIMDResultHandler" prot="public">faiss::SIMDResultHandler</innerclass>
    <innerclass refid="structfaiss_1_1SIMDResultHandlerToFloat" prot="public">faiss::SIMDResultHandlerToFloat</innerclass>
    <innerclass refid="structfaiss_1_1SimulatedAnnealingOptimizer" prot="public">faiss::SimulatedAnnealingOptimizer</innerclass>
    <innerclass refid="structfaiss_1_1SimulatedAnnealingParameters" prot="public">faiss::SimulatedAnnealingParameters</innerclass>
    <innerclass refid="structfaiss_1_1SliceInvertedLists" prot="public">faiss::SliceInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1SplitMix64RandomGenerator" prot="public">faiss::SplitMix64RandomGenerator</innerclass>
    <innerclass refid="structfaiss_1_1StopWordsInvertedLists" prot="public">faiss::StopWordsInvertedLists</innerclass>
    <innerclass refid="classfaiss_1_1ThreadedIndex" prot="public">faiss::ThreadedIndex</innerclass>
    <innerclass refid="structfaiss_1_1TimeoutCallback" prot="public">faiss::TimeoutCallback</innerclass>
    <innerclass refid="structfaiss_1_1Top1BlockResultHandler" prot="public">faiss::Top1BlockResultHandler</innerclass>
    <innerclass refid="structfaiss_1_1TopkBlockResultHandler" prot="public">faiss::TopkBlockResultHandler</innerclass>
    <innerclass refid="structfaiss_1_1TransformedVectors" prot="public">faiss::TransformedVectors</innerclass>
    <innerclass refid="structfaiss_1_1VectorDistance" prot="public">faiss::VectorDistance</innerclass>
    <innerclass refid="structfaiss_1_1VectorIOReader" prot="public">faiss::VectorIOReader</innerclass>
    <innerclass refid="structfaiss_1_1VectorIOWriter" prot="public">faiss::VectorIOWriter</innerclass>
    <innerclass refid="structfaiss_1_1VectorTransform" prot="public">faiss::VectorTransform</innerclass>
    <innerclass refid="structfaiss_1_1VisitedTable" prot="public">faiss::VisitedTable</innerclass>
    <innerclass refid="structfaiss_1_1VStackInvertedLists" prot="public">faiss::VStackInvertedLists</innerclass>
    <innerclass refid="classfaiss_1_1WorkerThread" prot="public">faiss::WorkerThread</innerclass>
    <innerclass refid="structfaiss_1_1ZeroCopyIOReader" prot="public">faiss::ZeroCopyIOReader</innerclass>
    <innerclass refid="structfaiss_1_1ZnSphereCodec" prot="public">faiss::ZnSphereCodec</innerclass>
    <innerclass refid="structfaiss_1_1ZnSphereCodecAlt" prot="public">faiss::ZnSphereCodecAlt</innerclass>
    <innerclass refid="structfaiss_1_1ZnSphereCodecRec" prot="public">faiss::ZnSphereCodecRec</innerclass>
    <innerclass refid="structfaiss_1_1ZnSphereSearch" prot="public">faiss::ZnSphereSearch</innerclass>
    <innernamespace refid="namespacefaiss_1_1cppcontrib">faiss::cppcontrib</innernamespace>
    <innernamespace refid="namespacefaiss_1_1detail">faiss::detail</innernamespace>
    <innernamespace refid="namespacefaiss_1_1gpu">faiss::gpu</innernamespace>
    <innernamespace refid="namespacefaiss_1_1ivflib">faiss::ivflib</innernamespace>
    <innernamespace refid="namespacefaiss_1_1lsq">faiss::lsq</innernamespace>
    <innernamespace refid="namespacefaiss_1_1nn">faiss::nn</innernamespace>
    <innernamespace refid="namespacefaiss_1_1nndescent">faiss::nndescent</innernamespace>
    <innernamespace refid="namespacefaiss_1_1nsg">faiss::nsg</innernamespace>
    <innernamespace refid="namespacefaiss_1_1quantize__lut">faiss::quantize_lut</innernamespace>
    <innernamespace refid="namespacefaiss_1_1rabitq">faiss::rabitq</innernamespace>
    <innernamespace refid="namespacefaiss_1_1rabitq__utils">faiss::rabitq_utils</innernamespace>
    <innernamespace refid="namespacefaiss_1_1rq__encode__steps">faiss::rq_encode_steps</innernamespace>
    <innernamespace refid="namespacefaiss_1_1simd__result__handlers">faiss::simd_result_handlers</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacefaiss_1a066c8f0f39015edaa88ecd57de2f912f" prot="public" static="no" strong="no">
        <type></type>
        <name>NumericType</name>
        <qualifiedname>faiss::NumericType</qualifiedname>
        <enumvalue id="namespacefaiss_1a066c8f0f39015edaa88ecd57de2f912fac5c3cac87aecdf173850923b29f8b7fa" prot="public">
          <name>Float32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1a066c8f0f39015edaa88ecd57de2f912fa5f19b796a0b240566043d85e02d89916" prot="public">
          <name>Float16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1a066c8f0f39015edaa88ecd57de2f912fa28587803fff68768664d9bebd946579d" prot="public">
          <name>UInt8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1a066c8f0f39015edaa88ecd57de2f912fa7a76285f7e279a179c116218a1aadba1" prot="public">
          <name>Int8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="59" column="1" bodyfile="faiss/Index.h" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="enum" id="namespacefaiss_1afd12191c638da74760ff397cf319752c" prot="public" static="no" strong="no">
        <type></type>
        <name>MetricType</name>
        <qualifiedname>faiss::MetricType</qualifiedname>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca96ba216fbb3b4e586edf26637d61c7b2" prot="public">
          <name>METRIC_INNER_PRODUCT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>maximum inner product search </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752cace9aa175fe11f346aa0a70df58977ff1" prot="public">
          <name>METRIC_L2</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>squared L2 search </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752cad1ccd4c5874f8d03f77227b40e4777df" prot="public">
          <name>METRIC_L1</name>
          <briefdescription>
<para>L1 (aka cityblock) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca6eefdfaded6b0f0c51ed3a91acff01c3" prot="public">
          <name>METRIC_Linf</name>
          <briefdescription>
<para>infinity distance </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca948cb1a3b5ec11c028c0be6a5dbd908c" prot="public">
          <name>METRIC_Lp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>L_p distance, p is given by a <ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> metric_arg </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752caf4e931a0d14ac0d0acd8cc74504df12a" prot="public">
          <name>METRIC_Canberra</name>
          <initializer>= 20</initializer>
          <briefdescription>
<para>some additional metrics defined in scipy.spatial.distance </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752caeaa8e44a2c8ecdc7a84a9d052da8b9ea" prot="public">
          <name>METRIC_BrayCurtis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca0ed6b1105d1f075fb996657320bed012" prot="public">
          <name>METRIC_JensenShannon</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca9d87c6d698adfbe153eba955b64f0034" prot="public">
          <name>METRIC_Jaccard</name>
          <briefdescription>
<para>sum_i(min(a_i, b_i)) / sum_i(max(a_i, b_i)) where a_i, b_i &gt; 0 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752cacb32f4fe0d27316f90eda03ffe999f85" prot="public">
          <name>METRIC_NaNEuclidean</name>
          <briefdescription>
<para>Squared Eucliden distance, ignoring NaNs. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca6fa7c42681d0022558a10e89b3be24a8" prot="public">
          <name>METRIC_GOWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gower&apos;s distance - numeric dimensions are in [0,1] and categorical dimensions are negative integers </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The metric space for vector comparison for Faiss indices and algorithms.</para>
<para>Most algorithms support both inner product and L2, with the flat (brute-force) indices supporting additional metric types for vector comparison. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/MetricType.h" line="23" column="1" bodyfile="faiss/MetricType.h" bodystart="23" bodyend="43"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacefaiss_1a73b36a88d6db5db6a15d165150e54348" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexIDMapTemplate" kindref="compound">IndexIDMapTemplate</ref>&lt; <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>using faiss::IndexIDMap = typedef IndexIDMapTemplate&lt;Index&gt;</definition>
        <argsstring></argsstring>
        <name>IndexIDMap</name>
        <qualifiedname>faiss::IndexIDMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIDMap.h" line="88" column="1" bodyfile="faiss/IndexIDMap.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a0fcd5b438dc8ed29fe802c9f86b5ed03" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexIDMapTemplate" kindref="compound">IndexIDMapTemplate</ref>&lt; <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &gt;</type>
        <definition>using faiss::IndexBinaryIDMap = typedef IndexIDMapTemplate&lt;IndexBinary&gt;</definition>
        <argsstring></argsstring>
        <name>IndexBinaryIDMap</name>
        <qualifiedname>faiss::IndexBinaryIDMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIDMap.h" line="89" column="1" bodyfile="faiss/IndexIDMap.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1aa08ba3d567937ac89a8a7e96ede18bc2" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexIDMap2Template" kindref="compound">IndexIDMap2Template</ref>&lt; <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>using faiss::IndexIDMap2 = typedef IndexIDMap2Template&lt;Index&gt;</definition>
        <argsstring></argsstring>
        <name>IndexIDMap2</name>
        <qualifiedname>faiss::IndexIDMap2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIDMap.h" line="126" column="1" bodyfile="faiss/IndexIDMap.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1abb449fb7eb62ff35c48165c965621d10" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexIDMap2Template" kindref="compound">IndexIDMap2Template</ref>&lt; <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &gt;</type>
        <definition>using faiss::IndexBinaryIDMap2 = typedef IndexIDMap2Template&lt;IndexBinary&gt;</definition>
        <argsstring></argsstring>
        <name>IndexBinaryIDMap2</name>
        <qualifiedname>faiss::IndexBinaryIDMap2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIDMap.h" line="127" column="1" bodyfile="faiss/IndexIDMap.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a0423615e86d00dda03ae73c199c705af" prot="public" static="no">
        <type><ref refid="structfaiss_1_1SearchParametersIVF" kindref="compound">SearchParametersIVF</ref></type>
        <definition>using faiss::IVFSearchParameters = typedef SearchParametersIVF</definition>
        <argsstring></argsstring>
        <name>IVFSearchParameters</name>
        <qualifiedname>faiss::IVFSearchParameters</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVF.h" line="82" column="1" bodyfile="faiss/IndexIVF.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1af3735e1903da947aaa2d79389d4ddfd0" prot="public" static="no">
        <type><ref refid="classfaiss_1_1IndexReplicasTemplate" kindref="compound">IndexReplicasTemplate</ref>&lt; <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>using faiss::IndexReplicas = typedef IndexReplicasTemplate&lt;Index&gt;</definition>
        <argsstring></argsstring>
        <name>IndexReplicas</name>
        <qualifiedname>faiss::IndexReplicas</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="85" column="1" bodyfile="faiss/IndexReplicas.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a08035b3de4260d681099add5203fc045" prot="public" static="no">
        <type><ref refid="classfaiss_1_1IndexReplicasTemplate" kindref="compound">IndexReplicasTemplate</ref>&lt; <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &gt;</type>
        <definition>using faiss::IndexBinaryReplicas = typedef IndexReplicasTemplate&lt;IndexBinary&gt;</definition>
        <argsstring></argsstring>
        <name>IndexBinaryReplicas</name>
        <qualifiedname>faiss::IndexBinaryReplicas</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="86" column="1" bodyfile="faiss/IndexReplicas.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1aa4027ffe4b83be8ed0ad09c287853d17" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexShardsTemplate" kindref="compound">IndexShardsTemplate</ref>&lt; <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>using faiss::IndexShards = typedef IndexShardsTemplate&lt;Index&gt;</definition>
        <argsstring></argsstring>
        <name>IndexShards</name>
        <qualifiedname>faiss::IndexShards</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="108" column="1" bodyfile="faiss/IndexShards.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a1e3dccddbd9b1cbe722804bbb9b2fa99" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexShardsTemplate" kindref="compound">IndexShardsTemplate</ref>&lt; <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &gt;</type>
        <definition>using faiss::IndexBinaryShards = typedef IndexShardsTemplate&lt;IndexBinary&gt;</definition>
        <argsstring></argsstring>
        <name>IndexBinaryShards</name>
        <qualifiedname>faiss::IndexBinaryShards</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="109" column="1" bodyfile="faiss/IndexShards.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a6e5511ff3f78bfcab1530a6f215846c6" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HStackInvertedLists" kindref="compound">HStackInvertedLists</ref></type>
        <definition>using faiss::ConcatenatedInvertedLists = typedef HStackInvertedLists</definition>
        <argsstring></argsstring>
        <name>ConcatenatedInvertedLists</name>
        <qualifiedname>faiss::ConcatenatedInvertedLists</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="329" column="1" bodyfile="faiss/invlists/InvertedLists.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" prot="public" static="no">
        <type>int64_t</type>
        <definition>using faiss::idx_t = typedef int64_t</definition>
        <argsstring></argsstring>
        <name>idx_t</name>
        <qualifiedname>faiss::idx_t</qualifiedname>
        <briefdescription>
<para>all vector indices are this type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/MetricType.h" line="46" column="1" bodyfile="faiss/MetricType.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1ae0c5f7d2638acf960a3b98e7fd8c1167" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">HeapArray</ref>&lt; <ref refid="structfaiss_1_1CMin" kindref="compound">CMin</ref>&lt; float, int64_t &gt; &gt;</type>
        <definition>typedef HeapArray&lt;CMin&lt;float, int64_t&gt; &gt; faiss::float_minheap_array_t</definition>
        <argsstring></argsstring>
        <name>float_minheap_array_t</name>
        <qualifiedname>faiss::float_minheap_array_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="553" column="19" bodyfile="faiss/utils/Heap.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a17c03ceef680b86f30abf40c359f0b6c" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">HeapArray</ref>&lt; <ref refid="structfaiss_1_1CMin" kindref="compound">CMin</ref>&lt; int, int64_t &gt; &gt;</type>
        <definition>typedef HeapArray&lt;CMin&lt;int, int64_t&gt; &gt; faiss::int_minheap_array_t</definition>
        <argsstring></argsstring>
        <name>int_minheap_array_t</name>
        <qualifiedname>faiss::int_minheap_array_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="554" column="19" bodyfile="faiss/utils/Heap.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a3d829413dc05d84f9564a4fa8d831456" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">HeapArray</ref>&lt; <ref refid="structfaiss_1_1CMax" kindref="compound">CMax</ref>&lt; float, int64_t &gt; &gt;</type>
        <definition>typedef HeapArray&lt;CMax&lt;float, int64_t&gt; &gt; faiss::float_maxheap_array_t</definition>
        <argsstring></argsstring>
        <name>float_maxheap_array_t</name>
        <qualifiedname>faiss::float_maxheap_array_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="556" column="19" bodyfile="faiss/utils/Heap.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a4bd3ab42c7aaf074f798553a68eacd52" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">HeapArray</ref>&lt; <ref refid="structfaiss_1_1CMax" kindref="compound">CMax</ref>&lt; int, int64_t &gt; &gt;</type>
        <definition>typedef HeapArray&lt;CMax&lt;int, int64_t&gt; &gt; faiss::int_maxheap_array_t</definition>
        <argsstring></argsstring>
        <name>int_maxheap_array_t</name>
        <qualifiedname>faiss::int_maxheap_array_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="557" column="19" bodyfile="faiss/utils/Heap.h" bodystart="557" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefaiss_1a2dcf7a9c4c343f31bc63a5db0c2bff2d" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1HNSWStats" kindref="compound">HNSWStats</ref></type>
        <definition>FAISS_API HNSWStats faiss::hnsw_stats</definition>
        <argsstring></argsstring>
        <name>hnsw_stats</name>
        <qualifiedname>faiss::hnsw_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/HNSW.h" line="257" column="28" declfile="faiss/impl/HNSW.h" declline="257" declcolumn="28"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1ad91730bea51315222b985f9aba4359b2" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::product_quantizer_compute_codes_bs</definition>
        <argsstring></argsstring>
        <name>product_quantizer_compute_codes_bs</name>
        <qualifiedname>faiss::product_quantizer_compute_codes_bs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ProductQuantizer.h" line="189" column="22" declfile="faiss/impl/ProductQuantizer.h" declline="189" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a5ba348773d3fc46e3ea6f668c70bade1" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::distance_compute_min_k_reservoir</definition>
        <argsstring></argsstring>
        <name>distance_compute_min_k_reservoir</name>
        <qualifiedname>faiss::distance_compute_min_k_reservoir</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResultHandler.h" line="624" column="22" bodyfile="faiss/utils/distances.h" bodystart="286" bodyend="-1" declfile="faiss/impl/ResultHandler.h" declline="624" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a8e2c4631a31c84b5debeab837ae25ca2" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API bool</type>
        <definition>FAISS_API bool faiss::simd_result_handlers_accept_virtual</definition>
        <argsstring></argsstring>
        <name>simd_result_handlers_accept_virtual</name>
        <qualifiedname>faiss::simd_result_handlers_accept_virtual</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/simd_result_handlers.h" line="97" column="23" declfile="faiss/impl/simd_result_handlers.h" declline="97" declcolumn="23"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1ae62bfad0b4bad9f738b7e8c5fe3d50b1" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::index2layer_sa_encode_bs</definition>
        <argsstring></argsstring>
        <name>index2layer_sa_encode_bs</name>
        <qualifiedname>faiss::index2layer_sa_encode_bs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index2Layer.h" line="74" column="22" declfile="faiss/Index2Layer.h" declline="74" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a4be4e1eb72f2c8a0b9e634b7a658514a" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::index_factory_verbose</definition>
        <argsstring></argsstring>
        <name>index_factory_verbose</name>
        <qualifiedname>faiss::index_factory_verbose</qualifiedname>
        <briefdescription>
<para>set to &gt; 0 to get more logs from index_factory </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_factory.h" line="26" column="22" declfile="faiss/index_factory.h" declline="26" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a1b8b979f26be5ebe9a037a5144fb796e" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_SKIP_STORAGE</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_SKIP_STORAGE</name>
        <qualifiedname>faiss::IO_FLAG_SKIP_STORAGE</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
<para>skip the storage for graph-based indexes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="34" column="11" bodyfile="faiss/index_io.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1aa75d478d14ec1ffd7b0718adf0dab26b" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_READ_ONLY</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_READ_ONLY</name>
        <qualifiedname>faiss::IO_FLAG_READ_ONLY</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="45" column="11" bodyfile="faiss/index_io.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a0afd2e723c83893be7aff1fa644d13b3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_ONDISK_SAME_DIR</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_ONDISK_SAME_DIR</name>
        <qualifiedname>faiss::IO_FLAG_ONDISK_SAME_DIR</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="48" column="11" bodyfile="faiss/index_io.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1af2f70735b00d2defcffa4c051830fd9f" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_SKIP_IVF_DATA</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_SKIP_IVF_DATA</name>
        <qualifiedname>faiss::IO_FLAG_SKIP_IVF_DATA</qualifiedname>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="50" column="11" bodyfile="faiss/index_io.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a1fd30db6a60c1619b8725165175aa8a9" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_SKIP_PRECOMPUTE_TABLE</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_SKIP_PRECOMPUTE_TABLE</name>
        <qualifiedname>faiss::IO_FLAG_SKIP_PRECOMPUTE_TABLE</qualifiedname>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="52" column="11" bodyfile="faiss/index_io.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a4a61769c1a4395238d6fd6d11e20b2e1" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_PQ_SKIP_SDC_TABLE</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_PQ_SKIP_SDC_TABLE</name>
        <qualifiedname>faiss::IO_FLAG_PQ_SKIP_SDC_TABLE</qualifiedname>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="58" column="11" bodyfile="faiss/index_io.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1aff97660fb0994bea32b9c4714e324fa0" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_MMAP</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_MMAP</name>
        <qualifiedname>faiss::IO_FLAG_MMAP</qualifiedname>
        <initializer>= IO_FLAG_SKIP_IVF_DATA | 0x646f0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="61" column="11" bodyfile="faiss/index_io.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1ad8bcb6b2cf7cd16a616ffbc6656a2ca4" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_MMAP_IFC</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_MMAP_IFC</name>
        <qualifiedname>faiss::IO_FLAG_MMAP_IFC</qualifiedname>
        <initializer>= 1 &lt;&lt; 9</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="65" column="11" bodyfile="faiss/index_io.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a308343dfd91ddc2dad5d62c9fa79a65e" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IndexBinaryHashStats" kindref="compound">IndexBinaryHashStats</ref></type>
        <definition>FAISS_API IndexBinaryHashStats faiss::indexBinaryHash_stats</definition>
        <argsstring></argsstring>
        <name>indexBinaryHash_stats</name>
        <qualifiedname>faiss::indexBinaryHash_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHash.h" line="80" column="39" declfile="faiss/IndexBinaryHash.h" declline="80" declcolumn="39"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a740c0ca147e528a2d7913acad0fc9bc3" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1FastScanStats" kindref="compound">FastScanStats</ref></type>
        <definition>FAISS_API FastScanStats faiss::FastScan_stats</definition>
        <argsstring></argsstring>
        <name>FastScan_stats</name>
        <qualifiedname>faiss::FastScan_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexFastScan.h" line="257" column="32" declfile="faiss/IndexFastScan.h" declline="257" declcolumn="32"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a747e07366b2a3240cfe2135396b44614" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API bool</type>
        <definition>FAISS_API bool faiss::check_compatible_for_merge_expensive_check</definition>
        <argsstring></argsstring>
        <name>check_compatible_for_merge_expensive_check</name>
        <qualifiedname>faiss::check_compatible_for_merge_expensive_check</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVF.h" line="550" column="23" declfile="faiss/IndexIVF.h" declline="550" declcolumn="23"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a28374b20fb3fd40e3abc21c78135c3a7" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IndexIVFStats" kindref="compound">IndexIVFStats</ref></type>
        <definition>FAISS_API IndexIVFStats faiss::indexIVF_stats</definition>
        <argsstring></argsstring>
        <name>indexIVF_stats</name>
        <qualifiedname>faiss::indexIVF_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVF.h" line="568" column="32" declfile="faiss/IndexIVF.h" declline="568" declcolumn="32"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a3aebb977a33e268e5eddf7ad361598f9" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IVFFastScanStats" kindref="compound">IVFFastScanStats</ref></type>
        <definition>FAISS_API IVFFastScanStats faiss::IVFFastScan_stats</definition>
        <argsstring></argsstring>
        <name>IVFFastScan_stats</name>
        <qualifiedname>faiss::IVFFastScan_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFFastScan.h" line="427" column="35" declfile="faiss/IndexIVFFastScan.h" declline="427" declcolumn="35"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a4597bfef2dd25b76afe4a11f63aaf168" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API size_t</type>
        <definition>FAISS_API size_t faiss::precomputed_table_max_bytes</definition>
        <argsstring></argsstring>
        <name>precomputed_table_max_bytes</name>
        <qualifiedname>faiss::precomputed_table_max_bytes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFPQ.h" line="29" column="25" declfile="faiss/IndexIVFPQ.h" declline="29" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a94cbf20c186c51b00f98ae77a45ba56f" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::index_ivfpq_add_core_o_bs</definition>
        <argsstring></argsstring>
        <name>index_ivfpq_add_core_o_bs</name>
        <qualifiedname>faiss::index_ivfpq_add_core_o_bs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFPQ.h" line="154" column="22" declfile="faiss/IndexIVFPQ.h" declline="154" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1ae040bf76054f16979b15559f8ffc5727" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IndexIVFPQStats" kindref="compound">IndexIVFPQStats</ref></type>
        <definition>FAISS_API IndexIVFPQStats faiss::indexIVFPQ_stats</definition>
        <argsstring></argsstring>
        <name>indexIVFPQ_stats</name>
        <qualifiedname>faiss::indexIVFPQ_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFPQ.h" line="194" column="34" declfile="faiss/IndexIVFPQ.h" declline="194" declcolumn="34"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a386cc28ead8e63ddabac9f1f9be8ff7e" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IndexPQStats" kindref="compound">IndexPQStats</ref></type>
        <definition>FAISS_API IndexPQStats faiss::indexPQ_stats</definition>
        <argsstring></argsstring>
        <name>indexPQ_stats</name>
        <qualifiedname>faiss::indexPQ_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexPQ.h" line="132" column="31" declfile="faiss/IndexPQ.h" declline="132" declcolumn="31"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a6c123717e777aef466043cae98fe8fd9" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::multi_index_quantizer_search_bs</definition>
        <argsstring></argsstring>
        <name>multi_index_quantizer_search_bs</name>
        <qualifiedname>faiss::multi_index_quantizer_search_bs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexPQ.h" line="165" column="22" declfile="faiss/IndexPQ.h" declline="165" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1aba7a634cdecea2a884b1cb7ee50cb4f3" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::rowwise_minmax_sa_encode_bs</definition>
        <argsstring></argsstring>
        <name>rowwise_minmax_sa_encode_bs</name>
        <qualifiedname>faiss::rowwise_minmax_sa_encode_bs</qualifiedname>
        <briefdescription>
<para>block size for performing sa_encode and sa_decode </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexRowwiseMinMax.h" line="96" column="22" declfile="faiss/IndexRowwiseMinMax.h" declline="96" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a437d8466031f88222a50f88e88a7f931" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::rowwise_minmax_sa_decode_bs</definition>
        <argsstring></argsstring>
        <name>rowwise_minmax_sa_decode_bs</name>
        <qualifiedname>faiss::rowwise_minmax_sa_decode_bs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexRowwiseMinMax.h" line="97" column="22" declfile="faiss/IndexRowwiseMinMax.h" declline="97" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a9875918581ad243ce5483a090c9da918" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::distance_compute_blas_threshold</definition>
        <argsstring></argsstring>
        <name>distance_compute_blas_threshold</name>
        <qualifiedname>faiss::distance_compute_blas_threshold</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="278" column="22" declfile="faiss/utils/distances.h" declline="278" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a70eb5be4a6af3b9d948bcb8f949a4e9f" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::distance_compute_blas_query_bs</definition>
        <argsstring></argsstring>
        <name>distance_compute_blas_query_bs</name>
        <qualifiedname>faiss::distance_compute_blas_query_bs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="281" column="22" declfile="faiss/utils/distances.h" declline="281" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1acbd29d880c5aeaf1caf6266483253953" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::distance_compute_blas_database_bs</definition>
        <argsstring></argsstring>
        <name>distance_compute_blas_database_bs</name>
        <qualifiedname>faiss::distance_compute_blas_database_bs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="282" column="22" declfile="faiss/utils/distances.h" declline="282" declcolumn="22"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a1c1a7ffff3e34768b027b77d0d9f96df" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API size_t</type>
        <definition>FAISS_API size_t faiss::hamming_batch_size</definition>
        <argsstring></argsstring>
        <name>hamming_batch_size</name>
        <qualifiedname>faiss::hamming_batch_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="104" column="25" declfile="faiss/utils/hamming.h" declline="104" declcolumn="25"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a807d8fdc887adb34ff028c3ccaeb1fe1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t faiss::hamdis_tab_ham_bytes[256]</definition>
        <argsstring>[256]</argsstring>
        <name>hamdis_tab_ham_bytes</name>
        <qualifiedname>faiss::hamdis_tab_ham_bytes</qualifiedname>
        <initializer>= {
        0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4,
        2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4,
        2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6,
        4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5,
        3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
        2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6,
        4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,
        4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/common.h" line="34" column="26" bodyfile="faiss/utils/hamming_distance/common.h" bodystart="34" bodyend="45"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1ae2bb09d8026f83d03936dcddee878a04" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1PartitionStats" kindref="compound">PartitionStats</ref></type>
        <definition>FAISS_API PartitionStats faiss::partition_stats</definition>
        <argsstring></argsstring>
        <name>partition_stats</name>
        <qualifiedname>faiss::partition_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="72" column="33" declfile="faiss/utils/partitioning.h" declline="72" declcolumn="33"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a68d671ff6d57b17f9fbf3c65607fbcff" prot="public" static="no" extern="yes" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::bucket_sort_verbose</definition>
        <argsstring></argsstring>
        <name>bucket_sort_verbose</name>
        <qualifiedname>faiss::bucket_sort_verbose</qualifiedname>
        <briefdescription>
<para>increase verbosity of the bucket_sort functions </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="27" column="22" declfile="faiss/utils/sorting.h" declline="27" declcolumn="22"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacefaiss_1a46e8be8ec7d466eaa8994a8e20133815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index * faiss::clone_index</definition>
        <argsstring>(const Index *)</argsstring>
        <name>clone_index</name>
        <qualifiedname>faiss::clone_index</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/clone_index.h" line="23" column="7" declfile="faiss/clone_index.h" declline="23" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1571ebcedcb10e42fb50c7a551aae653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Quantizer" kindref="compound">Quantizer</ref> *</type>
        <definition>Quantizer * faiss::clone_Quantizer</definition>
        <argsstring>(const Quantizer *quant)</argsstring>
        <name>clone_Quantizer</name>
        <qualifiedname>faiss::clone_Quantizer</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Quantizer" kindref="compound">Quantizer</ref> *</type>
          <declname>quant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/clone_index.h" line="35" column="11" declfile="faiss/clone_index.h" declline="35" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a66b58d84e4c4619505d61401d339f6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary * faiss::clone_binary_index</definition>
        <argsstring>(const IndexBinary *index)</argsstring>
        <name>clone_binary_index</name>
        <qualifiedname>faiss::clone_binary_index</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/clone_index.h" line="37" column="13" declfile="faiss/clone_index.h" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a38bd0dde8a1b229201a5fcb64d05daa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::kmeans_clustering</definition>
        <argsstring>(size_t d, size_t n, size_t k, const float *x, float *centroids)</argsstring>
        <name>kmeans_clustering</name>
        <qualifiedname>faiss::kmeans_clustering</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>simplified interface</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of training vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of output centroids </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>training set (size n * d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centroids</parametername>
</parameternamelist>
<parameterdescription>
<para>output centroids (size k * d) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>final quantization error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Clustering.h" line="204" column="7" declfile="faiss/Clustering.h" declline="204" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab75a481411f1b880ec2f41c8685682c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::reverse_index_factory</definition>
        <argsstring>(const faiss::Index *index)</argsstring>
        <name>reverse_index_factory</name>
        <qualifiedname>faiss::reverse_index_factory</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/cppcontrib/factory_tools.h" line="19" column="13" declfile="faiss/cppcontrib/factory_tools.h" declline="19" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab296cc828e119931af0b6bb2daf3ebfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::reverse_index_factory</definition>
        <argsstring>(const faiss::IndexBinary *index)</argsstring>
        <name>reverse_index_factory</name>
        <qualifiedname>faiss::reverse_index_factory</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">faiss::IndexBinary</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/cppcontrib/factory_tools.h" line="20" column="13" declfile="faiss/cppcontrib/factory_tools.h" declline="20" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9ea277840d6448e42b304287257de0b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PQDecoderT</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float faiss::distance_single_code_generic</definition>
        <argsstring>(const size_t M, const size_t nbits, const float *sim_table, const uint8_t *code)</argsstring>
        <name>distance_single_code_generic</name>
        <qualifiedname>faiss::distance_single_code_generic</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sim_table</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Returns the distance to a single code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/code_distance/code_distance-generic.h" line="17" column="14" bodyfile="faiss/impl/code_distance/code_distance-generic.h" bodystart="17" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a92b46f26c1c9dcf1da18dbb84ccdd26a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PQDecoderT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::distance_four_codes_generic</definition>
        <argsstring>(const size_t M, const size_t nbits, const float *sim_table, const uint8_t *__restrict code0, const uint8_t *__restrict code1, const uint8_t *__restrict code2, const uint8_t *__restrict code3, float &amp;result0, float &amp;result1, float &amp;result2, float &amp;result3)</argsstring>
        <name>distance_four_codes_generic</name>
        <qualifiedname>faiss::distance_four_codes_generic</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sim_table</declname>
        </param>
        <param>
          <type>const uint8_t *__restrict</type>
          <declname>code0</declname>
        </param>
        <param>
          <type>const uint8_t *__restrict</type>
          <declname>code1</declname>
        </param>
        <param>
          <type>const uint8_t *__restrict</type>
          <declname>code2</declname>
        </param>
        <param>
          <type>const uint8_t *__restrict</type>
          <declname>code3</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>result0</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>result1</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>result2</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>result3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Combines 4 operations of distance_single_code() General-purpose version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/code_distance/code_distance-generic.h" line="43" column="13" bodyfile="faiss/impl/code_distance/code_distance-generic.h" bodystart="43" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4f5a40d297ddf6822a9262a333f938a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PQDecoderT</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float faiss::distance_single_code</definition>
        <argsstring>(const size_t M, const size_t nbits, const float *sim_table, const uint8_t *code)</argsstring>
        <name>distance_single_code</name>
        <qualifiedname>faiss::distance_single_code</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sim_table</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/code_distance/code_distance.h" line="140" column="14" bodyfile="faiss/impl/code_distance/code_distance.h" bodystart="140" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7912d9fa6a0a7ab8356eef44ecab64c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PQDecoderT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::distance_four_codes</definition>
        <argsstring>(const size_t M, const size_t nbits, const float *sim_table, const uint8_t *__restrict code0, const uint8_t *__restrict code1, const uint8_t *__restrict code2, const uint8_t *__restrict code3, float &amp;result0, float &amp;result1, float &amp;result2, float &amp;result3)</argsstring>
        <name>distance_four_codes</name>
        <qualifiedname>faiss::distance_four_codes</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>sim_table</declname>
        </param>
        <param>
          <type>const uint8_t *__restrict</type>
          <declname>code0</declname>
        </param>
        <param>
          <type>const uint8_t *__restrict</type>
          <declname>code1</declname>
        </param>
        <param>
          <type>const uint8_t *__restrict</type>
          <declname>code2</declname>
        </param>
        <param>
          <type>const uint8_t *__restrict</type>
          <declname>code3</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>result0</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>result1</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>result2</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>result3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/code_distance/code_distance.h" line="153" column="13" bodyfile="faiss/impl/code_distance/code_distance.h" bodystart="153" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad9737fc7ae37894085c9816a924cce3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::handleExceptions</definition>
        <argsstring>(std::vector&lt; std::pair&lt; int, std::exception_ptr &gt; &gt; &amp;exceptions)</argsstring>
        <name>handleExceptions</name>
        <qualifiedname>faiss::handleExceptions</qualifiedname>
        <param>
          <type>std::vector&lt; std::pair&lt; int, std::exception_ptr &gt; &gt; &amp;</type>
          <declname>exceptions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle multiple exceptions from worker threads, throwing an appropriate exception that aggregates the information The pair int is the thread that generated the exception </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/FaissException.h" line="40" column="6" declfile="faiss/impl/FaissException.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0dbf4403e68d46d45d8432b99657ffd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::demangle_cpp_symbol</definition>
        <argsstring>(const char *name)</argsstring>
        <name>demangle_cpp_symbol</name>
        <qualifiedname>faiss::demangle_cpp_symbol</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>make typeids more readable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/FaissException.h" line="61" column="13" declfile="faiss/impl/FaissException.h" declline="61" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0d5c378cec0f199ee147ee8c6acf5d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::search_from_candidates</definition>
        <argsstring>(const HNSW &amp;hnsw, DistanceComputer &amp;qdis, ResultHandler&lt; HNSW::C &gt; &amp;res, HNSW::MinimaxHeap &amp;candidates, VisitedTable &amp;vt, HNSWStats &amp;stats, int level, int nres_in=0, const SearchParameters *params=nullptr)</argsstring>
        <name>search_from_candidates</name>
        <qualifiedname>faiss::search_from_candidates</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1HNSW" kindref="compound">HNSW</ref> &amp;</type>
          <declname>hnsw</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1DistanceComputer" kindref="compound">DistanceComputer</ref> &amp;</type>
          <declname>qdis</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1ResultHandler" kindref="compound">ResultHandler</ref>&lt; <ref refid="structfaiss_1_1CMax" kindref="compound">HNSW::C</ref> &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HNSW_1_1MinimaxHeap" kindref="compound">HNSW::MinimaxHeap</ref> &amp;</type>
          <declname>candidates</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1VisitedTable" kindref="compound">VisitedTable</ref> &amp;</type>
          <declname>vt</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HNSWStats" kindref="compound">HNSWStats</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nres_in</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/HNSW.h" line="259" column="5" declfile="faiss/impl/HNSW.h" declline="259" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad5378e0f1958868c1170b8552b44fc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1HNSWStats" kindref="compound">HNSWStats</ref></type>
        <definition>HNSWStats faiss::greedy_update_nearest</definition>
        <argsstring>(const HNSW &amp;hnsw, DistanceComputer &amp;qdis, int level, HNSW::storage_idx_t &amp;nearest, float &amp;d_nearest)</argsstring>
        <name>greedy_update_nearest</name>
        <qualifiedname>faiss::greedy_update_nearest</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1HNSW" kindref="compound">HNSW</ref> &amp;</type>
          <declname>hnsw</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1DistanceComputer" kindref="compound">DistanceComputer</ref> &amp;</type>
          <declname>qdis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HNSW_1a382cd6d2641ad241e804c1fa4d2b03c6" kindref="member">HNSW::storage_idx_t</ref> &amp;</type>
          <declname>nearest</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>d_nearest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/HNSW.h" line="270" column="11" declfile="faiss/impl/HNSW.h" declline="270" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7fcc71c4eb814ea582ad9ffb0c909d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::priority_queue&lt; HNSW::Node &gt;</type>
        <definition>std::priority_queue&lt; HNSW::Node &gt; faiss::search_from_candidate_unbounded</definition>
        <argsstring>(const HNSW &amp;hnsw, const HNSW::Node &amp;node, DistanceComputer &amp;qdis, int ef, VisitedTable *vt, HNSWStats &amp;stats)</argsstring>
        <name>search_from_candidate_unbounded</name>
        <qualifiedname>faiss::search_from_candidate_unbounded</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1HNSW" kindref="compound">HNSW</ref> &amp;</type>
          <declname>hnsw</declname>
        </param>
        <param>
          <type>const HNSW::Node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1DistanceComputer" kindref="compound">DistanceComputer</ref> &amp;</type>
          <declname>qdis</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ef</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1VisitedTable" kindref="compound">VisitedTable</ref> *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HNSWStats" kindref="compound">HNSWStats</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/HNSW.h" line="277" column="21" declfile="faiss/impl/HNSW.h" declline="277" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad97c6c4a248bc0ac4399e4f0eea2ff99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::search_neighbors_to_add</definition>
        <argsstring>(HNSW &amp;hnsw, DistanceComputer &amp;qdis, std::priority_queue&lt; HNSW::NodeDistCloser &gt; &amp;results, int entry_point, float d_entry_point, int level, VisitedTable &amp;vt, bool reference_version=false)</argsstring>
        <name>search_neighbors_to_add</name>
        <qualifiedname>faiss::search_neighbors_to_add</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1HNSW" kindref="compound">HNSW</ref> &amp;</type>
          <declname>hnsw</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1DistanceComputer" kindref="compound">DistanceComputer</ref> &amp;</type>
          <declname>qdis</declname>
        </param>
        <param>
          <type>std::priority_queue&lt; <ref refid="structfaiss_1_1HNSW_1_1NodeDistCloser" kindref="compound">HNSW::NodeDistCloser</ref> &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>int</type>
          <declname>entry_point</declname>
        </param>
        <param>
          <type>float</type>
          <declname>d_entry_point</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1VisitedTable" kindref="compound">VisitedTable</ref> &amp;</type>
          <declname>vt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reference_version</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/HNSW.h" line="285" column="6" declfile="faiss/impl/HNSW.h" declline="285" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a33f83fe5af91626556b1ccde1f3cafcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::read_index_header</definition>
        <argsstring>(Index *idx, IOReader *f)</argsstring>
        <name>read_index_header</name>
        <qualifiedname>faiss::read_index_header</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/index_read_utils.h" line="22" column="6" declfile="faiss/impl/index_read_utils.h" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a97af3c36835c195254ba0312b0f78140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::read_direct_map</definition>
        <argsstring>(DirectMap *dm, IOReader *f)</argsstring>
        <name>read_direct_map</name>
        <qualifiedname>faiss::read_direct_map</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1DirectMap" kindref="compound">DirectMap</ref> *</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/index_read_utils.h" line="23" column="6" declfile="faiss/impl/index_read_utils.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ae748c5ec07a45d0f8d861e231ef67986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::read_ivf_header</definition>
        <argsstring>(IndexIVF *ivf, IOReader *f, std::vector&lt; std::vector&lt; idx_t &gt; &gt; *ids=nullptr)</argsstring>
        <name>read_ivf_header</name>
        <qualifiedname>faiss::read_ivf_header</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> *</type>
          <declname>ivf</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> &gt; &gt; *</type>
          <declname>ids</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/index_read_utils.h" line="24" column="6" declfile="faiss/impl/index_read_utils.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1acf993db387d508bb9e1d517d612138d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::read_InvertedLists</definition>
        <argsstring>(IndexIVF *ivf, IOReader *f, int io_flags)</argsstring>
        <name>read_InvertedLists</name>
        <qualifiedname>faiss::read_InvertedLists</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> *</type>
          <declname>ivf</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/index_read_utils.h" line="28" column="6" declfile="faiss/impl/index_read_utils.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a13ad4a989f3e8f7e7e87f1ac34b87f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1ArrayInvertedLists" kindref="compound">ArrayInvertedLists</ref> *</type>
        <definition>ArrayInvertedLists * faiss::set_array_invlist</definition>
        <argsstring>(IndexIVF *ivf, std::vector&lt; std::vector&lt; idx_t &gt; &gt; &amp;ids)</argsstring>
        <name>set_array_invlist</name>
        <qualifiedname>faiss::set_array_invlist</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref> *</type>
          <declname>ivf</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> &gt; &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/index_read_utils.h" line="29" column="20" declfile="faiss/impl/index_read_utils.h" declline="29" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4eae12c70887bff34241a726efb9ff02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::read_ProductQuantizer</definition>
        <argsstring>(ProductQuantizer *pq, IOReader *f)</argsstring>
        <name>read_ProductQuantizer</name>
        <qualifiedname>faiss::read_ProductQuantizer</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref> *</type>
          <declname>pq</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/index_read_utils.h" line="32" column="6" declfile="faiss/impl/index_read_utils.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a39ebc7cee79b9534f7a5d6d622ed0250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::read_ScalarQuantizer</definition>
        <argsstring>(ScalarQuantizer *ivsc, IOReader *f)</argsstring>
        <name>read_ScalarQuantizer</name>
        <qualifiedname>faiss::read_ScalarQuantizer</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1ScalarQuantizer" kindref="compound">ScalarQuantizer</ref> *</type>
          <declname>ivsc</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/index_read_utils.h" line="33" column="6" declfile="faiss/impl/index_read_utils.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abf86b394ccff3a1d3d5e4b848740059c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::fourcc</definition>
        <argsstring>(const char sx[4])</argsstring>
        <name>fourcc</name>
        <qualifiedname>faiss::fourcc</qualifiedname>
        <param>
          <type>const char</type>
          <declname>sx</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>cast a 4-character string to a uint32_t that can be written and read easily </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/io.h" line="137" column="10" declfile="faiss/impl/io.h" declline="137" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa4aee5942eb92dbce17469f4bdd2e0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::fourcc</definition>
        <argsstring>(const std::string &amp;sx)</argsstring>
        <name>fourcc</name>
        <qualifiedname>faiss::fourcc</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>sx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/io.h" line="138" column="10" declfile="faiss/impl/io.h" declline="138" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa2a1c19599e8fc0b8a3025d3386637b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fourcc_inv</definition>
        <argsstring>(uint32_t x, char str[5])</argsstring>
        <name>fourcc_inv</name>
        <qualifiedname>faiss::fourcc_inv</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>char</type>
          <declname>str</declname>
          <array>[5]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/io.h" line="141" column="6" declfile="faiss/impl/io.h" declline="141" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a69918e43b65345fc718a09e689b472b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::fourcc_inv</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>fourcc_inv</name>
        <qualifiedname>faiss::fourcc_inv</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/io.h" line="142" column="13" declfile="faiss/impl/io.h" declline="142" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6c6a3be441dd00c6c837d7547b1df4e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::fourcc_inv_printable</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>fourcc_inv_printable</name>
        <qualifiedname>faiss::fourcc_inv_printable</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/io.h" line="143" column="13" declfile="faiss/impl/io.h" declline="143" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a11ce544f3b395e398be8f6d83ea6cddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::smawk</definition>
        <argsstring>(const idx_t nrows, const idx_t ncols, const float *x, idx_t *argmins)</argsstring>
        <name>smawk</name>
        <qualifiedname>faiss::smawk</qualifiedname>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>nrows</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>ncols</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>argmins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SMAWK algorithm. Find the row minima of a monotone matrix.</para>
<para>Expose this for testing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nrows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix, size (nrows, ncols) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argmins</parametername>
</parameternamelist>
<parameterdescription>
<para>argmin of each row </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/kmeans1d.h" line="24" column="6" declfile="faiss/impl/kmeans1d.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a613c867df3afeba8421d7ca1200e7529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double faiss::kmeans1d</definition>
        <argsstring>(const float *x, size_t n, size_t nclusters, float *centroids)</argsstring>
        <name>kmeans1d</name>
        <qualifiedname>faiss::kmeans1d</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nclusters</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Exact 1D K-Means by dynamic programming</para>
<para>From &quot;Fast Exact k-Means, k-Medians and Bregman Divergence Clustering in 1D&quot; Allan Grønlund, Kasper Green Larsen, Alexander Mathiasen, Jesper Sindahl Nielsen, Stefan Schneider, Mingzhou Song, ArXiV&apos;17</para>
<para>Section 2.2</para>
<para><ulink url="https://arxiv.org/abs/1701.07204">https://arxiv.org/abs/1701.07204</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input 1D array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>input array length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nclusters</parametername>
</parameternamelist>
<parameterdescription>
<para>number of clusters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centroids</parametername>
</parameternamelist>
<parameterdescription>
<para>output centroids, size nclusters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>imbalancce factor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/kmeans1d.h" line="46" column="8" declfile="faiss/impl/kmeans1d.h" declline="46" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ae753c3918c4698ce7ad1eacb25b9c574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool faiss::operator==</definition>
        <argsstring>(const MaybeOwnedVector&lt; T &gt; &amp;lhs, const MaybeOwnedVector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>faiss::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1MaybeOwnedVector" kindref="compound">MaybeOwnedVector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1MaybeOwnedVector" kindref="compound">MaybeOwnedVector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/maybe_owned_vector.h" line="309" column="6" bodyfile="faiss/impl/maybe_owned_vector.h" bodystart="309" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a19490ca11481c398d216a3e808386497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool faiss::operator!=</definition>
        <argsstring>(const MaybeOwnedVector&lt; T &gt; &amp;lhs, const MaybeOwnedVector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>faiss::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1MaybeOwnedVector" kindref="compound">MaybeOwnedVector</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1MaybeOwnedVector" kindref="compound">MaybeOwnedVector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/maybe_owned_vector.h" line="317" column="6" bodyfile="faiss/impl/maybe_owned_vector.h" bodystart="317" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aab1f6406891713b08ba8d132ce580df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pq4_pack_codes</definition>
        <argsstring>(const uint8_t *codes, size_t ntotal, size_t M, size_t nb, size_t bbs, size_t nsq, uint8_t *blocks, size_t code_stride=0)</argsstring>
        <name>pq4_pack_codes</name>
        <qualifiedname>faiss::pq4_pack_codes</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ntotal</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>code_stride</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pack codes for consumption by the SIMD kernels. The unused bytes are set to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>input codes, size (ntotal, ceil(M / 2)) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ntotal</parametername>
</parameternamelist>
<parameterdescription>
<para>number of input codes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>output number of codes (ntotal rounded up to a multiple of bbs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of sub-quantizers (=M rounded up to a muliple of 2) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbs</parametername>
</parameternamelist>
<parameterdescription>
<para>size of database blocks (multiple of 32) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>output array, size nb * nsq / 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>optional stride between consecutive codes (0 = use default (M + 1) / 2) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="43" column="6" declfile="faiss/impl/pq4_fast_scan.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9d620ede35bd6cfb0a9fd8f4cfafb481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pq4_pack_codes_range</definition>
        <argsstring>(const uint8_t *codes, size_t M, size_t i0, size_t i1, size_t bbs, size_t nsq, uint8_t *blocks, size_t code_stride=0)</argsstring>
        <name>pq4_pack_codes_range</name>
        <qualifiedname>faiss::pq4_pack_codes_range</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i0</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>code_stride</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as pack_codes but write in a given range of the output, leaving the rest untouched. Assumes allocated entries are 0 on input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>input codes, size (i1 - i0, ceil(M / 2)) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>first output code to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>last output code to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>output array, size at least ceil(i1 / bbs) * bbs * nsq / 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>optional stride between consecutive codes (0 = use default (M + 1) / 2) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="63" column="6" declfile="faiss/impl/pq4_fast_scan.h" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a030a643c5acf7feab3bf43c97bb85eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t faiss::pq4_get_packed_element</definition>
        <argsstring>(const uint8_t *data, size_t bbs, size_t nsq, size_t vector_id, size_t sq)</argsstring>
        <name>pq4_get_packed_element</name>
        <qualifiedname>faiss::pq4_get_packed_element</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>vector_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get a single element from a packed codes table</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_id</parametername>
</parameternamelist>
<parameterdescription>
<para>vector id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sq</parametername>
</parameternamelist>
<parameterdescription>
<para>subquantizer (&lt; nsq) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="78" column="9" declfile="faiss/impl/pq4_fast_scan.h" declline="78" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a3fe17a120021581f6ee6db2216fc97d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pq4_set_packed_element</definition>
        <argsstring>(uint8_t *data, uint8_t code, size_t bbs, size_t nsq, size_t vector_id, size_t sq)</argsstring>
        <name>pq4_set_packed_element</name>
        <qualifiedname>faiss::pq4_set_packed_element</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>vector_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set a single element &quot;code&quot; into a packed codes table</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector_id</parametername>
</parameternamelist>
<parameterdescription>
<para>vector id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sq</parametername>
</parameternamelist>
<parameterdescription>
<para>subquantizer (&lt; nsq) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="90" column="6" declfile="faiss/impl/pq4_fast_scan.h" declline="90" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a77259a553814de1ac5bee2d3efd03ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pq4_pack_LUT</definition>
        <argsstring>(int nq, int nsq, const uint8_t *src, uint8_t *dest)</argsstring>
        <name>pq4_pack_LUT</name>
        <qualifiedname>faiss::pq4_pack_LUT</qualifiedname>
        <param>
          <type>int</type>
          <declname>nq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pack Look-up table for consumption by the kernel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of queries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of sub-quantizers (muliple of 2) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>input array, size (nq, 16) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>output array, size (nq, 16) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="117" column="6" declfile="faiss/impl/pq4_fast_scan.h" declline="117" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa5a48a8a2f624a62fbe95e108f99b4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pq4_accumulate_loop</definition>
        <argsstring>(int nq, size_t nb, int bbs, int nsq, const uint8_t *codes, const uint8_t *LUT, SIMDResultHandler &amp;res, const NormTableScaler *scaler)</argsstring>
        <name>pq4_accumulate_loop</name>
        <qualifiedname>faiss::pq4_accumulate_loop</qualifiedname>
        <param>
          <type>int</type>
          <declname>nq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bbs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>LUT</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1SIMDResultHandler" kindref="compound">SIMDResultHandler</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1NormTableScaler" kindref="compound">NormTableScaler</ref> *</type>
          <declname>scaler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loop over database elements and accumulate results into result handler</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of queries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>number of database elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbs</parametername>
</parameternamelist>
<parameterdescription>
<para>size of database blocks (multiple of 32) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of sub-quantizers (muliple of 2) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>packed codes array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LUT</parametername>
</parameternamelist>
<parameterdescription>
<para>packed look-up table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaler</parametername>
</parameternamelist>
<parameterdescription>
<para>scaler to scale the encoded norm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="129" column="6" declfile="faiss/impl/pq4_fast_scan.h" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a323a06b2cc33d2afa49cd54690134ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::pq4_qbs_to_nq</definition>
        <argsstring>(int qbs)</argsstring>
        <name>pq4_qbs_to_nq</name>
        <qualifiedname>faiss::pq4_qbs_to_nq</qualifiedname>
        <param>
          <type>int</type>
          <declname>qbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="154" column="5" declfile="faiss/impl/pq4_fast_scan.h" declline="154" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a28b71d8d424de21d8d28edca5cb1119f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::pq4_preferred_qbs</definition>
        <argsstring>(int nq)</argsstring>
        <name>pq4_preferred_qbs</name>
        <qualifiedname>faiss::pq4_preferred_qbs</qualifiedname>
        <param>
          <type>int</type>
          <declname>nq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the preferred decomposition in blocks for a nb of queries. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="157" column="5" declfile="faiss/impl/pq4_fast_scan.h" declline="157" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a50696f89c63ede620d3562a38086c0dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::pq4_pack_LUT_qbs</definition>
        <argsstring>(int fqbs, int nsq, const uint8_t *src, uint8_t *dest)</argsstring>
        <name>pq4_pack_LUT_qbs</name>
        <qualifiedname>faiss::pq4_pack_LUT_qbs</qualifiedname>
        <param>
          <type>int</type>
          <declname>fqbs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pack Look-up table for consumption by the kernel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>qbs</parametername>
</parameternamelist>
<parameterdescription>
<para>4-bit encoded number of query blocks, the total number of queries handled (nq) is deduced from it </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of sub-quantizers (muliple of 2) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>input array, size (nq, 16) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>output array, size (nq, 16) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nq </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="168" column="5" declfile="faiss/impl/pq4_fast_scan.h" declline="168" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a959074948601ffbed84e437dc8078b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::pq4_pack_LUT_qbs_q_map</definition>
        <argsstring>(int qbs, int nsq, const uint8_t *src, const int *q_map, uint8_t *dest)</argsstring>
        <name>pq4_pack_LUT_qbs_q_map</name>
        <qualifiedname>faiss::pq4_pack_LUT_qbs_q_map</qualifiedname>
        <param>
          <type>int</type>
          <declname>qbs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>q_map</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as pq4_pack_LUT_qbs, except the source vectors are remapped with q_map </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="172" column="5" declfile="faiss/impl/pq4_fast_scan.h" declline="172" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a165b6bf7891e03bf165128e9190d1da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pq4_accumulate_loop_qbs</definition>
        <argsstring>(int qbs, size_t nb, int nsq, const uint8_t *codes, const uint8_t *LUT, SIMDResultHandler &amp;res, const NormTableScaler *scaler=nullptr)</argsstring>
        <name>pq4_accumulate_loop_qbs</name>
        <qualifiedname>faiss::pq4_accumulate_loop_qbs</qualifiedname>
        <param>
          <type>int</type>
          <declname>qbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>LUT</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1SIMDResultHandler" kindref="compound">SIMDResultHandler</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1NormTableScaler" kindref="compound">NormTableScaler</ref> *</type>
          <declname>scaler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run accumulation loop.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>qbs</parametername>
</parameternamelist>
<parameterdescription>
<para>4-bit encoded number of queries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>number of database codes (mutliple of bbs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of sub-quantizers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded database vectors (packed) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LUT</parametername>
</parameternamelist>
<parameterdescription>
<para>look-up table (packed) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>call-back for the resutls </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaler</parametername>
</parameternamelist>
<parameterdescription>
<para>scaler to scale the encoded norm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="189" column="6" declfile="faiss/impl/pq4_fast_scan.h" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4fa4f35222272afcb674e942f5648741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::accumulate_to_mem</definition>
        <argsstring>(int nq, size_t ntotal2, int nsq, const uint8_t *codes, const uint8_t *LUT, uint16_t *accu)</argsstring>
        <name>accumulate_to_mem</name>
        <qualifiedname>faiss::accumulate_to_mem</qualifiedname>
        <param>
          <type>int</type>
          <declname>nq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ntotal2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>LUT</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>accu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wrapper of pq4_accumulate_loop_qbs using simple StoreResultHandler and <ref refid="structfaiss_1_1DummyScaler" kindref="compound">DummyScaler</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of queries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ntotal2</parametername>
</parameternamelist>
<parameterdescription>
<para>number of database elements (multiple of 32) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nsq</parametername>
</parameternamelist>
<parameterdescription>
<para>number of sub-quantizers (muliple of 2) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>packed codes array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LUT</parametername>
</parameternamelist>
<parameterdescription>
<para>packed look-up table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>accu</parametername>
</parameternamelist>
<parameterdescription>
<para>array to store the results </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/pq4_fast_scan.h" line="208" column="6" declfile="faiss/impl/pq4_fast_scan.h" declline="208" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abd58cb9ccddf108229bd3f2d3f0d2bac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::beam_search_encode_step</definition>
        <argsstring>(size_t d, size_t K, const float *cent, size_t n, size_t beam_size, const float *residuals, size_t m, const int32_t *codes, size_t new_beam_size, int32_t *new_codes, float *new_residuals, float *new_distances, Index *assign_index=nullptr, ApproxTopK_mode_t approx_topk=ApproxTopK_mode_t::EXACT_TOPK)</argsstring>
        <name>beam_search_encode_step</name>
        <qualifiedname>faiss::beam_search_encode_step</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>K</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>cent</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>beam_size</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>residuals</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_beam_size</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>new_codes</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>new_residuals</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>new_distances</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>assign_index</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>ApproxTopK_mode_t</type>
          <declname>approx_topk</declname>
          <defval>ApproxTopK_mode_t::EXACT_TOPK</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encode a residual by sampling from a centroid table.</para>
<para>This is a single encoding step the residual quantizer. It allows low-level access to the encoding function, exposed mainly for unit tests.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors to handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>residuals</parametername>
</parameternamelist>
<parameterdescription>
<para>vectors to encode, size (n, beam_size, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cent</parametername>
</parameternamelist>
<parameterdescription>
<para>centroids, size (K, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beam_size</parametername>
</parameternamelist>
<parameterdescription>
<para>input beam size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the codes for the previous encoding steps </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>code array for the previous steps of the beam (n, beam_size, m) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_beam_size</parametername>
</parameternamelist>
<parameterdescription>
<para>output beam size (should be &lt;= K * beam_size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>output codes, size (n, new_beam_size, m + 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_residuals</parametername>
</parameternamelist>
<parameterdescription>
<para>output residuals, size (n, new_beam_size, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances, size (n, new_beam_size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>assign_index</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-NULL, will be used to perform assignment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/residual_quantizer_encode_steps.h" line="41" column="6" declfile="faiss/impl/residual_quantizer_encode_steps.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abbf2bb1faef7c8072b82a7db323397a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::beam_search_encode_step_tab</definition>
        <argsstring>(size_t K, size_t n, size_t beam_size, const float *codebook_cross_norms, size_t ldc, const uint64_t *codebook_offsets, const float *query_cp, size_t ldqc, const float *cent_norms_i, size_t m, const int32_t *codes, const float *distances, size_t new_beam_size, int32_t *new_codes, float *new_distances, ApproxTopK_mode_t approx_topk=ApproxTopK_mode_t::EXACT_TOPK)</argsstring>
        <name>beam_search_encode_step_tab</name>
        <qualifiedname>faiss::beam_search_encode_step_tab</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>K</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>beam_size</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>codebook_cross_norms</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ldc</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>codebook_offsets</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_cp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ldqc</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>cent_norms_i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_beam_size</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>new_codes</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>new_distances</declname>
        </param>
        <param>
          <type>ApproxTopK_mode_t</type>
          <declname>approx_topk</declname>
          <defval>ApproxTopK_mode_t::EXACT_TOPK</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encode a set of vectors using their dot products with the codebooks</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors in the codebook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of vectors to encode </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beam_size</parametername>
</parameternamelist>
<parameterdescription>
<para>input beam size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codebook_cross_norms</parametername>
</parameternamelist>
<parameterdescription>
<para>inner product of this codebook with the m previously encoded codebooks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codebook_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>offsets into codebook_cross_norms for each previous codebook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query_cp</parametername>
</parameternamelist>
<parameterdescription>
<para>dot products of query vectors with ??? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cent_norms_i</parametername>
</parameternamelist>
<parameterdescription>
<para>norms of centroids </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/residual_quantizer_encode_steps.h" line="69" column="6" declfile="faiss/impl/residual_quantizer_encode_steps.h" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ae298d588e823c407f64b5a0aab4c9148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Consumer</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>Consumer::T</type>
        <definition>Consumer::T faiss::dispatch_knn_ResultHandler</definition>
        <argsstring>(size_t nx, float *vals, int64_t *ids, size_t k, MetricType metric, const IDSelector *sel, Consumer &amp;consumer, Types... args)</argsstring>
        <name>dispatch_knn_ResultHandler</name>
        <qualifiedname>faiss::dispatch_knn_ResultHandler</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>metric</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> *</type>
          <declname>sel</declname>
        </param>
        <param>
          <type>Consumer &amp;</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>Types...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResultHandler.h" line="627" column="22" bodyfile="faiss/impl/ResultHandler.h" bodystart="627" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a61318d8d9c7759e9de47a97bfba9b318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Consumer</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>Consumer::T</type>
        <definition>Consumer::T faiss::dispatch_range_ResultHandler</definition>
        <argsstring>(RangeSearchResult *res, float radius, MetricType metric, const IDSelector *sel, Consumer &amp;consumer, Types... args)</argsstring>
        <name>dispatch_range_ResultHandler</name>
        <qualifiedname>faiss::dispatch_range_ResultHandler</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>metric</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> *</type>
          <declname>sel</declname>
        </param>
        <param>
          <type>Consumer &amp;</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>Types...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResultHandler.h" line="667" column="22" bodyfile="faiss/impl/ResultHandler.h" bodystart="667" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4f255b2339b7fb86093b14e279b27fe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::get_numeric_type_size</definition>
        <argsstring>(NumericType numeric_type)</argsstring>
        <name>get_numeric_type_size</name>
        <qualifiedname>faiss::get_numeric_type_size</qualifiedname>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="66" column="15" bodyfile="faiss/Index.h" bodystart="66" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a022125ed76333d0954255b73d5521bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index * faiss::index_factory</definition>
        <argsstring>(int d, const char *description, MetricType metric=METRIC_L2, bool own_invlists=true)</argsstring>
        <name>index_factory</name>
        <qualifiedname>faiss::index_factory</qualifiedname>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>metric</declname>
          <defval><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752cace9aa175fe11f346aa0a70df58977ff1" kindref="member">METRIC_L2</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>own_invlists</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build and index with the sequence of processing steps described in the string. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_factory.h" line="17" column="7" declfile="faiss/index_factory.h" declline="17" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac0168767072b3aa5b10dbc0a8867814b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary * faiss::index_binary_factory</definition>
        <argsstring>(int d, const char *description, bool own_invlists=true)</argsstring>
        <name>index_binary_factory</name>
        <qualifiedname>faiss::index_binary_factory</qualifiedname>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>own_invlists</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_factory.h" line="28" column="13" declfile="faiss/index_factory.h" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a621db8cef79acb407c178adc10a47206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index</definition>
        <argsstring>(const Index *idx, const char *fname, int io_flags=0)</argsstring>
        <name>write_index</name>
        <qualifiedname>faiss::write_index</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="36" column="6" declfile="faiss/index_io.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a088b572ddaa493c021deb7835c8fa328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index</definition>
        <argsstring>(const Index *idx, FILE *f, int io_flags=0)</argsstring>
        <name>write_index</name>
        <qualifiedname>faiss::write_index</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="37" column="6" declfile="faiss/index_io.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa408ece2b346444fad2a88bc0568a063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index</definition>
        <argsstring>(const Index *idx, IOWriter *writer, int io_flags=0)</argsstring>
        <name>write_index</name>
        <qualifiedname>faiss::write_index</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOWriter" kindref="compound">IOWriter</ref> *</type>
          <declname>writer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="38" column="6" declfile="faiss/index_io.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a61da4238a64561284de20324b93314bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index_binary</definition>
        <argsstring>(const IndexBinary *idx, const char *fname)</argsstring>
        <name>write_index_binary</name>
        <qualifiedname>faiss::write_index_binary</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="40" column="6" declfile="faiss/index_io.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a2ac354e079e69777c2a3f4ce205372ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index_binary</definition>
        <argsstring>(const IndexBinary *idx, FILE *f)</argsstring>
        <name>write_index_binary</name>
        <qualifiedname>faiss::write_index_binary</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="41" column="6" declfile="faiss/index_io.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af2b88a1a1d4ac1d78493f085cacfb456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index_binary</definition>
        <argsstring>(const IndexBinary *idx, IOWriter *writer)</argsstring>
        <name>write_index_binary</name>
        <qualifiedname>faiss::write_index_binary</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOWriter" kindref="compound">IOWriter</ref> *</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="42" column="6" declfile="faiss/index_io.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a3ef2e333e9fe5d8f948213ba8900fa64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index * faiss::read_index</definition>
        <argsstring>(const char *fname, int io_flags=0)</argsstring>
        <name>read_index</name>
        <qualifiedname>faiss::read_index</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="67" column="7" declfile="faiss/index_io.h" declline="67" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad1b8eddfcbc56b5e1d9024e5cb04ae74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index * faiss::read_index</definition>
        <argsstring>(FILE *f, int io_flags=0)</argsstring>
        <name>read_index</name>
        <qualifiedname>faiss::read_index</qualifiedname>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="68" column="7" declfile="faiss/index_io.h" declline="68" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad853cba80f253e352e27605b1a351725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index * faiss::read_index</definition>
        <argsstring>(IOReader *reader, int io_flags=0)</argsstring>
        <name>read_index</name>
        <qualifiedname>faiss::read_index</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="69" column="7" declfile="faiss/index_io.h" declline="69" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a08da4fc593a4a6fa63bb2d9c95fa4a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary * faiss::read_index_binary</definition>
        <argsstring>(const char *fname, int io_flags=0)</argsstring>
        <name>read_index_binary</name>
        <qualifiedname>faiss::read_index_binary</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="71" column="13" declfile="faiss/index_io.h" declline="71" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a30ff4b85a6a940724f3ea38bc1c903cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary * faiss::read_index_binary</definition>
        <argsstring>(FILE *f, int io_flags=0)</argsstring>
        <name>read_index_binary</name>
        <qualifiedname>faiss::read_index_binary</qualifiedname>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="72" column="13" declfile="faiss/index_io.h" declline="72" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a21d9992c103952690484664d16423a22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary * faiss::read_index_binary</definition>
        <argsstring>(IOReader *reader, int io_flags=0)</argsstring>
        <name>read_index_binary</name>
        <qualifiedname>faiss::read_index_binary</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="73" column="13" declfile="faiss/index_io.h" declline="73" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad72efd9404a8058159f1ae48225a2d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_VectorTransform</definition>
        <argsstring>(const VectorTransform *vt, const char *fname)</argsstring>
        <name>write_VectorTransform</name>
        <qualifiedname>faiss::write_VectorTransform</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref> *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="75" column="6" declfile="faiss/index_io.h" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af06ee18cec9686419b641298e3a0667e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_VectorTransform</definition>
        <argsstring>(const VectorTransform *vt, IOWriter *f)</argsstring>
        <name>write_VectorTransform</name>
        <qualifiedname>faiss::write_VectorTransform</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref> *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOWriter" kindref="compound">IOWriter</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="76" column="6" declfile="faiss/index_io.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a73e97b42d11f03a68bfda4ad5c569dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref> *</type>
        <definition>VectorTransform * faiss::read_VectorTransform</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>read_VectorTransform</name>
        <qualifiedname>faiss::read_VectorTransform</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="78" column="17" declfile="faiss/index_io.h" declline="78" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a10cc4174ae7af7d3f0ec05d1494cc0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref> *</type>
        <definition>VectorTransform * faiss::read_VectorTransform</definition>
        <argsstring>(IOReader *f)</argsstring>
        <name>read_VectorTransform</name>
        <qualifiedname>faiss::read_VectorTransform</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="79" column="17" declfile="faiss/index_io.h" declline="79" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a818fa626e2368301ccf872b7ba65383a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref> *</type>
        <definition>ProductQuantizer * faiss::read_ProductQuantizer</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>read_ProductQuantizer</name>
        <qualifiedname>faiss::read_ProductQuantizer</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="81" column="18" declfile="faiss/index_io.h" declline="81" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a39b1ff6a5c7baacea4002473dde1f8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref> *</type>
        <definition>ProductQuantizer * faiss::read_ProductQuantizer</definition>
        <argsstring>(IOReader *reader)</argsstring>
        <name>read_ProductQuantizer</name>
        <qualifiedname>faiss::read_ProductQuantizer</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="82" column="18" declfile="faiss/index_io.h" declline="82" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aeecb2752b0d13ace2d17ebc0189e9ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_ProductQuantizer</definition>
        <argsstring>(const ProductQuantizer *pq, const char *fname)</argsstring>
        <name>write_ProductQuantizer</name>
        <qualifiedname>faiss::write_ProductQuantizer</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref> *</type>
          <declname>pq</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="84" column="6" declfile="faiss/index_io.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1adbd20721104c8523bbc53d82f839b03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_ProductQuantizer</definition>
        <argsstring>(const ProductQuantizer *pq, IOWriter *f)</argsstring>
        <name>write_ProductQuantizer</name>
        <qualifiedname>faiss::write_ProductQuantizer</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref> *</type>
          <declname>pq</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOWriter" kindref="compound">IOWriter</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="85" column="6" declfile="faiss/index_io.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aceed566acb3d5edfa90c70198ba5d962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_InvertedLists</definition>
        <argsstring>(const InvertedLists *ils, IOWriter *f)</argsstring>
        <name>write_InvertedLists</name>
        <qualifiedname>faiss::write_InvertedLists</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> *</type>
          <declname>ils</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1IOWriter" kindref="compound">IOWriter</ref> *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="87" column="6" declfile="faiss/index_io.h" declline="87" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa406bd6a2e1b397ad15954d9fd67c251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> *</type>
        <definition>InvertedLists * faiss::read_InvertedLists</definition>
        <argsstring>(IOReader *reader, int io_flags=0)</argsstring>
        <name>read_InvertedLists</name>
        <qualifiedname>faiss::read_InvertedLists</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IOReader" kindref="compound">IOReader</ref> *</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="88" column="15" declfile="faiss/index_io.h" declline="88" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4f08bb0a568c3f8cd7c5381be1e58ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::initialize_IVFPQ_precomputed_table</definition>
        <argsstring>(int &amp;use_precomputed_table, const Index *quantizer, const ProductQuantizer &amp;pq, AlignedTable&lt; float &gt; &amp;precomputed_table, bool by_residual, bool verbose)</argsstring>
        <name>initialize_IVFPQ_precomputed_table</name>
        <qualifiedname>faiss::initialize_IVFPQ_precomputed_table</qualifiedname>
        <param>
          <type>int &amp;</type>
          <declname>use_precomputed_table</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>quantizer</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1ProductQuantizer" kindref="compound">ProductQuantizer</ref> &amp;</type>
          <declname>pq</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1AlignedTable" kindref="compound">AlignedTable</ref>&lt; float &gt; &amp;</type>
          <declname>precomputed_table</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>by_residual</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pre-compute distance tables for IVFPQ with by-residual and METRIC_L2</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>use_precomputed_table</parametername>
</parameternamelist>
<parameterdescription>
<para>(I/O) =-1: force disable =0: decide heuristically (default: use tables only if they are &lt; precomputed_tables_max_bytes), set use_precomputed_table on output =1: tables that work for all quantizers (size 256 * nlist * M) =2: specific version for <ref refid="structfaiss_1_1MultiIndexQuantizer" kindref="compound">MultiIndexQuantizer</ref> (much more compact) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precomputed_table</parametername>
</parameternamelist>
<parameterdescription>
<para>precomputed table to initialize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFPQ.h" line="167" column="6" declfile="faiss/IndexIVFPQ.h" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aaa38f721404f4610f50d04ab0a01ad28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::lo_build</definition>
        <argsstring>(uint64_t list_id, uint64_t offset)</argsstring>
        <name>lo_build</name>
        <qualifiedname>faiss::lo_build</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>list_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/DirectMap.h" line="23" column="17" bodyfile="faiss/invlists/DirectMap.h" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afe521d71f2a4dd6a99b0a5d9fbe19787" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::lo_listno</definition>
        <argsstring>(uint64_t lo)</argsstring>
        <name>lo_listno</name>
        <qualifiedname>faiss::lo_listno</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>lo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/DirectMap.h" line="27" column="17" bodyfile="faiss/invlists/DirectMap.h" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a31e62b2521dd1eeb8632005add40ecbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::lo_offset</definition>
        <argsstring>(uint64_t lo)</argsstring>
        <name>lo_offset</name>
        <qualifiedname>faiss::lo_offset</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>lo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/DirectMap.h" line="31" column="17" bodyfile="faiss/invlists/DirectMap.h" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac27fd187a128dba0bf95196458a7fbd7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool faiss::is_similarity_metric</definition>
        <argsstring>(MetricType metric_type)</argsstring>
        <name>is_similarity_metric</name>
        <qualifiedname>faiss::is_similarity_metric</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>metric_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this function is used to distinguish between min and max indexes since we need to support similarity and dis-similarity metrics in a flexible way </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/MetricType.h" line="50" column="16" bodyfile="faiss/MetricType.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a80366c0d6f4ee6aea791c7bccf391f73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>A</declname>
            <defname>A</defname>
            <defval>32</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool faiss::is_aligned_pointer</definition>
        <argsstring>(const void *x)</argsstring>
        <name>is_aligned_pointer</name>
        <qualifiedname>faiss::is_aligned_pointer</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/AlignedTable.h" line="22" column="13" bodyfile="faiss/utils/AlignedTable.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a14b8c774f4115b66556dc772d2cafe43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t faiss::encode_bf16</definition>
        <argsstring>(const float f)</argsstring>
        <name>encode_bf16</name>
        <qualifiedname>faiss::encode_bf16</qualifiedname>
        <param>
          <type>const float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/bf16.h" line="23" column="17" bodyfile="faiss/utils/bf16.h" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a824108d159d2fb71164979e93363c6dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::decode_bf16</definition>
        <argsstring>(const uint16_t v)</argsstring>
        <name>decode_bf16</name>
        <qualifiedname>faiss::decode_bf16</qualifiedname>
        <param>
          <type>const uint16_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/bf16.h" line="30" column="14" bodyfile="faiss/utils/bf16.h" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7466bd32de31640860393a701eaac5ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_L2sqr</definition>
        <argsstring>(const float *x, const float *y, size_t d)</argsstring>
        <name>fvec_L2sqr</name>
        <qualifiedname>faiss::fvec_L2sqr</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Squared L2 distance between two vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="28" column="7" declfile="faiss/utils/distances.h" declline="28" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af6490f0d832462623e19a96481daeef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_inner_product</definition>
        <argsstring>(const float *x, const float *y, size_t d)</argsstring>
        <name>fvec_inner_product</name>
        <qualifiedname>faiss::fvec_inner_product</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>inner product </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="31" column="7" declfile="faiss/utils/distances.h" declline="31" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab43fbb711cebede63ce85090fcc2b4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_L1</definition>
        <argsstring>(const float *x, const float *y, size_t d)</argsstring>
        <name>fvec_L1</name>
        <qualifiedname>faiss::fvec_L1</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>L1 distance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="34" column="7" declfile="faiss/utils/distances.h" declline="34" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a31e28b5857d1df465e0b7c4785989d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_Linf</definition>
        <argsstring>(const float *x, const float *y, size_t d)</argsstring>
        <name>fvec_Linf</name>
        <qualifiedname>faiss::fvec_Linf</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>infinity distance </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="37" column="7" declfile="faiss/utils/distances.h" declline="37" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a827e08342f8d0e636e050619a15564b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_inner_product_batch_4</definition>
        <argsstring>(const float *x, const float *y0, const float *y1, const float *y2, const float *y3, const size_t d, float &amp;dis0, float &amp;dis1, float &amp;dis2, float &amp;dis3)</argsstring>
        <name>fvec_inner_product_batch_4</name>
        <qualifiedname>faiss::fvec_inner_product_batch_4</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y3</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dis0</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dis1</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dis2</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dis3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Special version of inner product that computes 4 distances between x and yi, which is performance oriented. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="41" column="6" declfile="faiss/utils/distances.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a3494288e2aad7b1c41d0b7ef576251a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_L2sqr_batch_4</definition>
        <argsstring>(const float *x, const float *y0, const float *y1, const float *y2, const float *y3, const size_t d, float &amp;dis0, float &amp;dis1, float &amp;dis2, float &amp;dis3)</argsstring>
        <name>fvec_L2sqr_batch_4</name>
        <qualifiedname>faiss::fvec_L2sqr_batch_4</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y3</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dis0</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dis1</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dis2</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>dis3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Special version of L2sqr that computes 4 distances between x and yi, which is performance oriented. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="55" column="6" declfile="faiss/utils/distances.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac7a976807ce755fe82dde95efaecaf99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pairwise_L2sqr</definition>
        <argsstring>(int64_t d, int64_t nq, const float *xq, int64_t nb, const float *xb, float *dis, int64_t ldq=-1, int64_t ldb=-1, int64_t ldd=-1)</argsstring>
        <name>pairwise_L2sqr</name>
        <qualifiedname>faiss::pairwise_L2sqr</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nq</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xq</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xb</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldq</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldb</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldd</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute pairwise distances between sets of vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nq</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of query vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of database vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xq</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors (size nq * d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xb</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors (size nb * d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances (size nq * nb) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ldq</parametername>
<parametername>ldb</parametername>
<parametername>ldd</parametername>
</parameternamelist>
<parameterdescription>
<para>strides for the matrices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="77" column="6" declfile="faiss/utils/distances.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1f0c0270de04cc395edd3d2823d0128d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_inner_products_ny</definition>
        <argsstring>(float *ip, const float *x, const float *y, size_t d, size_t ny)</argsstring>
        <name>fvec_inner_products_ny</name>
        <qualifiedname>faiss::fvec_inner_products_ny</qualifiedname>
        <param>
          <type>float *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="89" column="6" declfile="faiss/utils/distances.h" declline="89" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4ca22849311a991b72676be10315e2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_L2sqr_ny</definition>
        <argsstring>(float *dis, const float *x, const float *y, size_t d, size_t ny)</argsstring>
        <name>fvec_L2sqr_ny</name>
        <qualifiedname>faiss::fvec_L2sqr_ny</qualifiedname>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="97" column="6" declfile="faiss/utils/distances.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a44aac89768a76f72a4205264194f6505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_L2sqr_ny_transposed</definition>
        <argsstring>(float *dis, const float *x, const float *y, const float *y_sqlen, size_t d, size_t d_offset, size_t ny)</argsstring>
        <name>fvec_L2sqr_ny_transposed</name>
        <qualifiedname>faiss::fvec_L2sqr_ny_transposed</qualifiedname>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y_sqlen</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="106" column="6" declfile="faiss/utils/distances.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8fb5a079795e3aa9e1afa3674de43da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::fvec_L2sqr_ny_nearest</definition>
        <argsstring>(float *distances_tmp_buffer, const float *x, const float *y, size_t d, size_t ny)</argsstring>
        <name>fvec_L2sqr_ny_nearest</name>
        <qualifiedname>faiss::fvec_L2sqr_ny_nearest</qualifiedname>
        <param>
          <type>float *</type>
          <declname>distances_tmp_buffer</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="118" column="8" declfile="faiss/utils/distances.h" declline="118" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1bc40dd030e214216a985c696771cfc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::fvec_L2sqr_ny_nearest_y_transposed</definition>
        <argsstring>(float *distances_tmp_buffer, const float *x, const float *y, const float *y_sqlen, size_t d, size_t d_offset, size_t ny)</argsstring>
        <name>fvec_L2sqr_ny_nearest_y_transposed</name>
        <qualifiedname>faiss::fvec_L2sqr_ny_nearest_y_transposed</qualifiedname>
        <param>
          <type>float *</type>
          <declname>distances_tmp_buffer</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y_sqlen</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d_offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="129" column="8" declfile="faiss/utils/distances.h" declline="129" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7a49180ebf10e643217bbce5862c7f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_norm_L2sqr</definition>
        <argsstring>(const float *x, size_t d)</argsstring>
        <name>fvec_norm_L2sqr</name>
        <qualifiedname>faiss::fvec_norm_L2sqr</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>squared norm of a vector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="139" column="7" declfile="faiss/utils/distances.h" declline="139" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a043de43abbfd0d169e609fffbdf8886b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_norms_L2</definition>
        <argsstring>(float *norms, const float *x, size_t d, size_t nx)</argsstring>
        <name>fvec_norms_L2</name>
        <qualifiedname>faiss::fvec_norms_L2</qualifiedname>
        <param>
          <type>float *</type>
          <declname>norms</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute the L2 norms for a set of vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>norms</parametername>
</parameternamelist>
<parameterdescription>
<para>output norms, size nx </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>set of vectors, size nx * d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="146" column="6" declfile="faiss/utils/distances.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa3efb3d72f4cca424c19ac96c1b34754" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_norms_L2sqr</definition>
        <argsstring>(float *norms, const float *x, size_t d, size_t nx)</argsstring>
        <name>fvec_norms_L2sqr</name>
        <qualifiedname>faiss::fvec_norms_L2sqr</qualifiedname>
        <param>
          <type>float *</type>
          <declname>norms</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <briefdescription>
<para>same as fvec_norms_L2, but computes squared norms </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="149" column="6" declfile="faiss/utils/distances.h" declline="149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1d81952ec447e6886d2fd3b930fdc096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_renorm_L2</definition>
        <argsstring>(size_t d, size_t nx, float *x)</argsstring>
        <name>fvec_renorm_L2</name>
        <qualifiedname>faiss::fvec_renorm_L2</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="152" column="6" declfile="faiss/utils/distances.h" declline="152" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a948cc81e43160b04d3e4c2cd8041f9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::inner_product_to_L2sqr</definition>
        <argsstring>(float *dis, const float *nr1, const float *nr2, size_t n1, size_t n2)</argsstring>
        <name>inner_product_to_L2sqr</name>
        <qualifiedname>faiss::inner_product_to_L2sqr</qualifiedname>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>nr1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>nr2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="157" column="6" declfile="faiss/utils/distances.h" declline="157" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1acf1cf6c82706ea8620a1a57b44520b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_add</definition>
        <argsstring>(size_t d, const float *a, const float *b, float *c)</argsstring>
        <name>fvec_add</name>
        <qualifiedname>faiss::fvec_add</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute c := a + b for vectors</para>
<para>c and a can overlap, c and b can overlap</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>size d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>size d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="176" column="6" declfile="faiss/utils/distances.h" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a82f836d347539f6202d4aef0c0653f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_add</definition>
        <argsstring>(size_t d, const float *a, float b, float *c)</argsstring>
        <name>fvec_add</name>
        <qualifiedname>faiss::fvec_add</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute c := a + b for a, c vectors and b a scalar</para>
<para>c and a can overlap</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>size d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="185" column="6" declfile="faiss/utils/distances.h" declline="185" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6f8c866d02e9ad41a5c999b0e3e97fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_sub</definition>
        <argsstring>(size_t d, const float *a, const float *b, float *c)</argsstring>
        <name>fvec_sub</name>
        <qualifiedname>faiss::fvec_sub</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute c := a - b for vectors</para>
<para>c and a can overlap, c and b can overlap</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>size d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>size d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="195" column="6" declfile="faiss/utils/distances.h" declline="195" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a3ccc8ec4f2a74c6154befe048fe83f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_inner_products_by_idx</definition>
        <argsstring>(float *ip, const float *x, const float *y, const int64_t *ids, size_t d, size_t nx, size_t ny)</argsstring>
        <name>fvec_inner_products_by_idx</name>
        <qualifiedname>faiss::fvec_inner_products_by_idx</qualifiedname>
        <param>
          <type>float *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute the inner product between x and a subset y of ny vectors defined by ids</para>
<para>ip(i, j) = inner_product(x(i, :), y(ids(i, j), :))</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>output array, size nx * ny </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>first-term vector, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>second-term vector, size (max(ids) + 1) * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>ids to sample from y, size nx * ny </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="211" column="6" declfile="faiss/utils/distances.h" declline="211" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a470eea056c32c67ac13bb4791394b0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_L2sqr_by_idx</definition>
        <argsstring>(float *dis, const float *x, const float *y, const int64_t *ids, size_t d, size_t nx, size_t ny)</argsstring>
        <name>fvec_L2sqr_by_idx</name>
        <qualifiedname>faiss::fvec_L2sqr_by_idx</qualifiedname>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute the squared L2 distances between x and a subset y of ny vectors defined by ids</para>
<para>dis(i, j) = inner_product(x(i, :), y(ids(i, j), :))</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dis</parametername>
</parameternamelist>
<parameterdescription>
<para>output array, size nx * ny </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>first-term vector, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>second-term vector, size (max(ids) + 1) * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>ids to sample from y, size nx * ny </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="230" column="6" declfile="faiss/utils/distances.h" declline="230" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afbe3e1fcb434cea1ee9ff8ed6ec1d609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pairwise_indexed_L2sqr</definition>
        <argsstring>(size_t d, size_t n, const float *x, const int64_t *ix, const float *y, const int64_t *iy, float *dis)</argsstring>
        <name>pairwise_indexed_L2sqr</name>
        <qualifiedname>faiss::pairwise_indexed_L2sqr</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>iy</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute dis[j] = L2sqr(x[ix[j]], y[iy[j]]) forall j=0..n-1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>size (max(ix) + 1, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>size (max(iy) + 1, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ix</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iy</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="247" column="6" declfile="faiss/utils/distances.h" declline="247" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a687edf56ab386203fcd992572c539f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pairwise_indexed_inner_product</definition>
        <argsstring>(size_t d, size_t n, const float *x, const int64_t *ix, const float *y, const int64_t *iy, float *dis)</argsstring>
        <name>pairwise_indexed_inner_product</name>
        <qualifiedname>faiss::pairwise_indexed_inner_product</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>iy</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute dis[j] = inner_product(x[ix[j]], y[iy[j]]) forall j=0..n-1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>size (max(ix) + 1, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>size (max(iy) + 1, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ix</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iy</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="264" column="6" declfile="faiss/utils/distances.h" declline="264" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab3280d783bfac7f7d96696bb219ed6e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_inner_product</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, float_minheap_array_t *res, const IDSelector *sel=nullptr)</argsstring>
        <name>knn_inner_product</name>
        <qualifiedname>faiss::knn_inner_product</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_minheap_array_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k nearest neighbors of each of the nx vectors x among the ny vector y, w.r.t to max inner product.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size ny * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>result heap structure, which also provides k. Sorted on output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="295" column="6" declfile="faiss/utils/distances.h" declline="295" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac28d81570f1e19a951fde542fb505663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_inner_product</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, size_t k, float *distances, int64_t *indexes, const IDSelector *sel=nullptr)</argsstring>
        <name>knn_inner_product</name>
        <qualifiedname>faiss::knn_inner_product</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k nearest neighbors of each of the nx vectors x among the ny vector y, for the inner product metric.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size ny * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances, size nq * k </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>output vector ids, size nq * k </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="312" column="6" declfile="faiss/utils/distances.h" declline="312" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9ff85c4951798ff50ca6728f582d0e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_L2sqr</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, float_maxheap_array_t *res, const float *y_norm2=nullptr, const IDSelector *sel=nullptr)</argsstring>
        <name>knn_L2sqr</name>
        <qualifiedname>faiss::knn_L2sqr</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_maxheap_array_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y_norm2</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k nearest neighbors of each of the nx vectors x among the ny vector y, for the L2 distance <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size ny * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>result heap strcture, which also provides k. Sorted on output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_norm2</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) norms for the y vectors (nullptr or size ny) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sel</parametername>
</parameternamelist>
<parameterdescription>
<para>search in this subset of vectors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="331" column="6" declfile="faiss/utils/distances.h" declline="331" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abd3b922992d654af67f0fe866f8bf46c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_L2sqr</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, size_t k, float *distances, int64_t *indexes, const float *y_norm2=nullptr, const IDSelector *sel=nullptr)</argsstring>
        <name>knn_L2sqr</name>
        <qualifiedname>faiss::knn_L2sqr</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>indexes</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y_norm2</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k nearest neighbors of each of the nx vectors x among the ny vector y, for the L2 distance</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size ny * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances, size nq * k </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>output vector ids, size nq * k </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_norm2</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) norms for the y vectors (nullptr or size ny) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sel</parametername>
</parameternamelist>
<parameterdescription>
<para>search in this subset of vectors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="351" column="6" declfile="faiss/utils/distances.h" declline="351" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad88ef733c01a81533dce5cf5644e8a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_inner_products_by_idx</definition>
        <argsstring>(const float *x, const float *y, const int64_t *subset, size_t d, size_t nx, size_t ny, size_t nsubset, size_t k, float *vals, int64_t *ids, int64_t ld_ids=-1)</argsstring>
        <name>knn_inner_products_by_idx</name>
        <qualifiedname>faiss::knn_inner_products_by_idx</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>subset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nsubset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ld_ids</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the max inner product neighbors for nx queries in a set of ny vectors indexed by ids. May be useful for re-ranking a pre-selected vector list</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size (max(ids) + 1) * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>subset of database vectors to consider, size (nx, nsubset) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>result structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ld_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>stride for the ids array. -1: use nsubset, 0: all queries process the same subset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="373" column="6" declfile="faiss/utils/distances.h" declline="373" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad7b3cea341840095293ff9e89dd756c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_L2sqr_by_idx</definition>
        <argsstring>(const float *x, const float *y, const int64_t *subset, size_t d, size_t nx, size_t ny, size_t nsubset, size_t k, float *vals, int64_t *ids, int64_t ld_subset=-1)</argsstring>
        <name>knn_L2sqr_by_idx</name>
        <qualifiedname>faiss::knn_L2sqr_by_idx</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>subset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nsubset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ld_subset</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the nearest neighbors for nx queries in a set of ny vectors indexed by ids. May be useful for re-ranking a pre-selected vector list</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size (max(ids) + 1) * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subset</parametername>
</parameternamelist>
<parameterdescription>
<para>subset of database vectors to consider, size (nx, nsubset) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>rIDesult structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ld_subset</parametername>
</parameternamelist>
<parameterdescription>
<para>stride for the subset array. -1: use nsubset, 0: all queries process the same subset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="396" column="6" declfile="faiss/utils/distances.h" declline="396" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aca81a25a7d9100966a28f5f907d385c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::range_search_L2sqr</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, float radius, RangeSearchResult *result, const IDSelector *sel=nullptr)</argsstring>
        <name>range_search_L2sqr</name>
        <qualifiedname>faiss::range_search_L2sqr</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k nearest neighbors of each of the nx vectors x among the ny vector y, w.r.t to max inner product</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size ny * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>search radius around the x vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>result structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="424" column="6" declfile="faiss/utils/distances.h" declline="424" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa96f47c4109ec93b1f55f8e932ebe329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::range_search_inner_product</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, float radius, RangeSearchResult *result, const IDSelector *sel=nullptr)</argsstring>
        <name>range_search_inner_product</name>
        <qualifiedname>faiss::range_search_inner_product</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>same as range_search_L2sqr for the inner product similarity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="435" column="6" declfile="faiss/utils/distances.h" declline="435" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6bae4e24e73c75640d6db8760e513d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::compute_PQ_dis_tables_dsub2</definition>
        <argsstring>(size_t d, size_t ksub, const float *centroids, size_t nx, const float *x, bool is_inner_product, float *dis_tables)</argsstring>
        <name>compute_PQ_dis_tables_dsub2</name>
        <qualifiedname>faiss::compute_PQ_dis_tables_dsub2</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ksub</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>centroids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inner_product</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis_tables</declname>
        </param>
        <briefdescription>
<para>specialized function for PQ2 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="450" column="6" declfile="faiss/utils/distances.h" declline="450" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a40328c31abd0bbba5bd95d7de951e847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_madd</definition>
        <argsstring>(size_t n, const float *a, float bf, const float *b, float *c)</argsstring>
        <name>fvec_madd</name>
        <qualifiedname>faiss::fvec_madd</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bf</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute c := a + bf * b for a, b and c tables</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the tables </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>result table, size n </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="474" column="6" declfile="faiss/utils/distances.h" declline="474" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9da63b8bb84460f5e8ccf8e17622cc7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::fvec_madd_and_argmin</definition>
        <argsstring>(size_t n, const float *a, float bf, const float *b, float *c)</argsstring>
        <name>fvec_madd_and_argmin</name>
        <qualifiedname>faiss::fvec_madd_and_argmin</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bf</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same as fvec_madd, also return index of the min of the result table <simplesect kind="return"><para>index of the min of table c </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="479" column="5" declfile="faiss/utils/distances.h" declline="479" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a66df52907712fa6573cda2036d5a51ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::exhaustive_L2sqr_fused_cmax</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, Top1BlockResultHandler&lt; CMax&lt; float, int64_t &gt; &gt; &amp;res, const float *y_norms)</argsstring>
        <name>exhaustive_L2sqr_fused_cmax</name>
        <qualifiedname>faiss::exhaustive_L2sqr_fused_cmax</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Top1BlockResultHandler" kindref="compound">Top1BlockResultHandler</ref>&lt; <ref refid="structfaiss_1_1CMax" kindref="compound">CMax</ref>&lt; float, int64_t &gt; &gt; &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y_norms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances_fused/distances_fused.h" line="31" column="6" declfile="faiss/utils/distances_fused/distances_fused.h" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af795517ea8f2270421341a93eb528c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Consumer</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>Consumer::T</type>
        <definition>Consumer::T faiss::dispatch_VectorDistance</definition>
        <argsstring>(size_t d, MetricType metric, float metric_arg, Consumer &amp;consumer, Types... args)</argsstring>
        <name>dispatch_VectorDistance</name>
        <qualifiedname>faiss::dispatch_VectorDistance</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>metric</declname>
        </param>
        <param>
          <type>float</type>
          <declname>metric_arg</declname>
        </param>
        <param>
          <type>Consumer &amp;</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>Types...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/extra_distances-inl.h" line="199" column="22" bodyfile="faiss/utils/extra_distances-inl.h" bodystart="199" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ada09f7cd8c85cfbc3caf5b943b10bcc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pairwise_extra_distances</definition>
        <argsstring>(int64_t d, int64_t nq, const float *xq, int64_t nb, const float *xb, MetricType mt, float metric_arg, float *dis, int64_t ldq=-1, int64_t ldb=-1, int64_t ldd=-1)</argsstring>
        <name>pairwise_extra_distances</name>
        <qualifiedname>faiss::pairwise_extra_distances</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nq</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xq</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xb</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>mt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>metric_arg</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldq</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldb</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldd</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/extra_distances.h" line="23" column="6" declfile="faiss/utils/extra_distances.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a787d24f72e03ccc4cb6427eb9135b172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_extra_metrics</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, MetricType mt, float metric_arg, size_t k, float *distances, int64_t *indexes)</argsstring>
        <name>knn_extra_metrics</name>
        <qualifiedname>faiss::knn_extra_metrics</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>mt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>metric_arg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>indexes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/extra_distances.h" line="36" column="6" declfile="faiss/utils/extra_distances.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8cfa8ec52353c0d6477e6db5fc703ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1FlatCodesDistanceComputer" kindref="compound">FlatCodesDistanceComputer</ref> *</type>
        <definition>FlatCodesDistanceComputer * faiss::get_extra_distance_computer</definition>
        <argsstring>(size_t d, MetricType mt, float metric_arg, size_t nb, const float *xb)</argsstring>
        <name>get_extra_distance_computer</name>
        <qualifiedname>faiss::get_extra_distance_computer</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>mt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>metric_arg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get a <ref refid="structfaiss_1_1DistanceComputer" kindref="compound">DistanceComputer</ref> that refers to this type of distance and indexes a flat array of size nb </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/extra_distances.h" line="50" column="27" declfile="faiss/utils/extra_distances.h" declline="50" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a302c4546543d05d555edf18af88edaa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t faiss::encode_fp16</definition>
        <argsstring>(float x)</argsstring>
        <name>encode_fp16</name>
        <qualifiedname>faiss::encode_fp16</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/fp16-arm.h" line="15" column="17" bodyfile="faiss/utils/fp16-arm.h" bodystart="15" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac3f112424a7957effd27187654d90986" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::decode_fp16</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>decode_fp16</name>
        <qualifiedname>faiss::decode_fp16</qualifiedname>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/fp16-arm.h" line="22" column="14" bodyfile="faiss/utils/fp16-arm.h" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0e10b0864a93653945dbd950b9fcdacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bitvec_print</definition>
        <argsstring>(const uint8_t *b, size_t d)</argsstring>
        <name>bitvec_print</name>
        <qualifiedname>faiss::bitvec_print</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="47" column="6" declfile="faiss/utils/hamming.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a224890519ae5efe7a3c8cdf94bda60e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvecs2bitvecs</definition>
        <argsstring>(const float *x, uint8_t *b, size_t d, size_t n)</argsstring>
        <name>fvecs2bitvecs</name>
        <qualifiedname>faiss::fvecs2bitvecs</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="56" column="6" declfile="faiss/utils/hamming.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad8f68b3bcb7a897358ab8501ea86b897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bitvecs2fvecs</definition>
        <argsstring>(const uint8_t *b, float *x, size_t d, size_t n)</argsstring>
        <name>bitvecs2fvecs</name>
        <qualifiedname>faiss::bitvecs2fvecs</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="58" column="6" declfile="faiss/utils/hamming.h" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afde8c1f96d4c776b101dd67cc0064c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec2bitvec</definition>
        <argsstring>(const float *x, uint8_t *b, size_t d)</argsstring>
        <name>fvec2bitvec</name>
        <qualifiedname>faiss::fvec2bitvec</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="60" column="6" declfile="faiss/utils/hamming.h" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6ea3261fda6f9dc53c401b4cccb90268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bitvec_shuffle</definition>
        <argsstring>(size_t n, size_t da, size_t db, const int *order, const uint8_t *a, uint8_t *b)</argsstring>
        <name>bitvec_shuffle</name>
        <qualifiedname>faiss::bitvec_shuffle</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>da</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shuffle the bits from b(i, j) := a(i, order[j]) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="64" column="6" declfile="faiss/utils/hamming.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0832c5ab58f4d1a340b0bde273c5b501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hammings</definition>
        <argsstring>(const uint8_t *a, const uint8_t *b, size_t na, size_t nb, size_t nbytespercode, hamdis_t *dis)</argsstring>
        <name>hammings</name>
        <qualifiedname>faiss::hammings</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>na</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytespercode</declname>
        </param>
        <param>
          <type>hamdis_t *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute a set of Hamming distances between na and nb binary vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size na * nbytespercode </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>size nb * nbytespercode </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytespercode</parametername>
</parameternamelist>
<parameterdescription>
<para>should be multiple of 8 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances, size na * nb </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="113" column="6" declfile="faiss/utils/hamming.h" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac7029919748e69f5ef7f813deb2b04d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hammings_knn_hc</definition>
        <argsstring>(int_maxheap_array_t *ha, const uint8_t *a, const uint8_t *b, size_t nb, size_t ncodes, int ordered, ApproxTopK_mode_t approx_topk_mode=ApproxTopK_mode_t::EXACT_TOPK, const faiss::IDSelector *sel=nullptr)</argsstring>
        <name>hammings_knn_hc</name>
        <qualifiedname>faiss::hammings_knn_hc</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">int_maxheap_array_t</ref> *</type>
          <declname>ha</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordered</declname>
        </param>
        <param>
          <type>ApproxTopK_mode_t</type>
          <declname>approx_topk_mode</declname>
          <defval>ApproxTopK_mode_t::EXACT_TOPK</defval>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">faiss::IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k smallest Hamming distances for a set of binary query vectors, using a max heap. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>queries, size ha-&gt;nh * ncodes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>database, size nb * ncodes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>number of database vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncodes</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the binary codes (bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ordered</parametername>
</parameternamelist>
<parameterdescription>
<para>if != 0: order the results by decreasing distance (may be bottleneck for k/n &gt; 0.01) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>approx_topk_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>allows to use approximate top-k facilities to speedup heap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="132" column="6" declfile="faiss/utils/hamming.h" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0c5abbe20058359340d9c7cb635f344b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hammings_knn</definition>
        <argsstring>(int_maxheap_array_t *ha, const uint8_t *a, const uint8_t *b, size_t nb, size_t ncodes, int ordered)</argsstring>
        <name>hammings_knn</name>
        <qualifiedname>faiss::hammings_knn</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">int_maxheap_array_t</ref> *</type>
          <declname>ha</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="143" column="6" declfile="faiss/utils/hamming.h" declline="143" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a35a6c82c3a7b3d7616fc2c6cee53979d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hammings_knn_mc</definition>
        <argsstring>(const uint8_t *a, const uint8_t *b, size_t na, size_t nb, size_t k, size_t ncodes, int32_t *distances, int64_t *labels, const faiss::IDSelector *sel=nullptr)</argsstring>
        <name>hammings_knn_mc</name>
        <qualifiedname>faiss::hammings_knn_mc</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>na</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">faiss::IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k smallest Hamming distances for a set of binary query vectors, using counting max. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>queries, size na * ncodes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>database, size nb * ncodes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>na</parametername>
</parameternamelist>
<parameterdescription>
<para>number of query vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>number of database vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors/distances to return </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncodes</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the binary codes (bytes) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances from each query vector to its k nearest neighbors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output ids of the k nearest neighbors to each query vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="163" column="6" declfile="faiss/utils/hamming.h" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a182286f2abe99d5570f6308474b55e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hamming_range_search</definition>
        <argsstring>(const uint8_t *a, const uint8_t *b, size_t na, size_t nb, int radius, size_t ncodes, RangeSearchResult *result, const faiss::IDSelector *sel=nullptr)</argsstring>
        <name>hamming_range_search</name>
        <qualifiedname>faiss::hamming_range_search</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>na</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">faiss::IDSelector</ref> *</type>
          <declname>sel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same as hammings_knn except we are doing a range search with radius </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="175" column="6" declfile="faiss/utils/hamming.h" declline="175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac713458e556afa5bd612b88944292d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hamming_count_thres</definition>
        <argsstring>(const uint8_t *bs1, const uint8_t *bs2, size_t n1, size_t n2, hamdis_t ht, size_t ncodes, size_t *nptr)</argsstring>
        <name>hamming_count_thres</name>
        <qualifiedname>faiss::hamming_count_thres</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>bs1</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bs2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n2</declname>
        </param>
        <param>
          <type>hamdis_t</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>nptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="187" column="6" declfile="faiss/utils/hamming.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad32229f823f2a0a920f0b62a702a67c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::match_hamming_thres</definition>
        <argsstring>(const uint8_t *bs1, const uint8_t *bs2, size_t n1, size_t n2, hamdis_t ht, size_t ncodes, int64_t *idx, hamdis_t *dis)</argsstring>
        <name>match_hamming_thres</name>
        <qualifiedname>faiss::match_hamming_thres</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>bs1</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bs2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n2</declname>
        </param>
        <param>
          <type>hamdis_t</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>hamdis_t *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="198" column="8" declfile="faiss/utils/hamming.h" declline="198" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a399cfe2b1a7b2e3d722e10654c164ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::crosshamming_count_thres</definition>
        <argsstring>(const uint8_t *dbs, size_t n, hamdis_t ht, size_t ncodes, size_t *nptr)</argsstring>
        <name>crosshamming_count_thres</name>
        <qualifiedname>faiss::crosshamming_count_thres</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>dbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>hamdis_t</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>nptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="209" column="6" declfile="faiss/utils/hamming.h" declline="209" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af860acfd5b9adbb6a50d4b458d0df8b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming</definition>
        <argsstring>(const uint64_t *bs1, const uint64_t *bs2, size_t nwords)</argsstring>
        <name>hamming</name>
        <qualifiedname>faiss::hamming</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>bs1</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>bs2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nwords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx2-inl.h" line="65" column="17" bodyfile="faiss/utils/hamming_distance/avx2-inl.h" bodystart="65" bodyend="74" declfile="faiss/utils/hamming.h" declline="217" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a31146ebd95375313ae7c02ba06209ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::generalized_hammings_knn_hc</definition>
        <argsstring>(int_maxheap_array_t *ha, const uint8_t *a, const uint8_t *b, size_t nb, size_t code_size, int ordered=true)</argsstring>
        <name>generalized_hammings_knn_hc</name>
        <qualifiedname>faiss::generalized_hammings_knn_hc</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">int_maxheap_array_t</ref> *</type>
          <declname>ha</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>code_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordered</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>generalized Hamming distances (= count number of code bytes that are the same) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="221" column="6" declfile="faiss/utils/hamming.h" declline="221" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab693555b4e075c52e578e508206ee975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pack_bitstrings</definition>
        <argsstring>(size_t n, size_t M, int nbit, const int32_t *unpacked, uint8_t *packed, size_t code_size)</argsstring>
        <name>pack_bitstrings</name>
        <qualifiedname>faiss::pack_bitstrings</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbit</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>unpacked</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>packed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>code_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pack a set of n codes of size M * nbit</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of codes to pack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elementary codes per code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbit</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits per elementary code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unpacked</parametername>
</parameternamelist>
<parameterdescription>
<para>input unpacked codes, size (n, M) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>output packed codes, size (n, code_size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code_size</parametername>
</parameternamelist>
<parameterdescription>
<para>should be &gt;= ceil(M * nbit / 8) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="238" column="6" declfile="faiss/utils/hamming.h" declline="238" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af7eb09d1daf10d9f8917a059175c4f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pack_bitstrings</definition>
        <argsstring>(size_t n, size_t M, const int32_t *nbits, const int32_t *unpacked, uint8_t *packed, size_t code_size)</argsstring>
        <name>pack_bitstrings</name>
        <qualifiedname>faiss::pack_bitstrings</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>unpacked</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>packed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>code_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pack a set of n codes of variable sizes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbit</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits per entry (size M) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="250" column="6" declfile="faiss/utils/hamming.h" declline="250" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a5310d0165a1a1f6a923d313549d9508c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::unpack_bitstrings</definition>
        <argsstring>(size_t n, size_t M, int nbit, const uint8_t *packed, size_t code_size, int32_t *unpacked)</argsstring>
        <name>unpack_bitstrings</name>
        <qualifiedname>faiss::unpack_bitstrings</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbit</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>packed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>code_size</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>unpacked</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack a set of n codes of size M * nbit</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of codes to pack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elementary codes per code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbit</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits per elementary code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unpacked</parametername>
</parameternamelist>
<parameterdescription>
<para>input unpacked codes, size (n, M) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>output packed codes, size (n, code_size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code_size</parametername>
</parameternamelist>
<parameterdescription>
<para>should be &gt;= ceil(M * nbit / 8) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="267" column="6" declfile="faiss/utils/hamming.h" declline="267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4a3d77f3647685d4bea401f50928cd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::unpack_bitstrings</definition>
        <argsstring>(size_t n, size_t M, const int32_t *nbits, const uint8_t *packed, size_t code_size, int32_t *unpacked)</argsstring>
        <name>unpack_bitstrings</name>
        <qualifiedname>faiss::unpack_bitstrings</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>packed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>code_size</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>unpacked</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack a set of n codes of variable sizes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbit</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bits per entry (size M) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="279" column="6" declfile="faiss/utils/hamming.h" declline="279" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6ae1b2a404a4f618609a5b87eecc344b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>nbits</declname>
            <defname>nbits</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T faiss::hamming</definition>
        <argsstring>(const uint8_t *bs1, const uint8_t *bs2)</argsstring>
        <name>hamming</name>
        <qualifiedname>faiss::hamming</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>bs1</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bs2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx2-inl.h" line="25" column="10" bodyfile="faiss/utils/hamming_distance/avx2-inl.h" bodystart="25" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a866a1991153d86e11e93d22b1567d578" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>nbits</declname>
            <defname>nbits</defname>
          </param>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming</definition>
        <argsstring>(const uint64_t *bs1, const uint64_t *bs2)</argsstring>
        <name>hamming</name>
        <qualifiedname>faiss::hamming</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>bs1</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>bs2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx2-inl.h" line="37" column="17" bodyfile="faiss/utils/hamming_distance/avx2-inl.h" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a020c4142c2661fa5387255c73e1b3510" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 64 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 64 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 64 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx2-inl.h" line="49" column="8" bodyfile="faiss/utils/hamming_distance/avx2-inl.h" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a251cd1d86f57ca5499d939d3f5ae093e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 128 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 128 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 128 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx2-inl.h" line="54" column="8" bodyfile="faiss/utils/hamming_distance/avx2-inl.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8d4176559a9c361225a047c03f62d648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 256 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 256 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 256 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx2-inl.h" line="59" column="8" bodyfile="faiss/utils/hamming_distance/avx2-inl.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a69337e23232a204be3e1464713fee62d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::generalized_hamming_64</definition>
        <argsstring>(uint64_t a)</argsstring>
        <name>generalized_hamming_64</name>
        <qualifiedname>faiss::generalized_hamming_64</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx2-inl.h" line="353" column="12" bodyfile="faiss/utils/hamming_distance/avx2-inl.h" bodystart="353" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a020c4142c2661fa5387255c73e1b3510" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 64 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 64 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 64 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx512-inl.h" line="54" column="8" bodyfile="faiss/utils/hamming_distance/avx512-inl.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a251cd1d86f57ca5499d939d3f5ae093e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 128 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 128 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 128 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx512-inl.h" line="59" column="8" bodyfile="faiss/utils/hamming_distance/avx512-inl.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8d4176559a9c361225a047c03f62d648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 256 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 256 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 256 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/avx512-inl.h" line="64" column="8" bodyfile="faiss/utils/hamming_distance/avx512-inl.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8af12986585c75db3a1dbb2b74b6111e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::popcount32</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>popcount32</name>
        <qualifiedname>faiss::popcount32</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/common.h" line="21" column="12" bodyfile="faiss/utils/hamming_distance/common.h" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7d2125afc95e3417b270cb9428f8e0ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::popcount64</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>popcount64</name>
        <qualifiedname>faiss::popcount64</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/common.h" line="26" column="12" bodyfile="faiss/utils/hamming_distance/common.h" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a020c4142c2661fa5387255c73e1b3510" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 64 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 64 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 64 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/generic-inl.h" line="47" column="8" bodyfile="faiss/utils/hamming_distance/generic-inl.h" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a251cd1d86f57ca5499d939d3f5ae093e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 128 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 128 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 128 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/generic-inl.h" line="52" column="8" bodyfile="faiss/utils/hamming_distance/generic-inl.h" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8d4176559a9c361225a047c03f62d648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming&lt; 256 &gt;</definition>
        <argsstring>(const uint64_t *pa, const uint64_t *pb)</argsstring>
        <name>hamming&lt; 256 &gt;</name>
        <qualifiedname>faiss::hamming&lt; 256 &gt;</qualifiedname>
        <param>
          <type>const uint64_t *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/generic-inl.h" line="57" column="8" bodyfile="faiss/utils/hamming_distance/generic-inl.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a3c20def47976af19292a160b2ec551d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(4)</argsstring>
        <name>SPECIALIZED_HC</name>
        <qualifiedname>faiss::SPECIALIZED_HC</qualifiedname>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/hamdis-inl.h" line="49" column="1" declfile="faiss/utils/hamming_distance/hamdis-inl.h" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1acb4e4208ec84a403e02dba1b18b29840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(8)</argsstring>
        <name>SPECIALIZED_HC</name>
        <qualifiedname>faiss::SPECIALIZED_HC</qualifiedname>
        <param>
          <type>8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/hamdis-inl.h" line="50" column="1" declfile="faiss/utils/hamming_distance/hamdis-inl.h" declline="50" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a138c0f4e83d2e8b7fdd90ef895f8c6f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(16)</argsstring>
        <name>SPECIALIZED_HC</name>
        <qualifiedname>faiss::SPECIALIZED_HC</qualifiedname>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/hamdis-inl.h" line="51" column="1" declfile="faiss/utils/hamming_distance/hamdis-inl.h" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a965aa1292a3957feaaec0f4ed1b54f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(20)</argsstring>
        <name>SPECIALIZED_HC</name>
        <qualifiedname>faiss::SPECIALIZED_HC</qualifiedname>
        <param>
          <type>20</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/hamdis-inl.h" line="52" column="1" declfile="faiss/utils/hamming_distance/hamdis-inl.h" declline="52" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a69f0b96e4d8c59be97ee73aedafac0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(32)</argsstring>
        <name>SPECIALIZED_HC</name>
        <qualifiedname>faiss::SPECIALIZED_HC</qualifiedname>
        <param>
          <type>32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/hamdis-inl.h" line="53" column="1" declfile="faiss/utils/hamming_distance/hamdis-inl.h" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aadcee2efcbb11d2c1d284589ba12b8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(64)</argsstring>
        <name>SPECIALIZED_HC</name>
        <qualifiedname>faiss::SPECIALIZED_HC</qualifiedname>
        <param>
          <type>64</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/hamdis-inl.h" line="54" column="1" declfile="faiss/utils/hamming_distance/hamdis-inl.h" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af53a51eeba20beeeefb82758e28c7712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Consumer</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Types</declname>
            <defname>Types</defname>
          </param>
        </templateparamlist>
        <type>Consumer::T</type>
        <definition>Consumer::T faiss::dispatch_HammingComputer</definition>
        <argsstring>(int code_size, Consumer &amp;consumer, Types... args)</argsstring>
        <name>dispatch_HammingComputer</name>
        <qualifiedname>faiss::dispatch_HammingComputer</qualifiedname>
        <param>
          <type>int</type>
          <declname>code_size</declname>
        </param>
        <param>
          <type>Consumer &amp;</type>
          <declname>consumer</declname>
        </param>
        <param>
          <type>Types...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming_distance/hamdis-inl.h" line="65" column="22" bodyfile="faiss/utils/hamming_distance/hamdis-inl.h" bodystart="65" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1d40aec5723474516de576263cc03048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_pop</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids)</argsstring>
        <name>heap_pop</name>
        <qualifiedname>faiss::heap_pop</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pops the top element from the heap defined by bh_val[0..k-1] and bh_ids[0..k-1]. on output the element at k-1 is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="47" column="13" bodyfile="faiss/utils/Heap.h" bodystart="47" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a2e2264988d2658c0cd467463bc03254c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_push</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids, typename C::T val, typename C::TI id)</argsstring>
        <name>heap_push</name>
        <qualifiedname>faiss::heap_push</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>typename C::T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes the element (val, ids) into the heap bh_val[0..k-2] and bh_ids[0..k-2]. on output the element at k-1 is defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="84" column="13" bodyfile="faiss/utils/Heap.h" bodystart="84" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abedf9900fe8f4b4566801aad585d60c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_replace_top</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids, typename C::T val, typename C::TI id)</argsstring>
        <name>heap_replace_top</name>
        <qualifiedname>faiss::heap_replace_top</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>typename C::T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces the top element from the heap defined by bh_val[0..k-1] and bh_ids[0..k-1], and for identical bh_val[] values also sorts by bh_ids[] values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="113" column="13" bodyfile="faiss/utils/Heap.h" bodystart="113" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6007eab1211f86326246114757ee8c41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_pop</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids)</argsstring>
        <name>minheap_pop</name>
        <qualifiedname>faiss::minheap_pop</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="156" column="13" bodyfile="faiss/utils/Heap.h" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a34d5f3d2e6e58005727989c3b2def7fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_push</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, T val, int64_t ids)</argsstring>
        <name>minheap_push</name>
        <qualifiedname>faiss::minheap_push</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="161" column="13" bodyfile="faiss/utils/Heap.h" bodystart="161" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a56261d03ad06ddadde7f9c8161c48f88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_replace_top</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, T val, int64_t ids)</argsstring>
        <name>minheap_replace_top</name>
        <qualifiedname>faiss::minheap_replace_top</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="171" column="13" bodyfile="faiss/utils/Heap.h" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af1853d9d3e0c4c0d3ebf204c1f50c30c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_pop</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids)</argsstring>
        <name>maxheap_pop</name>
        <qualifiedname>faiss::maxheap_pop</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="181" column="13" bodyfile="faiss/utils/Heap.h" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8c87f0f0d3f96ede4b6cd031592aaed1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_push</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, T val, int64_t ids)</argsstring>
        <name>maxheap_push</name>
        <qualifiedname>faiss::maxheap_push</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="186" column="13" bodyfile="faiss/utils/Heap.h" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0060a794c9aa0f221dec2ed996f4cab6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_replace_top</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, T val, int64_t ids)</argsstring>
        <name>maxheap_replace_top</name>
        <qualifiedname>faiss::maxheap_replace_top</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="196" column="13" bodyfile="faiss/utils/Heap.h" bodystart="196" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab704c7ced4df0f7db39abbe4adbe29b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_pop</definition>
        <argsstring>(size_t k, std::pair&lt; typename C::T, typename C::TI &gt; *bh)</argsstring>
        <name>heap_pop</name>
        <qualifiedname>faiss::heap_pop</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::pair&lt; typename C::T, typename C::TI &gt; *</type>
          <declname>bh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pops the top element from the heap defined by bh_val[0..k-1] and bh_ids[0..k-1]. on output the element at k-1 is undefined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="216" column="13" bodyfile="faiss/utils/Heap.h" bodystart="216" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a043fff0ee78486b74f79c27f7233af87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_push</definition>
        <argsstring>(size_t k, std::pair&lt; typename C::T, typename C::TI &gt; *bh, typename C::T val, typename C::TI id)</argsstring>
        <name>heap_push</name>
        <qualifiedname>faiss::heap_push</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::pair&lt; typename C::T, typename C::TI &gt; *</type>
          <declname>bh</declname>
        </param>
        <param>
          <type>typename C::T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes the element (val, ids) into the heap bh_val[0..k-2] and bh_ids[0..k-2]. on output the element at k-1 is defined. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="249" column="13" bodyfile="faiss/utils/Heap.h" bodystart="249" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a66e2d19b17520125b3ff3f85e31bd398" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_replace_top</definition>
        <argsstring>(size_t k, std::pair&lt; typename C::T, typename C::TI &gt; *bh, typename C::T val, typename C::TI id)</argsstring>
        <name>heap_replace_top</name>
        <qualifiedname>faiss::heap_replace_top</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::pair&lt; typename C::T, typename C::TI &gt; *</type>
          <declname>bh</declname>
        </param>
        <param>
          <type>typename C::T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces the top element from the heap defined by bh_val[0..k-1] and bh_ids[0..k-1], and for identical bh_val[] values also sorts by bh_ids[] values. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="275" column="13" bodyfile="faiss/utils/Heap.h" bodystart="275" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8617ea308e081aed83d4a084a9d31f70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_heapify</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids, const typename C::T *x=nullptr, const typename C::TI *ids=nullptr, size_t k0=0)</argsstring>
        <name>heap_heapify</name>
        <qualifiedname>faiss::heap_heapify</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const typename C::TI *</type>
          <declname>ids</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="318" column="13" bodyfile="faiss/utils/Heap.h" bodystart="318" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a74010fa2ad110134f8b7c5e3af54a98b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_heapify</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, const T *x=nullptr, const int64_t *ids=nullptr, size_t k0=0)</argsstring>
        <name>minheap_heapify</name>
        <qualifiedname>faiss::minheap_heapify</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="346" column="13" bodyfile="faiss/utils/Heap.h" bodystart="346" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad80324df320ebcc1e5deecbe4e8626d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_heapify</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, const T *x=nullptr, const int64_t *ids=nullptr, size_t k0=0)</argsstring>
        <name>maxheap_heapify</name>
        <qualifiedname>faiss::maxheap_heapify</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="357" column="13" bodyfile="faiss/utils/Heap.h" bodystart="357" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afa5c2b8f24eb244fb064af0c7d853422" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_addn</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids, const typename C::T *x, const typename C::TI *ids, size_t n)</argsstring>
        <name>heap_addn</name>
        <qualifiedname>faiss::heap_addn</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const typename C::TI *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="373" column="13" bodyfile="faiss/utils/Heap.h" bodystart="373" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad1864b81445cbbc1ffe06fa8d0d26943" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_addn</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, const T *x, const int64_t *ids, size_t n)</argsstring>
        <name>minheap_addn</name>
        <qualifiedname>faiss::minheap_addn</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="399" column="13" bodyfile="faiss/utils/Heap.h" bodystart="399" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a31eaeca29f48abb9ca4822085ab24a47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_addn</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, const T *x, const int64_t *ids, size_t n)</argsstring>
        <name>maxheap_addn</name>
        <qualifiedname>faiss::maxheap_addn</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="410" column="13" bodyfile="faiss/utils/Heap.h" bodystart="410" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4e69334ccd78982042a6210c743d0418" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t faiss::heap_reorder</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids)</argsstring>
        <name>heap_reorder</name>
        <qualifiedname>faiss::heap_reorder</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="427" column="15" bodyfile="faiss/utils/Heap.h" bodystart="427" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa29a53dfe2924fb9684292be43539228" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t faiss::minheap_reorder</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids)</argsstring>
        <name>minheap_reorder</name>
        <qualifiedname>faiss::minheap_reorder</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="460" column="15" bodyfile="faiss/utils/Heap.h" bodystart="460" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1adf25de8d60180e4d314a6d1be95d4334" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t faiss::maxheap_reorder</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids)</argsstring>
        <name>maxheap_reorder</name>
        <qualifiedname>faiss::maxheap_reorder</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="465" column="15" bodyfile="faiss/utils/Heap.h" bodystart="465" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8023405f5360828c9a892510a5f4c4ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::indirect_heap_pop</definition>
        <argsstring>(size_t k, const typename C::T *bh_val, typename C::TI *bh_ids)</argsstring>
        <name>indirect_heap_pop</name>
        <qualifiedname>faiss::indirect_heap_pop</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="573" column="13" bodyfile="faiss/utils/Heap.h" bodystart="573" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8ecaf37c77256e02a946e1572b992ed5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::indirect_heap_push</definition>
        <argsstring>(size_t k, const typename C::T *bh_val, typename C::TI *bh_ids, typename C::TI id)</argsstring>
        <name>indirect_heap_push</name>
        <qualifiedname>faiss::indirect_heap_push</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="605" column="13" bodyfile="faiss/utils/Heap.h" bodystart="605" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a5bd0fd59cade66b4d3bda7ba3d59cfd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class idx_t</type>
          </param>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::merge_knn_results</definition>
        <argsstring>(size_t n, size_t k, typename C::TI nshard, const typename C::T *all_distances, const idx_t *all_labels, typename C::T *distances, idx_t *labels)</argsstring>
        <name>merge_knn_results</name>
        <qualifiedname>faiss::merge_knn_results</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>nshard</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>all_distances</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>all_labels</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merge result tables from several shards. The per-shard results are assumed to be sorted. Note that the C comparator is reversed w.r.t. the usual top-k element heap because we want the best (ie. lowest for L2) result to be on top, not the worst. Also, it needs to hold an index of a shard id (ie. usually int32 is more than enough).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>all_distances</parametername>
</parameternamelist>
<parameterdescription>
<para>size (nshard, n, k) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all_labels</parametername>
</parameternamelist>
<parameterdescription>
<para>size (nshard, n, k) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances, size (n, k) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output labels, size (n, k) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="636" column="6" declfile="faiss/utils/Heap.h" declline="636" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a36bf2bb72e8dd3c2e320a6ef89765635" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T faiss::cmin_nextafter</definition>
        <argsstring>(T x)</argsstring>
        <name>cmin_nextafter</name>
        <qualifiedname>faiss::cmin_nextafter</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="35" column="10" declfile="faiss/utils/ordered_key_value.h" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6081a16de4c32586093673ee7590731f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T faiss::cmax_nextafter</definition>
        <argsstring>(T x)</argsstring>
        <name>cmax_nextafter</name>
        <qualifiedname>faiss::cmax_nextafter</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="37" column="10" declfile="faiss/utils/ordered_key_value.h" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a49b45a342afbbed4b3d58dd42ff19f71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float faiss::cmin_nextafter&lt; float &gt;</definition>
        <argsstring>(float x)</argsstring>
        <name>cmin_nextafter&lt; float &gt;</name>
        <qualifiedname>faiss::cmin_nextafter&lt; float &gt;</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="87" column="8" bodyfile="faiss/utils/ordered_key_value.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0f12494aca68dc1eafaee9caefb3a4b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float faiss::cmax_nextafter&lt; float &gt;</definition>
        <argsstring>(float x)</argsstring>
        <name>cmax_nextafter&lt; float &gt;</name>
        <qualifiedname>faiss::cmax_nextafter&lt; float &gt;</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="92" column="8" bodyfile="faiss/utils/ordered_key_value.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abec32c4c15ce3c61dc2dfd6ca6a8382f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t faiss::cmin_nextafter&lt; uint16_t &gt;</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>cmin_nextafter&lt; uint16_t &gt;</name>
        <qualifiedname>faiss::cmin_nextafter&lt; uint16_t &gt;</qualifiedname>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="97" column="8" bodyfile="faiss/utils/ordered_key_value.h" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8bfdae186db8cb49267f2164f89f5f48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t faiss::cmax_nextafter&lt; uint16_t &gt;</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>cmax_nextafter&lt; uint16_t &gt;</name>
        <qualifiedname>faiss::cmax_nextafter&lt; uint16_t &gt;</qualifiedname>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="102" column="8" bodyfile="faiss/utils/ordered_key_value.h" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9c403fd30f8012bde1e38ea9c2dcdab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>C::T</type>
        <definition>C::T faiss::partition_fuzzy</definition>
        <argsstring>(typename C::T *vals, typename C::TI *ids, size_t n, size_t q_min, size_t q_max, size_t *q_out)</argsstring>
        <name>partition_fuzzy</name>
        <qualifiedname>faiss::partition_fuzzy</qualifiedname>
        <param>
          <type>typename C::T *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>q_min</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>q_max</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>q_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>partitions the table into 0:q and q:n where all elements above q are &gt;= all elements below q (for C = <ref refid="structfaiss_1_1CMax" kindref="compound">CMax</ref>, for <ref refid="structfaiss_1_1CMin" kindref="compound">CMin</ref> comparisons are reversed)</para>
<para>Returns the partition threshold. The elements q:n are destroyed on output. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="23" column="15" declfile="faiss/utils/partitioning.h" declline="23" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afad6c999c4af7456ef9954f2f3021592" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>C::T</type>
        <definition>C::T faiss::partition</definition>
        <argsstring>(typename C::T *vals, typename C::TI *ids, size_t n, size_t q)</argsstring>
        <name>partition</name>
        <qualifiedname>faiss::partition</qualifiedname>
        <param>
          <type>typename C::T *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>simplified interface for when the parition is not fuzzy </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="33" column="22" bodyfile="faiss/utils/partitioning.h" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a607e40148f9d63cc082cb0ed7cbdc1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::simd_histogram_8</definition>
        <argsstring>(const uint16_t *data, int n, uint16_t min, int shift, int *hist)</argsstring>
        <name>simd_histogram_8</name>
        <qualifiedname>faiss::simd_histogram_8</qualifiedname>
        <param>
          <type>const uint16_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>low level SIMD histogramming functions 8-bin histogram of (x - min) &gt;&gt; shift values outside the range are ignored. the data table should be aligned on 32 bytes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="46" column="6" declfile="faiss/utils/partitioning.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aff3bc91a0aef8d8aca171a67611b65a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::simd_histogram_16</definition>
        <argsstring>(const uint16_t *data, int n, uint16_t min, int shift, int *hist)</argsstring>
        <name>simd_histogram_16</name>
        <qualifiedname>faiss::simd_histogram_16</qualifiedname>
        <param>
          <type>const uint16_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same for 16-bin histogram </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="54" column="6" declfile="faiss/utils/partitioning.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a5044a6332355bfa866dda113f81e9602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::float_rand</definition>
        <argsstring>(float *x, size_t n, int64_t seed)</argsstring>
        <name>float_rand</name>
        <qualifiedname>faiss::float_rand</qualifiedname>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="71" column="6" declfile="faiss/utils/random.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa149aec8f65085773f664bb7b5884743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::float_randn</definition>
        <argsstring>(float *x, size_t n, int64_t seed)</argsstring>
        <name>float_randn</name>
        <qualifiedname>faiss::float_randn</qualifiedname>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="72" column="6" declfile="faiss/utils/random.h" declline="72" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aba416d6990d202bfc7eac244a7d874c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::int64_rand</definition>
        <argsstring>(int64_t *x, size_t n, int64_t seed)</argsstring>
        <name>int64_rand</name>
        <qualifiedname>faiss::int64_rand</qualifiedname>
        <param>
          <type>int64_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="73" column="6" declfile="faiss/utils/random.h" declline="73" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4d573c579e00f4c78a8fa9a50a6a7100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::byte_rand</definition>
        <argsstring>(uint8_t *x, size_t n, int64_t seed)</argsstring>
        <name>byte_rand</name>
        <qualifiedname>faiss::byte_rand</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="74" column="6" declfile="faiss/utils/random.h" declline="74" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac394a01fe370ddc30c394cdea9527fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::int64_rand_max</definition>
        <argsstring>(int64_t *x, size_t n, uint64_t max, int64_t seed)</argsstring>
        <name>int64_rand_max</name>
        <qualifiedname>faiss::int64_rand_max</qualifiedname>
        <param>
          <type>int64_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="76" column="6" declfile="faiss/utils/random.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad40228bb4ba7a96e0fe801b9f9b7c900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::rand_perm</definition>
        <argsstring>(int *perm, size_t n, int64_t seed)</argsstring>
        <name>rand_perm</name>
        <qualifiedname>faiss::rand_perm</qualifiedname>
        <param>
          <type>int *</type>
          <declname>perm</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="79" column="6" declfile="faiss/utils/random.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7f900e002856f3db2295abd9d429369e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::rand_perm_splitmix64</definition>
        <argsstring>(int *perm, size_t n, int64_t seed)</argsstring>
        <name>rand_perm_splitmix64</name>
        <qualifiedname>faiss::rand_perm_splitmix64</qualifiedname>
        <param>
          <type>int *</type>
          <declname>perm</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="80" column="6" declfile="faiss/utils/random.h" declline="80" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a62eb905cf4895b293b0d10b3af2c8df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::rand_smooth_vectors</definition>
        <argsstring>(size_t n, size_t d, float *x, int64_t seed)</argsstring>
        <name>rand_smooth_vectors</name>
        <qualifiedname>faiss::rand_smooth_vectors</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="85" column="6" declfile="faiss/utils/random.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ae44e64d0db11cd08cfae98b8055628c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::min</definition>
        <argsstring>(simd16uint16 a, simd16uint16 b)</argsstring>
        <name>min</name>
        <qualifiedname>faiss::min</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="252" column="21" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1970d7e0fa67324947657d43a5bae9ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::max</definition>
        <argsstring>(simd16uint16 a, simd16uint16 b)</argsstring>
        <name>max</name>
        <qualifiedname>faiss::max</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="256" column="21" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a44550e642ff438af2de805eeaf7cda23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::combine2x2</definition>
        <argsstring>(simd16uint16 a, simd16uint16 b)</argsstring>
        <name>combine2x2</name>
        <qualifiedname>faiss::combine2x2</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="263" column="21" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="263" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a12cfacbde86018137e809d6f5a058d7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::cmp_ge32</definition>
        <argsstring>(simd16uint16 d0, simd16uint16 d1, simd16uint16 thr)</argsstring>
        <name>cmp_ge32</name>
        <qualifiedname>faiss::cmp_ge32</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>d0</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>d1</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>thr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="272" column="17" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="272" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab3ce07e3be6ce83bbc1a0bf229c707c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::cmp_le32</definition>
        <argsstring>(simd16uint16 d0, simd16uint16 d1, simd16uint16 thr)</argsstring>
        <name>cmp_le32</name>
        <qualifiedname>faiss::cmp_le32</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>d0</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>d1</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>thr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="288" column="17" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="288" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a79f085f2057b20c36dc9cf8405f8e9f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::hadd</definition>
        <argsstring>(const simd16uint16 &amp;a, const simd16uint16 &amp;b)</argsstring>
        <name>hadd</name>
        <qualifiedname>faiss::hadd</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="304" column="21" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a90eb04a513b09899c58d13685fd598da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::cmplt_min_max_fast</definition>
        <argsstring>(const simd16uint16 candidateValues, const simd16uint16 candidateIndices, const simd16uint16 currentValues, const simd16uint16 currentIndices, simd16uint16 &amp;minValues, simd16uint16 &amp;minIndices, simd16uint16 &amp;maxValues, simd16uint16 &amp;maxIndices)</argsstring>
        <name>cmplt_min_max_fast</name>
        <qualifiedname>faiss::cmplt_min_max_fast</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>candidateValues</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>candidateIndices</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>currentValues</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>currentIndices</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>minValues</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>minIndices</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>maxValues</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>maxIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="322" column="13" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="322" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afdc84fda618656633753330c92ad070e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
        <definition>simd32uint8 faiss::uint16_to_uint8_saturate</definition>
        <argsstring>(simd16uint16 a, simd16uint16 b)</argsstring>
        <name>uint16_to_uint8_saturate</name>
        <qualifiedname>faiss::uint16_to_uint8_saturate</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="490" column="20" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="490" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1a1ef7dc74c5b448482e503fb435400f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::get_MSBs</definition>
        <argsstring>(simd32uint8 a)</argsstring>
        <name>get_MSBs</name>
        <qualifiedname>faiss::get_MSBs</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>get most significant bit of each byte </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="495" column="17" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="495" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a376a50b76efda66b8e55b8deb5ad8dc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
        <definition>simd32uint8 faiss::blendv</definition>
        <argsstring>(simd32uint8 a, simd32uint8 b, simd32uint8 mask)</argsstring>
        <name>blendv</name>
        <qualifiedname>faiss::blendv</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>use MSB of each byte of mask to select a byte between a and b </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="500" column="20" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="500" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a103eff4021e297d8677535f2894b6515" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::cmplt_min_max_fast</definition>
        <argsstring>(const simd8uint32 candidateValues, const simd8uint32 candidateIndices, const simd8uint32 currentValues, const simd8uint32 currentIndices, simd8uint32 &amp;minValues, simd8uint32 &amp;minIndices, simd8uint32 &amp;maxValues, simd8uint32 &amp;maxIndices)</argsstring>
        <name>cmplt_min_max_fast</name>
        <qualifiedname>faiss::cmplt_min_max_fast</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref></type>
          <declname>candidateValues</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref></type>
          <declname>candidateIndices</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref></type>
          <declname>currentValues</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref></type>
          <declname>currentIndices</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref> &amp;</type>
          <declname>minValues</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref> &amp;</type>
          <declname>minIndices</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref> &amp;</type>
          <declname>maxValues</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref> &amp;</type>
          <declname>maxIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="592" column="13" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="592" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a40aa73417b26cd8c6872493a3c21b14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::hadd</definition>
        <argsstring>(simd8float32 a, simd8float32 b)</argsstring>
        <name>hadd</name>
        <qualifiedname>faiss::hadd</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="681" column="21" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="681" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1adfeefc42906233e7666584a566533021" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::unpacklo</definition>
        <argsstring>(simd8float32 a, simd8float32 b)</argsstring>
        <name>unpacklo</name>
        <qualifiedname>faiss::unpacklo</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="685" column="21" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="685" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6d471fb67aa075837cc9411f22fac9c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::unpackhi</definition>
        <argsstring>(simd8float32 a, simd8float32 b)</argsstring>
        <name>unpackhi</name>
        <qualifiedname>faiss::unpackhi</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="689" column="21" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="689" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aafdd3366a94e78d8ef74c58c55ea4bbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::fmadd</definition>
        <argsstring>(simd8float32 a, simd8float32 b, simd8float32 c)</argsstring>
        <name>fmadd</name>
        <qualifiedname>faiss::fmadd</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="694" column="21" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="694" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad293a4ccdd167b4b91087a5705d36c3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::cmplt_and_blend_inplace</definition>
        <argsstring>(const simd8float32 candidateValues, const simd8uint32 candidateIndices, simd8float32 &amp;lowestValues, simd8uint32 &amp;lowestIndices)</argsstring>
        <name>cmplt_and_blend_inplace</name>
        <qualifiedname>faiss::cmplt_and_blend_inplace</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>candidateValues</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref></type>
          <declname>candidateIndices</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>lowestValues</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref> &amp;</type>
          <declname>lowestIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="729" column="13" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="729" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9cda5f7e3cccf87b6cef0042a341d70b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::cmplt_min_max_fast</definition>
        <argsstring>(const simd8float32 candidateValues, const simd8uint32 candidateIndices, const simd8float32 currentValues, const simd8uint32 currentIndices, simd8float32 &amp;minValues, simd8uint32 &amp;minIndices, simd8float32 &amp;maxValues, simd8uint32 &amp;maxIndices)</argsstring>
        <name>cmplt_min_max_fast</name>
        <qualifiedname>faiss::cmplt_min_max_fast</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>candidateValues</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref></type>
          <declname>candidateIndices</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>currentValues</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref></type>
          <declname>currentIndices</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>minValues</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref> &amp;</type>
          <declname>minIndices</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>maxValues</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8uint32" kindref="compound">simd8uint32</ref> &amp;</type>
          <declname>maxIndices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="754" column="13" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="754" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a556920b8f676c3cce4dcb3c512ff4824" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::combine4x2</definition>
        <argsstring>(simd32uint16 a, simd32uint16 b)</argsstring>
        <name>combine4x2</name>
        <qualifiedname>faiss::combine4x2</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint16" kindref="compound">simd32uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint16" kindref="compound">simd32uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx512.h" line="210" column="21" bodyfile="faiss/utils/simdlib_avx512.h" bodystart="210" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ade3c1b83444c4ae5051eefa1263adaca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::min</definition>
        <argsstring>(const simd16uint16 &amp;av, const simd16uint16 &amp;bv)</argsstring>
        <name>min</name>
        <qualifiedname>faiss::min</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>av</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>bv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="288" column="21" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a94593d5bf8da8904666020693959166c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::max</definition>
        <argsstring>(const simd16uint16 &amp;av, const simd16uint16 &amp;bv)</argsstring>
        <name>max</name>
        <qualifiedname>faiss::max</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>av</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>bv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="293" column="21" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af86b965844d92f2549c492d6831d0796" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::combine2x2</definition>
        <argsstring>(const simd16uint16 &amp;a, const simd16uint16 &amp;b)</argsstring>
        <name>combine2x2</name>
        <qualifiedname>faiss::combine2x2</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="301" column="21" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="301" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aea6378d42540886a794d30add9701220" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::cmp_ge32</definition>
        <argsstring>(const simd16uint16 &amp;d0, const simd16uint16 &amp;d1, const simd16uint16 &amp;thr)</argsstring>
        <name>cmp_ge32</name>
        <qualifiedname>faiss::cmp_ge32</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>d0</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>thr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="312" column="17" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="312" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a39039b1bf15d79603f4ceb8469021e51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::cmp_le32</definition>
        <argsstring>(const simd16uint16 &amp;d0, const simd16uint16 &amp;d1, const simd16uint16 &amp;thr)</argsstring>
        <name>cmp_le32</name>
        <qualifiedname>faiss::cmp_le32</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>d0</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>d1</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>thr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="328" column="17" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="328" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aea0f6a537a28bcb5133211212513f7f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
        <definition>simd32uint8 faiss::uint16_to_uint8_saturate</definition>
        <argsstring>(const simd16uint16 &amp;a, const simd16uint16 &amp;b)</argsstring>
        <name>uint16_to_uint8_saturate</name>
        <qualifiedname>faiss::uint16_to_uint8_saturate</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="566" column="20" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="566" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abe20bc347c6b89b6673db250922da5f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::get_MSBs</definition>
        <argsstring>(const simd32uint8 &amp;a)</argsstring>
        <name>get_MSBs</name>
        <qualifiedname>faiss::get_MSBs</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>get most significant bit of each byte </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="583" column="17" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="583" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8fd4605fb081ee3572fe7362c19f53a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
        <definition>simd32uint8 faiss::blendv</definition>
        <argsstring>(const simd32uint8 &amp;a, const simd32uint8 &amp;b, const simd32uint8 &amp;mask)</argsstring>
        <name>blendv</name>
        <qualifiedname>faiss::blendv</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>use MSB of each byte of mask to select a byte between a and b </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="594" column="20" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="594" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a91611066b2685fd2aa236551026c371e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::hadd</definition>
        <argsstring>(const simd8float32 &amp;a, const simd8float32 &amp;b)</argsstring>
        <name>hadd</name>
        <qualifiedname>faiss::hadd</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="839" column="21" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="839" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a554df30b43cdf9d435fd91cd2135ed1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::unpacklo</definition>
        <argsstring>(const simd8float32 &amp;a, const simd8float32 &amp;b)</argsstring>
        <name>unpacklo</name>
        <qualifiedname>faiss::unpacklo</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="854" column="21" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="854" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a61c7690da3feacac77f0fea9d1ce3109" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::unpackhi</definition>
        <argsstring>(const simd8float32 &amp;a, const simd8float32 &amp;b)</argsstring>
        <name>unpackhi</name>
        <qualifiedname>faiss::unpackhi</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="869" column="21" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="869" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a93b8f9e8a1da01d0b335d36a5c2fdf2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::fmadd</definition>
        <argsstring>(const simd8float32 &amp;a, const simd8float32 &amp;b, const simd8float32 &amp;c)</argsstring>
        <name>fmadd</name>
        <qualifiedname>faiss::fmadd</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_emulated.h" line="885" column="21" bodyfile="faiss/utils/simdlib_emulated.h" bodystart="885" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a027b726c606d329c30840e51b539ddb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_argsort</definition>
        <argsstring>(size_t n, const float *vals, size_t *perm)</argsstring>
        <name>fvec_argsort</name>
        <qualifiedname>faiss::fvec_argsort</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indirect sort of a floating-point array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vals</parametername>
</parameternamelist>
<parameterdescription>
<para>array to sort, size n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm</parametername>
</parameternamelist>
<parameterdescription>
<para>output: permutation of [0..n-1], st. vals[perm[i + 1]] &gt;= vals[perm[i]] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="21" column="6" declfile="faiss/utils/sorting.h" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0e967dd8492dc074a7d6950d437e53a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_argsort_parallel</definition>
        <argsstring>(size_t n, const float *vals, size_t *perm)</argsstring>
        <name>fvec_argsort_parallel</name>
        <qualifiedname>faiss::fvec_argsort_parallel</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as fvec_argsort, parallelized </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="24" column="6" declfile="faiss/utils/sorting.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac3b63b77f8bb7620bf2be5e9f42f12ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bucket_sort</definition>
        <argsstring>(size_t nval, const uint64_t *vals, uint64_t nbucket, int64_t *lims, int64_t *perm, int nt=0)</argsstring>
        <name>bucket_sort</name>
        <qualifiedname>faiss::bucket_sort</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nval</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>nbucket</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>lims</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>perm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nt</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bucket sort of a list of values</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vals</parametername>
</parameternamelist>
<parameterdescription>
<para>values to sort, size nval, max value nbucket - 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lims</parametername>
</parameternamelist>
<parameterdescription>
<para>output limits of buckets, size nbucket + 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>perm</parametername>
</parameternamelist>
<parameterdescription>
<para>output buckets, the elements of bucket i are in perm[lims[i]:lims[i + 1]] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nt</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads (0 = pure sequential code) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="37" column="6" declfile="faiss/utils/sorting.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1bd7216cbe1e5e6d441088e6f3c979e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::matrix_bucket_sort_inplace</definition>
        <argsstring>(size_t nrow, size_t ncol, int32_t *vals, int32_t nbucket, int64_t *lims, int nt=0)</argsstring>
        <name>matrix_bucket_sort_inplace</name>
        <qualifiedname>faiss::matrix_bucket_sort_inplace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncol</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>nbucket</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>lims</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nt</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>in-place bucket sort (with attention to memory=&gt;int32) on input the values are in a nrow * col matrix we want to store the row numbers in the output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vals</parametername>
</parameternamelist>
<parameterdescription>
<para>positive values to sort, size nrow * ncol, max value nbucket - 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lims</parametername>
</parameternamelist>
<parameterdescription>
<para>output limits of buckets, size nbucket + 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nt</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads (0 = pure sequential code) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="54" column="6" declfile="faiss/utils/sorting.h" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a5374d7faee70e3977c0293ee0997b964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::matrix_bucket_sort_inplace</definition>
        <argsstring>(size_t nrow, size_t ncol, int64_t *vals, int64_t nbucket, int64_t *lims, int nt=0)</argsstring>
        <name>matrix_bucket_sort_inplace</name>
        <qualifiedname>faiss::matrix_bucket_sort_inplace</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nrow</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncol</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbucket</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>lims</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nt</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>same with int64 elements </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="63" column="6" declfile="faiss/utils/sorting.h" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a23ad4ba1ce30a52a3f1479a3dc9b6503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hashtable_int64_to_int64_init</definition>
        <argsstring>(int log2_capacity, int64_t *tab)</argsstring>
        <name>hashtable_int64_to_int64_init</name>
        <qualifiedname>faiss::hashtable_int64_to_int64_init</qualifiedname>
        <param>
          <type>int</type>
          <declname>log2_capacity</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>tab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hashtable implementation for int64 -&gt; int64 with external storage implemented for fast batch add and lookup.</para>
<para>tab is of size 2 * (1 &lt;&lt; log2_capacity) n is the number of elements to add or search</para>
<para>adding several values in a same batch: an arbitrary one gets added in different batches: the newer batch overwrites. raises an exception if capacity is exhausted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="82" column="6" declfile="faiss/utils/sorting.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a619e1b624d0c6b0a5f833a4744f325a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hashtable_int64_to_int64_add</definition>
        <argsstring>(int log2_capacity, int64_t *tab, size_t n, const int64_t *keys, const int64_t *vals)</argsstring>
        <name>hashtable_int64_to_int64_add</name>
        <qualifiedname>faiss::hashtable_int64_to_int64_add</qualifiedname>
        <param>
          <type>int</type>
          <declname>log2_capacity</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>tab</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="84" column="6" declfile="faiss/utils/sorting.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8e9fac1f36f69b1b18b64cc3e4147101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hashtable_int64_to_int64_lookup</definition>
        <argsstring>(int log2_capacity, const int64_t *tab, size_t n, const int64_t *keys, int64_t *vals)</argsstring>
        <name>hashtable_int64_to_int64_lookup</name>
        <qualifiedname>faiss::hashtable_int64_to_int64_lookup</qualifiedname>
        <param>
          <type>int</type>
          <declname>log2_capacity</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>tab</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>keys</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/sorting.h" line="91" column="6" declfile="faiss/utils/sorting.h" declline="91" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a2356cfad1b4e1bd20c31fdf97e6429d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::get_compile_options</definition>
        <argsstring>()</argsstring>
        <name>get_compile_options</name>
        <qualifiedname>faiss::get_compile_options</qualifiedname>
        <briefdescription>
<para>get compile options </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="34" column="13" declfile="faiss/utils/utils.h" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7492814a6d7dd80de1e5a375758534b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string faiss::get_version</definition>
        <argsstring>()</argsstring>
        <name>get_version</name>
        <qualifiedname>faiss::get_version</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="41" column="13" declfile="faiss/utils/utils.h" declline="41" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af2a71f7d5402ae02ce169a4cc83020eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double faiss::getmillisecs</definition>
        <argsstring>()</argsstring>
        <name>getmillisecs</name>
        <qualifiedname>faiss::getmillisecs</qualifiedname>
        <briefdescription>
<para>ms elapsed since some arbitrary epoch </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="44" column="8" declfile="faiss/utils/utils.h" declline="44" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa3af5769b0b649f112332a874c64d361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::get_mem_usage_kb</definition>
        <argsstring>()</argsstring>
        <name>get_mem_usage_kb</name>
        <qualifiedname>faiss::get_mem_usage_kb</qualifiedname>
        <briefdescription>
<para>get current RSS usage in kB </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="47" column="8" declfile="faiss/utils/utils.h" declline="47" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a090355c2725c425a511a367cbfe41262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::get_cycles</definition>
        <argsstring>()</argsstring>
        <name>get_cycles</name>
        <qualifiedname>faiss::get_cycles</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="49" column="10" declfile="faiss/utils/utils.h" declline="49" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab7c6da3d6915a010d5d3074d93878ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::reflection</definition>
        <argsstring>(const float *u, float *x, size_t n, size_t d, size_t nu)</argsstring>
        <name>reflection</name>
        <qualifiedname>faiss::reflection</qualifiedname>
        <param>
          <type>const float *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="56" column="6" declfile="faiss/utils/utils.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afb68fe89ad5e948974da1b70d7b4157c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::matrix_qr</definition>
        <argsstring>(int m, int n, float *a)</argsstring>
        <name>matrix_qr</name>
        <qualifiedname>faiss::matrix_qr</qualifiedname>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute the Q of the QR decomposition for m &gt; n <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size n * m: input matrix and output Q </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="61" column="6" declfile="faiss/utils/utils.h" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad5827240bc67d6f8a612ba8761b34714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ranklist_handle_ties</definition>
        <argsstring>(int k, int64_t *idx, const float *dis)</argsstring>
        <name>ranklist_handle_ties</name>
        <qualifiedname>faiss::ranklist_handle_ties</qualifiedname>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>distances are supposed to be sorted. Sorts indices with same distance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="64" column="6" declfile="faiss/utils/utils.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a104f2c4626def41c53ad1ca0027741cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::ranklist_intersection_size</definition>
        <argsstring>(size_t k1, const int64_t *v1, size_t k2, const int64_t *v2)</argsstring>
        <name>ranklist_intersection_size</name>
        <qualifiedname>faiss::ranklist_intersection_size</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>count the number of common elements between v1 and v2 algorithm = sorting + bissection to avoid double-counting duplicates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="69" column="8" declfile="faiss/utils/utils.h" declline="69" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7690bafb56c991da908ee11822c7a8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::merge_result_table_with</definition>
        <argsstring>(size_t n, size_t k, int64_t *I0, float *D0, const int64_t *I1, const float *D1, bool keep_min=true, int64_t translation=0)</argsstring>
        <name>merge_result_table_with</name>
        <qualifiedname>faiss::merge_result_table_with</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>I0</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>D0</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>I1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>D1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>translation</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>merge a result table into another one</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I0</parametername>
<parametername>D0</parametername>
</parameternamelist>
<parameterdescription>
<para>first result table, size (n, k) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I1</parametername>
<parametername>D1</parametername>
</parameternamelist>
<parameterdescription>
<para>second result table, size (n, k) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep_min</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, keep min values, otherwise keep max </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>translation</parametername>
</parameternamelist>
<parameterdescription>
<para>add this value to all I1&apos;s indexes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nb of values that were taken from the second table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="83" column="8" declfile="faiss/utils/utils.h" declline="83" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6bd11ae949782797ec7ad9e6cf562328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double faiss::imbalance_factor</definition>
        <argsstring>(int64_t n, int k, const int64_t *assign)</argsstring>
        <name>imbalance_factor</name>
        <qualifiedname>faiss::imbalance_factor</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>assign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>a balanced assignment has a IF of 1, a completely unbalanced assignment has an IF = k. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="95" column="8" declfile="faiss/utils/utils.h" declline="95" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ae6e153c78a45f44e454afe6778957a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double faiss::imbalance_factor</definition>
        <argsstring>(int k, const int64_t *hist)</argsstring>
        <name>imbalance_factor</name>
        <qualifiedname>faiss::imbalance_factor</qualifiedname>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
<para>same, takes a histogram as input </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="98" column="8" declfile="faiss/utils/utils.h" declline="98" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7bea462108bee98d8d5859b51ec4db8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::ivec_hist</definition>
        <argsstring>(size_t n, const int *v, int vmax, int *hist)</argsstring>
        <name>ivec_hist</name>
        <qualifiedname>faiss::ivec_hist</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
<para>compute histogram on v </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="101" column="5" declfile="faiss/utils/utils.h" declline="101" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a154a47857ed321b9db91122770a16e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bincode_hist</definition>
        <argsstring>(size_t n, size_t nbits, const uint8_t *codes, int *hist)</argsstring>
        <name>bincode_hist</name>
        <qualifiedname>faiss::bincode_hist</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute histogram of bits on a code array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>size(n, nbits / 8) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hist</parametername>
</parameternamelist>
<parameterdescription>
<para>size(nbits): nb of 1s in the array of codes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="108" column="6" declfile="faiss/utils/utils.h" declline="108" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9961a06bc9beb19366bb0437e11ac962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::ivec_checksum</definition>
        <argsstring>(size_t n, const int32_t *a)</argsstring>
        <name>ivec_checksum</name>
        <qualifiedname>faiss::ivec_checksum</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>compute a checksum on a table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="111" column="10" declfile="faiss/utils/utils.h" declline="111" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ade786759a9b5dbd0b2329966756c0b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::bvec_checksum</definition>
        <argsstring>(size_t n, const uint8_t *a)</argsstring>
        <name>bvec_checksum</name>
        <qualifiedname>faiss::bvec_checksum</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>compute a checksum on a table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="114" column="10" declfile="faiss/utils/utils.h" declline="114" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a2de355ba1527a128fdd6895a4a9cdd7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bvecs_checksum</definition>
        <argsstring>(size_t n, size_t d, const uint8_t *a, uint64_t *cs)</argsstring>
        <name>bvecs_checksum</name>
        <qualifiedname>faiss::bvecs_checksum</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute checksums for the rows of a matrix</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>size per row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix to handle, size n * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>output checksums, size n </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="123" column="6" declfile="faiss/utils/utils.h" declline="123" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a184bb08545d1f469662b75b2f33a899f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const float *</type>
        <definition>const float * faiss::fvecs_maybe_subsample</definition>
        <argsstring>(size_t d, size_t *n, size_t nmax, const float *x, bool verbose=false, int64_t seed=1234)</argsstring>
        <name>fvecs_maybe_subsample</name>
        <qualifiedname>faiss::fvecs_maybe_subsample</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nmax</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
          <defval>1234</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>random subsamples a set of vectors if there are too many of them</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>on input: nb of input vectors, output: nb of output vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmax</parametername>
</parameternamelist>
<parameterdescription>
<para>max nb of vectors to keep </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input array, size *n-by-d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>random seed to use for sampling </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>x or an array allocated with new [] with *n vectors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="134" column="13" declfile="faiss/utils/utils.h" declline="134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac8260e10cfeed08a4344b85845773e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::binary_to_real</definition>
        <argsstring>(size_t d, const uint8_t *x_in, float *x_out)</argsstring>
        <name>binary_to_real</name>
        <qualifiedname>faiss::binary_to_real</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x_in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert binary vector to +1/-1 valued float vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vector (multiple of 8) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_in</parametername>
</parameternamelist>
<parameterdescription>
<para>input binary vector (uint8_t table of size d / 8) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output float vector (float table of size d) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="148" column="6" declfile="faiss/utils/utils.h" declline="148" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab491c9e2f77a750c9f0324bfe00e3e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::real_to_binary</definition>
        <argsstring>(size_t d, const float *x_in, uint8_t *x_out)</argsstring>
        <name>real_to_binary</name>
        <qualifiedname>faiss::real_to_binary</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x_in</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>x_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert float vector to binary vector. Components &gt; 0 are converted to 1, others to 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vector (multiple of 8) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_in</parametername>
</parameternamelist>
<parameterdescription>
<para>input float vector (float table of size d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output binary vector (uint8_t table of size d / 8) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="157" column="6" declfile="faiss/utils/utils.h" declline="157" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0e26e4710a7c276f46b730d8ab6ac1e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::hash_bytes</definition>
        <argsstring>(const uint8_t *bytes, int64_t n)</argsstring>
        <name>hash_bytes</name>
        <qualifiedname>faiss::hash_bytes</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A reasonable hashing function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="160" column="10" declfile="faiss/utils/utils.h" declline="160" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad86caef545c6a7672422d7d34c03f446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::check_openmp</definition>
        <argsstring>()</argsstring>
        <name>check_openmp</name>
        <qualifiedname>faiss::check_openmp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether OpenMP annotations were respected. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="163" column="6" declfile="faiss/utils/utils.h" declline="163" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Implementation of k-means clustering with many variants.</para>
<para>Copyright (c) Facebook, Inc. and its affiliates.</para>
<para>This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.</para>
<para><ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> is intended to define a subset of vectors to handle (for removal or as subset to search)</para>
<para>PQ4 SIMD packing and accumulation functions</para>
<para>The basic kernel accumulates nq query vectors with bbs = nb * 2 * 16 vectors and produces an output matrix for that. It is interesting for nq * nb &lt;= 4, otherwise register spilling becomes too large.</para>
<para>The implementation of these functions is spread over 3 cpp files to reduce parallel compile times. Templates are instantiated explicitly.</para>
<para>This file contains callbacks for kernels that compute distances.</para>
<para>Throughout the library, vectors are provided as float * pointers. Most algorithms can be optimized when several vectors are processed (added/searched) together in a batch. In this case, they are passed in as a matrix. When n vectors of size d are provided as float * x, component j of vector i is</para>
<para>x[ i * d + j ]</para>
<para>where 0 &lt;= i &lt; n and 0 &lt;= j &lt; d. In other words, matrices are always compact. When specifying the size of the matrix, we call it an n*d matrix, which implies a row-major storage.</para>
<para>I/O functions can read/write to a filename, a file handle or to an object that abstracts the medium.</para>
<para>The read functions return objects that should be deallocated with delete. All references within these objectes are owned by the object.</para>
<para>Definition of inverted lists + a few common classes that implement the interface.</para>
<para>Since IVF (inverted file) indexes are of so much use for large-scale use cases, we group a few functions related to them in this small library. Most functions work both on IndexIVFs and IndexIVFs embedded within an <ref refid="structfaiss_1_1IndexPreTransform" kindref="compound">IndexPreTransform</ref>.</para>
<para>In this file are the implementations of extra metrics beyond L2 and inner product</para>
<para>Implements a few neural net layers, mainly to support <ref refid="structfaiss_1_1QINCo" kindref="compound">QINCo</ref></para>
<para>Defines a few objects that apply transformations to a set of vectors Often these are pre-processing steps. </para>
    </detaileddescription>
    <location file="faiss/AutoTune.h" line="19" column="1"/>
  </compounddef>
</doxygen>
