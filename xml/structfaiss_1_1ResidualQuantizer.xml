<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structfaiss_1_1ResidualQuantizer" kind="struct" language="C++" prot="public">
    <compoundname>faiss::ResidualQuantizer</compoundname>
    <basecompoundref refid="structfaiss_1_1AdditiveQuantizer" prot="public" virt="non-virtual">faiss::AdditiveQuantizer</basecompoundref>
    <includes refid="ResidualQuantizer_8h" local="no">ResidualQuantizer.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfaiss_1_1ResidualQuantizer_1a9d167678afe137a3c71439fa3cc3ea03" prot="public" static="no">
        <type>int</type>
        <definition>using faiss::ResidualQuantizer::train_type_t =  int</definition>
        <argsstring></argsstring>
        <name>train_type_t</name>
        <qualifiedname>faiss::ResidualQuantizer::train_type_t</qualifiedname>
        <briefdescription>
<para>initialization </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="31" column="5" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="enum" id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437d" prot="public" static="no" strong="no">
        <type></type>
        <name>Search_type_t</name>
        <qualifiedname>faiss::AdditiveQuantizer::Search_type_t</qualifiedname>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437daad867ba8b63c1a5e9a1ece814a0115ff" prot="public">
          <name>ST_decompress</name>
          <briefdescription>
<para>decompress database vector </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da026ae767f6f750ba8900ebae16a30ea3" prot="public">
          <name>ST_LUT_nonorm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>use a LUT, don&apos;t include norms (OK for IP or normalized vectors) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da1a74e7ab83487c197554d76b0c3943bd" prot="public">
          <name>ST_norm_from_LUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>compute the norms from the look-up tables (cost is in O(M^2)) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da12cbc8c410c5c6d434056d7d05d0899a" prot="public">
          <name>ST_norm_float</name>
          <briefdescription>
<para>use a LUT, and store float32 norm with the vectors </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da3e4ce3de42ff657f037bd8f8b1b761fb" prot="public">
          <name>ST_norm_qint8</name>
          <briefdescription>
<para>use a LUT, and store 8bit-quantized norm </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437dad6fc8bf97ff3082204873faefe4ce643" prot="public">
          <name>ST_norm_qint4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da30d771ce35280990ad8ee410761b44ed" prot="public">
          <name>ST_norm_cqint8</name>
          <briefdescription>
<para>use a LUT, and store non-uniform quantized norm </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da74f8a53f2245497592d362c8a58acca6" prot="public">
          <name>ST_norm_cqint4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da3f729a1c733fa6d540887a288beb1da9" prot="public">
          <name>ST_norm_lsq2x4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>use a 2x4 bits lsq as norm quantizer (for fast scan) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da897fcce2694ddcb88561ccd30967ff18" prot="public">
          <name>ST_norm_rq2x4</name>
          <briefdescription>
<para>use a 2x4 bits rq as norm quantizer (for fast scan) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Encodes how search is performed and how vectors are encoded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="71" column="5" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="71" bodyend="86"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1a5c1c8a9eb29fcaeb0eab565bfd2f7eef" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1ResidualQuantizer_1a9d167678afe137a3c71439fa3cc3ea03" kindref="member">train_type_t</ref></type>
        <definition>train_type_t faiss::ResidualQuantizer::train_type</definition>
        <argsstring></argsstring>
        <name>train_type</name>
        <qualifiedname>faiss::ResidualQuantizer::train_type</qualifiedname>
        <initializer>= <ref refid="structfaiss_1_1ResidualQuantizer_1ad79abf8a589cbcc6089cc5095e17e226" kindref="member">Train_progressive_dim</ref></initializer>
        <briefdescription>
<para>Binary or of the Train_* flags below. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="34" column="18" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1a4b1efc57c48c90f0e4b0f52822bf871b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::ResidualQuantizer::niter_codebook_refine</definition>
        <argsstring></argsstring>
        <name>niter_codebook_refine</name>
        <qualifiedname>faiss::ResidualQuantizer::niter_codebook_refine</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
<para>number of iterations for codebook refinement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="46" column="9" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1adc079ef913e819d33584f11cb50be092" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::ResidualQuantizer::max_beam_size</definition>
        <argsstring></argsstring>
        <name>max_beam_size</name>
        <qualifiedname>faiss::ResidualQuantizer::max_beam_size</qualifiedname>
        <initializer>= 5</initializer>
        <briefdescription>
<para>beam size used for training and for encoding </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="57" column="9" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1acd4c6a23a96bf055337de4a5d8addcca" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::ResidualQuantizer::use_beam_LUT</definition>
        <argsstring></argsstring>
        <name>use_beam_LUT</name>
        <qualifiedname>faiss::ResidualQuantizer::use_beam_LUT</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>use LUT for beam search </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="60" column="9" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1ad44f8d7e4bffb1faaa36f3f03133e47f" prot="public" static="no" mutable="no">
        <type>ApproxTopK_mode_t</type>
        <definition>ApproxTopK_mode_t faiss::ResidualQuantizer::approx_topk_mode</definition>
        <argsstring></argsstring>
        <name>approx_topk_mode</name>
        <qualifiedname>faiss::ResidualQuantizer::approx_topk_mode</qualifiedname>
        <initializer>= ApproxTopK_mode_t::EXACT_TOPK</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Currently used mode of approximate min-k computations. Default value is EXACT_TOPK. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="64" column="23" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1a2b108691bcd6261835102fbe37a76c4d" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1ProgressiveDimClusteringParameters" kindref="compound">ProgressiveDimClusteringParameters</ref></type>
        <definition>ProgressiveDimClusteringParameters faiss::ResidualQuantizer::cp</definition>
        <argsstring></argsstring>
        <name>cp</name>
        <qualifiedname>faiss::ResidualQuantizer::cp</qualifiedname>
        <briefdescription>
<para>clustering parameters </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="67" column="40" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1a7e962b48662bcc7fd9531ff6bee06430" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1ProgressiveDimIndexFactory" kindref="compound">ProgressiveDimIndexFactory</ref> *</type>
        <definition>ProgressiveDimIndexFactory* faiss::ResidualQuantizer::assign_index_factory</definition>
        <argsstring></argsstring>
        <name>assign_index_factory</name>
        <qualifiedname>faiss::ResidualQuantizer::assign_index_factory</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>if non-NULL, use this index for assignment </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="70" column="32" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a4aeef9f31288a7c28c02a2582616a660" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::AdditiveQuantizer::M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <qualifiedname>faiss::AdditiveQuantizer::M</qualifiedname>
        <briefdescription>
<para>number of codebooks </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="27" column="12" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a3eda6b9cc0ffa5ce141683f0a6e27349" prot="public" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; faiss::AdditiveQuantizer::nbits</definition>
        <argsstring></argsstring>
        <name>nbits</name>
        <qualifiedname>faiss::AdditiveQuantizer::nbits</qualifiedname>
        <briefdescription>
<para>bits for each step </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="28" column="17" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a1bd2810ad54fb243b666e56f5d505d3f" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::AdditiveQuantizer::codebooks</definition>
        <argsstring></argsstring>
        <name>codebooks</name>
        <qualifiedname>faiss::AdditiveQuantizer::codebooks</qualifiedname>
        <briefdescription>
<para>codebooks </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="29" column="17" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a5cf9516480f6fd9912d4b0d323109088" prot="public" static="no" mutable="no">
        <type>std::vector&lt; uint64_t &gt;</type>
        <definition>std::vector&lt;uint64_t&gt; faiss::AdditiveQuantizer::codebook_offsets</definition>
        <argsstring></argsstring>
        <name>codebook_offsets</name>
        <qualifiedname>faiss::AdditiveQuantizer::codebook_offsets</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>codebook #1 is stored in rows codebook_offsets[i]:codebook_offsets[i+1] in the codebooks table of size total_codebook_size by d </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="34" column="17" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a3e118ab9d0d1e83b43bbb264ec1d27a1" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::AdditiveQuantizer::tot_bits</definition>
        <argsstring></argsstring>
        <name>tot_bits</name>
        <qualifiedname>faiss::AdditiveQuantizer::tot_bits</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>total number of bits (indexes + norms) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="35" column="12" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1aba72956d49ce4b06638c3e085e54d4b3" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::AdditiveQuantizer::norm_bits</definition>
        <argsstring></argsstring>
        <name>norm_bits</name>
        <qualifiedname>faiss::AdditiveQuantizer::norm_bits</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>bits allocated for the norms </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="36" column="12" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a609e902b891025b69eb7442a54a59084" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::AdditiveQuantizer::total_codebook_size</definition>
        <argsstring></argsstring>
        <name>total_codebook_size</name>
        <qualifiedname>faiss::AdditiveQuantizer::total_codebook_size</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>size of the codebook in vectors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="37" column="12" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a4c70d7c0f02dba31120d2d3c01982482" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::AdditiveQuantizer::only_8bit</definition>
        <argsstring></argsstring>
        <name>only_8bit</name>
        <qualifiedname>faiss::AdditiveQuantizer::only_8bit</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>are all nbits = 8 (use faster decoder) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="38" column="10" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a4774f0efe877d34c5c98c2bef4ae1912" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::AdditiveQuantizer::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <qualifiedname>faiss::AdditiveQuantizer::verbose</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>verbose during training? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="40" column="10" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a6bc5248e11416924b7d7d73e53672465" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::AdditiveQuantizer::is_trained</definition>
        <argsstring></argsstring>
        <name>is_trained</name>
        <qualifiedname>faiss::AdditiveQuantizer::is_trained</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>is trained or not </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="41" column="10" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a345684bf40fb4395fb0bc29fa0708424" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::AdditiveQuantizer::norm_tabs</definition>
        <argsstring></argsstring>
        <name>norm_tabs</name>
        <qualifiedname>faiss::AdditiveQuantizer::norm_tabs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>auxiliary data for ST_norm_lsq2x4 and ST_norm_rq2x4 store norms of codebook entries for 4-bit fastscan </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="45" column="17" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1aa5fe31c6a8b80a5bf03bd72bc7744def" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1IndexFlat1D" kindref="compound">IndexFlat1D</ref></type>
        <definition>IndexFlat1D faiss::AdditiveQuantizer::qnorm</definition>
        <argsstring></argsstring>
        <name>qnorm</name>
        <qualifiedname>faiss::AdditiveQuantizer::qnorm</qualifiedname>
        <briefdescription>
<para>store and search norms </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="46" column="17" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1af366aff9e6f592413920232add8a4658" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::AdditiveQuantizer::centroid_norms</definition>
        <argsstring></argsstring>
        <name>centroid_norms</name>
        <qualifiedname>faiss::AdditiveQuantizer::centroid_norms</qualifiedname>
        <briefdescription>
<para>norms of all codebook entries (size total_codebook_size) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="51" column="17" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a8a7bf5068face76845f039137af0e81d" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::AdditiveQuantizer::codebook_cross_products</definition>
        <argsstring></argsstring>
        <name>codebook_cross_products</name>
        <qualifiedname>faiss::AdditiveQuantizer::codebook_cross_products</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>dot products of all codebook entries with the previous codebooks size sum(codebook_offsets[m] * 2^nbits[m], m=0..M-1) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="55" column="17" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a2576ad822575071941166ce96cd14d72" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::AdditiveQuantizer::max_mem_distances</definition>
        <argsstring></argsstring>
        <name>max_mem_distances</name>
        <qualifiedname>faiss::AdditiveQuantizer::max_mem_distances</qualifiedname>
        <initializer>= 5 * (size_t(1) &lt;&lt; 30)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>norms and distance matrixes with beam search can get large, so use this to control for the amount of memory that can be allocated </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="59" column="12" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a288c9459e71889972f15cbbb74312a92" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437d" kindref="member">Search_type_t</ref></type>
        <definition>Search_type_t faiss::AdditiveQuantizer::search_type</definition>
        <argsstring></argsstring>
        <name>search_type</name>
        <qualifiedname>faiss::AdditiveQuantizer::search_type</qualifiedname>
        <briefdescription>
<para>Also determines what&apos;s in the codes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="158" column="19" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a648e012d823d2baf4947d4d2ce64af80" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float faiss::AdditiveQuantizer::norm_min</definition>
        <argsstring></argsstring>
        <name>norm_min</name>
        <qualifiedname>faiss::AdditiveQuantizer::norm_min</qualifiedname>
        <initializer>= NAN</initializer>
        <briefdescription>
<para>min/max for quantization of norms </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="161" column="11" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1AdditiveQuantizer_1a093437a71a2fd301cf10f2f156f39249" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float faiss::AdditiveQuantizer::norm_max</definition>
        <argsstring></argsstring>
        <name>norm_max</name>
        <qualifiedname>faiss::AdditiveQuantizer::norm_max</qualifiedname>
        <initializer>= NAN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="161" column="21" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Quantizer_1a416da1bab43fefa36563210a86298a75" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::Quantizer::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>faiss::Quantizer::d</qualifiedname>
        <briefdescription>
<para>size of the input vectors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/Quantizer.h" line="16" column="12" bodyfile="faiss/impl/Quantizer.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Quantizer_1a25120fac0a15262b52e54391cc642850" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::Quantizer::code_size</definition>
        <argsstring></argsstring>
        <name>code_size</name>
        <qualifiedname>faiss::Quantizer::code_size</qualifiedname>
        <briefdescription>
<para>bytes per indexed vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/Quantizer.h" line="17" column="12" bodyfile="faiss/impl/Quantizer.h" bodystart="17" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1aeb2ac07bd05b9248e9a63fd03f2a84eb" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int faiss::ResidualQuantizer::Train_default</definition>
        <argsstring></argsstring>
        <name>Train_default</name>
        <qualifiedname>faiss::ResidualQuantizer::Train_default</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>regular k-means (minimal amount of computation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="37" column="22" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1ad79abf8a589cbcc6089cc5095e17e226" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int faiss::ResidualQuantizer::Train_progressive_dim</definition>
        <argsstring></argsstring>
        <name>Train_progressive_dim</name>
        <qualifiedname>faiss::ResidualQuantizer::Train_progressive_dim</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
<para>progressive dim clustering (set by default) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="40" column="22" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1a8e098c1f307cbba92980add4316a9acf" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int faiss::ResidualQuantizer::Train_refine_codebook</definition>
        <argsstring></argsstring>
        <name>Train_refine_codebook</name>
        <qualifiedname>faiss::ResidualQuantizer::Train_refine_codebook</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
<para>do a few iterations of codebook refinement after first level estimation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="43" column="22" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1a07224ef7fa70036568a01649152475a9" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int faiss::ResidualQuantizer::Train_top_beam</definition>
        <argsstring></argsstring>
        <name>Train_top_beam</name>
        <qualifiedname>faiss::ResidualQuantizer::Train_top_beam</qualifiedname>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set this bit on train_type if beam is to be trained only on the first element of the beam (faster but less accurate) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="50" column="22" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1ResidualQuantizer_1adc71afaf88daa23926c3a0a25755406d" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int faiss::ResidualQuantizer::Skip_codebook_tables</definition>
        <argsstring></argsstring>
        <name>Skip_codebook_tables</name>
        <qualifiedname>faiss::ResidualQuantizer::Skip_codebook_tables</qualifiedname>
        <initializer>= 2048</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set this bit to <emphasis>not</emphasis> autmatically compute the codebook tables after training </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="54" column="22" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1a7ee812a1b2b8cf3e65686ae0e0a0ec5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::ResidualQuantizer::ResidualQuantizer</definition>
        <argsstring>(size_t d, const std::vector&lt; size_t &gt; &amp;nbits, Search_type_t search_type=ST_decompress)</argsstring>
        <name>ResidualQuantizer</name>
        <qualifiedname>faiss::ResidualQuantizer::ResidualQuantizer</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437d" kindref="member">Search_type_t</ref></type>
          <declname>search_type</declname>
          <defval><ref refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437daad867ba8b63c1a5e9a1ece814a0115ff" kindref="member">ST_decompress</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1aad8c5156a799a4adf632b14a45fc31cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::ResidualQuantizer::ResidualQuantizer</definition>
        <argsstring>(size_t d, size_t M, size_t nbits, Search_type_t search_type=ST_decompress)</argsstring>
        <name>ResidualQuantizer</name>
        <qualifiedname>faiss::ResidualQuantizer::ResidualQuantizer</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>M</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437d" kindref="member">Search_type_t</ref></type>
          <declname>search_type</declname>
          <defval><ref refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437daad867ba8b63c1a5e9a1ece814a0115ff" kindref="member">ST_decompress</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1ae83e8d2495911c14dda037e192a4120a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::ResidualQuantizer::ResidualQuantizer</definition>
        <argsstring>()</argsstring>
        <name>ResidualQuantizer</name>
        <qualifiedname>faiss::ResidualQuantizer::ResidualQuantizer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="83" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1a0985eadd777003e6faca9b2247d3b30b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::ResidualQuantizer::train</definition>
        <argsstring>(size_t n, const float *x) override</argsstring>
        <name>train</name>
        <qualifiedname>faiss::ResidualQuantizer::train</qualifiedname>
        <reimplements refid="structfaiss_1_1Quantizer_1a6e97ff4cce0bb4163aa8fbe95df456c9">train</reimplements>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Train the residual quantizer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="86" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1a0a8bfcc35799f1bfd754a3f5de1bed70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ResidualQuantizer::initialize_from</definition>
        <argsstring>(const ResidualQuantizer &amp;other, int skip_M=0)</argsstring>
        <name>initialize_from</name>
        <qualifiedname>faiss::ResidualQuantizer::initialize_from</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1ResidualQuantizer" kindref="compound">ResidualQuantizer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>int</type>
          <declname>skip_M</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the M codebook levels from other, starting from skip_M. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="89" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1ada125c789e149790702a584ffc6f28a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::ResidualQuantizer::retrain_AQ_codebook</definition>
        <argsstring>(size_t n, const float *x)</argsstring>
        <name>retrain_AQ_codebook</name>
        <qualifiedname>faiss::ResidualQuantizer::retrain_AQ_codebook</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encode the vectors and compute codebook that minimizes the quantization error on these codes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>training vectors, size n * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of training vectors, n &gt;= total_codebook_size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>returns quantization error for the new codebook with old codes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="99" column="11"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1abaeafbc3e40468c49b031e8c4a1cfeb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::ResidualQuantizer::compute_codes_add_centroids</definition>
        <argsstring>(const float *x, uint8_t *codes, size_t n, const float *centroids=nullptr) const override</argsstring>
        <name>compute_codes_add_centroids</name>
        <qualifiedname>faiss::ResidualQuantizer::compute_codes_add_centroids</qualifiedname>
        <reimplements refid="structfaiss_1_1AdditiveQuantizer_1a19e8ca592df42631e8308dbafc26c3c4">compute_codes_add_centroids</reimplements>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>centroids</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encode a set of vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>vectors to encode, size n * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>output codes, size n * code_size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centroids</parametername>
</parameternamelist>
<parameterdescription>
<para>centroids to be added to x, size n * d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="107" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1abe48d8c22ea9c3de22704aea7a606b31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ResidualQuantizer::refine_beam</definition>
        <argsstring>(size_t n, size_t beam_size, const float *residuals, int new_beam_size, int32_t *new_codes, float *new_residuals=nullptr, float *new_distances=nullptr) const</argsstring>
        <name>refine_beam</name>
        <qualifiedname>faiss::ResidualQuantizer::refine_beam</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>beam_size</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>residuals</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_beam_size</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>new_codes</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>new_residuals</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>float *</type>
          <declname>new_distances</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>lower-level encode function</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors to handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>residuals</parametername>
</parameternamelist>
<parameterdescription>
<para>vectors to encode, size (n, beam_size, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beam_size</parametername>
</parameternamelist>
<parameterdescription>
<para>input beam size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_beam_size</parametername>
</parameternamelist>
<parameterdescription>
<para>output beam size (should be &lt;= K * beam_size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>output codes, size (n, new_beam_size, m + 1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_residuals</parametername>
</parameternamelist>
<parameterdescription>
<para>output residuals, size (n, new_beam_size, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances, size (n, new_beam_size) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="123" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1ac59e6e5544cde2db8ffc340faaa52597" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ResidualQuantizer::refine_beam_LUT</definition>
        <argsstring>(size_t n, const float *query_norms, const float *query_cp, int new_beam_size, int32_t *new_codes, float *new_distances=nullptr) const</argsstring>
        <name>refine_beam_LUT</name>
        <qualifiedname>faiss::ResidualQuantizer::refine_beam_LUT</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_norms</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>query_cp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_beam_size</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>new_codes</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>new_distances</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="132" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1ResidualQuantizer_1ac9e1a3f90181d86f85f3d9716fb4a6ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::ResidualQuantizer::memory_per_point</definition>
        <argsstring>(int beam_size=-1) const</argsstring>
        <name>memory_per_point</name>
        <qualifiedname>faiss::ResidualQuantizer::memory_per_point</qualifiedname>
        <param>
          <type>int</type>
          <declname>beam_size</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Beam search can consume a lot of memory. This function estimates the amount of mem used by refine_beam to adjust the batch size</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>beam_size</parametername>
</parameternamelist>
<parameterdescription>
<para>if != -1, override the beam size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/ResidualQuantizer.h" line="145" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a11964f0d7ef3603a0855a46634b0096e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::compute_codebook_tables</definition>
        <argsstring>()</argsstring>
        <name>compute_codebook_tables</name>
        <qualifiedname>faiss::AdditiveQuantizer::compute_codebook_tables</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="48" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a7b6a82e71df3f5a989505dd45ed72618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::AdditiveQuantizer::encode_norm</definition>
        <argsstring>(float norm) const</argsstring>
        <name>encode_norm</name>
        <qualifiedname>faiss::AdditiveQuantizer::encode_norm</qualifiedname>
        <param>
          <type>float</type>
          <declname>norm</declname>
        </param>
        <briefdescription>
<para>encode a norm into norm_bits bits </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="62" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a7dce04e60d67081b02d85af9fd13b61c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::AdditiveQuantizer::encode_qcint</definition>
        <argsstring>(float x) const</argsstring>
        <name>encode_qcint</name>
        <qualifiedname>faiss::AdditiveQuantizer::encode_qcint</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>encode norm by non-uniform scalar quantization </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="65" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a9f6fdbed02275fe908ac219c022fc859" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::AdditiveQuantizer::decode_qcint</definition>
        <argsstring>(uint32_t c) const</argsstring>
        <name>decode_qcint</name>
        <qualifiedname>faiss::AdditiveQuantizer::decode_qcint</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>decode norm by non-uniform scalar quantization </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="68" column="11"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a9fa7f67e95b30ca682017ce0389f80ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::set_derived_values</definition>
        <argsstring>()</argsstring>
        <name>set_derived_values</name>
        <qualifiedname>faiss::AdditiveQuantizer::set_derived_values</qualifiedname>
        <briefdescription>
<para>Train the norm quantizer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="96" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1abef163b7b94ef867c727ab3344853637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::train_norm</definition>
        <argsstring>(size_t n, const float *norms)</argsstring>
        <name>train_norm</name>
        <qualifiedname>faiss::AdditiveQuantizer::train_norm</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>norms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="99" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1aa75999838c16331a2a2b437cc6283291" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::compute_codes</definition>
        <argsstring>(const float *x, uint8_t *codes, size_t n) const override</argsstring>
        <name>compute_codes</name>
        <qualifiedname>faiss::AdditiveQuantizer::compute_codes</qualifiedname>
        <reimplements refid="structfaiss_1_1Quantizer_1a2590aabcafa9fb9ae05587d334fd8205">compute_codes</reimplements>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quantize a set of vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors, size n * d </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>output codes, size n * code_size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="101" column="10" bodyfile="faiss/impl/AdditiveQuantizer.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1ab3f0bb8418ad4ad36e0ae38a1a596684" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::pack_codes</definition>
        <argsstring>(size_t n, const int32_t *codes, uint8_t *packed_codes, int64_t ld_codes=-1, const float *norms=nullptr, const float *centroids=nullptr) const</argsstring>
        <name>pack_codes</name>
        <qualifiedname>faiss::AdditiveQuantizer::pack_codes</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>packed_codes</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ld_codes</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const float *</type>
          <declname>norms</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const float *</type>
          <declname>centroids</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pack a series of code to bit-compact format</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>codes to be packed, size n * code_size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>packed_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>output bit-compact codes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ld_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimension of codes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>norms</parametername>
</parameternamelist>
<parameterdescription>
<para>norms of the vectors (size n). Will be computed if needed but not provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centroids</parametername>
</parameternamelist>
<parameterdescription>
<para>centroids to be added to x, size n * d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="127" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a851fda9f520d3a358abbf0bffe34135f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::decode</definition>
        <argsstring>(const uint8_t *codes, float *x, size_t n) const override</argsstring>
        <name>decode</name>
        <qualifiedname>faiss::AdditiveQuantizer::decode</qualifiedname>
        <reimplements refid="structfaiss_1_1Quantizer_1a71b20a9a5f98f9e8889bb22cfb7f9fac">decode</reimplements>
        <reimplementedby refid="structfaiss_1_1ProductAdditiveQuantizer_1a1cbf18c081882301bc41d447f3845295">decode</reimplementedby>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decode a set of vectors</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>codes to decode, size n * code_size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output vectors, size n * d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="140" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a586e5004af97df05082f7771ea432f97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::AdditiveQuantizer::decode_unpacked</definition>
        <argsstring>(const int32_t *codes, float *x, size_t n, int64_t ld_codes=-1) const</argsstring>
        <name>decode_unpacked</name>
        <qualifiedname>faiss::AdditiveQuantizer::decode_unpacked</qualifiedname>
        <reimplementedby refid="structfaiss_1_1ProductAdditiveQuantizer_1a3f46da7ac6d3fa9282557842e8688a45">decode_unpacked</reimplementedby>
        <param>
          <type>const int32_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ld_codes</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decode a set of vectors in non-packed format</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>codes to decode, size n * ld_codes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output vectors, size n * d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="147" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a1858e45563fcde12a822a59054ca171c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_IP</declname>
            <defname>is_IP</defname>
          </param>
          <param>
            <type><ref refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437d" kindref="member">Search_type_t</ref></type>
            <declname>effective_search_type</declname>
            <defname>effective_search_type</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float faiss::AdditiveQuantizer::compute_1_distance_LUT</definition>
        <argsstring>(const uint8_t *codes, const float *LUT) const</argsstring>
        <name>compute_1_distance_LUT</name>
        <qualifiedname>faiss::AdditiveQuantizer::compute_1_distance_LUT</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>LUT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="164" column="11"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a7a89007bac4f05e55a073ebfd798ff2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::decode_64bit</definition>
        <argsstring>(idx_t n, float *x) const</argsstring>
        <name>decode_64bit</name>
        <qualifiedname>faiss::AdditiveQuantizer::decode_64bit</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>decoding function for a code in a 64-bit word </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="175" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1ad6ef68786fb519e41de5a1d0a3e7d55e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::AdditiveQuantizer::compute_LUT</definition>
        <argsstring>(size_t n, const float *xq, float *LUT, float alpha=1.0f, long ld_lut=-1) const</argsstring>
        <name>compute_LUT</name>
        <qualifiedname>faiss::AdditiveQuantizer::compute_LUT</qualifiedname>
        <reimplementedby refid="structfaiss_1_1ProductAdditiveQuantizer_1a58434325033167884ea6f5d821e016a1">compute_LUT</reimplementedby>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xq</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>LUT</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
          <defval>1.0f</defval>
        </param>
        <param>
          <type>long</type>
          <declname>ld_lut</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute inner-product look-up tables. Used in the centroid search functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xq</parametername>
</parameternamelist>
<parameterdescription>
<para>query vector, size (n, d) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LUT</parametername>
</parameternamelist>
<parameterdescription>
<para>look-up table, size (n, total_codebook_size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>compute alpha * inner-product </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ld_lut</parametername>
</parameternamelist>
<parameterdescription>
<para>leading dimension of LUT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="185" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a6224c75b472ef7b2113c78665eee3604" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::knn_centroids_inner_product</definition>
        <argsstring>(idx_t n, const float *xq, idx_t k, float *distances, idx_t *labels) const</argsstring>
        <name>knn_centroids_inner_product</name>
        <qualifiedname>faiss::AdditiveQuantizer::knn_centroids_inner_product</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xq</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
<para>exact IP search </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="193" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a506a17e599f7b6fd98074867da0af6cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::compute_centroid_norms</definition>
        <argsstring>(float *norms) const</argsstring>
        <name>compute_centroid_norms</name>
        <qualifiedname>faiss::AdditiveQuantizer::compute_centroid_norms</qualifiedname>
        <param>
          <type>float *</type>
          <declname>norms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For L2 search we need the L2 norms of the centroids</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>norms</parametername>
</parameternamelist>
<parameterdescription>
<para>output norms table, size total_codebook_size </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="204" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1AdditiveQuantizer_1a3fe455f9e50561dccad93982658bbefd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::AdditiveQuantizer::knn_centroids_L2</definition>
        <argsstring>(idx_t n, const float *xq, idx_t k, float *distances, idx_t *labels, const float *centroid_norms) const</argsstring>
        <name>knn_centroids_L2</name>
        <qualifiedname>faiss::AdditiveQuantizer::knn_centroids_L2</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xq</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>centroid_norms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Exact L2 search, with precomputed norms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/impl/AdditiveQuantizer.h" line="207" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Residual quantizer with variable number of bits per sub-quantizer</para>
<para>The residual centroids are stored in a big cumulative centroid table. The codes are represented either as a non-compact table of size (n, M) or as the compact output (n, code_size). </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>faiss::AdditiveQuantizer</label>
        <link refid="structfaiss_1_1AdditiveQuantizer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>faiss::Quantizer</label>
        <link refid="structfaiss_1_1Quantizer"/>
      </node>
      <node id="1">
        <label>faiss::ResidualQuantizer</label>
        <link refid="structfaiss_1_1ResidualQuantizer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>faiss::MaybeOwnedVector&lt; uint8_t &gt;</label>
        <link refid="structfaiss_1_1MaybeOwnedVector"/>
      </node>
      <node id="2">
        <label>faiss::AdditiveQuantizer</label>
        <link refid="structfaiss_1_1AdditiveQuantizer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>qnorm</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>faiss::ClusteringParameters</label>
        <link refid="structfaiss_1_1ClusteringParameters"/>
      </node>
      <node id="8">
        <label>faiss::Index</label>
        <link refid="structfaiss_1_1Index"/>
      </node>
      <node id="6">
        <label>faiss::IndexFlat</label>
        <link refid="structfaiss_1_1IndexFlat"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>faiss::IndexFlat1D</label>
        <link refid="structfaiss_1_1IndexFlat1D"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>faiss::IndexFlatCodes</label>
        <link refid="structfaiss_1_1IndexFlatCodes"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>codes</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>faiss::IndexFlatL2</label>
        <link refid="structfaiss_1_1IndexFlatL2"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>faiss::ProgressiveDimClusteringParameters</label>
        <link refid="structfaiss_1_1ProgressiveDimClusteringParameters"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>faiss::ProgressiveDimIndexFactory</label>
        <link refid="structfaiss_1_1ProgressiveDimIndexFactory"/>
      </node>
      <node id="3">
        <label>faiss::Quantizer</label>
        <link refid="structfaiss_1_1Quantizer"/>
      </node>
      <node id="1">
        <label>faiss::ResidualQuantizer</label>
        <link refid="structfaiss_1_1ResidualQuantizer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>cp</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>assign_index_factory</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="faiss/impl/ResidualQuantizer.h" line="27" column="1" bodyfile="faiss/impl/ResidualQuantizer.h" bodystart="27" bodyend="146"/>
    <listofallmembers>
      <member refid="structfaiss_1_1AdditiveQuantizer_1ae76396a513113650fb2f579cf9899607" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>AdditiveQuantizer</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a5355970d244b03a9e39efce7b440a153" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>AdditiveQuantizer</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1ad44f8d7e4bffb1faaa36f3f03133e47f" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>approx_topk_mode</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a7e962b48662bcc7fd9531ff6bee06430" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>assign_index_factory</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1af366aff9e6f592413920232add8a4658" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>centroid_norms</name></member>
      <member refid="structfaiss_1_1Quantizer_1a25120fac0a15262b52e54391cc642850" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>code_size</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a8a7bf5068face76845f039137af0e81d" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>codebook_cross_products</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a5cf9516480f6fd9912d4b0d323109088" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>codebook_offsets</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a1bd2810ad54fb243b666e56f5d505d3f" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>codebooks</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a1858e45563fcde12a822a59054ca171c" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>compute_1_distance_LUT</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a506a17e599f7b6fd98074867da0af6cd" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>compute_centroid_norms</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a11964f0d7ef3603a0855a46634b0096e" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>compute_codebook_tables</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1aa75999838c16331a2a2b437cc6283291" prot="public" virt="virtual"><scope>faiss::ResidualQuantizer</scope><name>compute_codes</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1abaeafbc3e40468c49b031e8c4a1cfeb8" prot="public" virt="virtual"><scope>faiss::ResidualQuantizer</scope><name>compute_codes_add_centroids</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1ad6ef68786fb519e41de5a1d0a3e7d55e" prot="public" virt="virtual"><scope>faiss::ResidualQuantizer</scope><name>compute_LUT</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a2b108691bcd6261835102fbe37a76c4d" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>cp</name></member>
      <member refid="structfaiss_1_1Quantizer_1a416da1bab43fefa36563210a86298a75" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>d</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a851fda9f520d3a358abbf0bffe34135f" prot="public" virt="virtual"><scope>faiss::ResidualQuantizer</scope><name>decode</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a7a89007bac4f05e55a073ebfd798ff2c" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>decode_64bit</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a9f6fdbed02275fe908ac219c022fc859" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>decode_qcint</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a586e5004af97df05082f7771ea432f97" prot="public" virt="virtual"><scope>faiss::ResidualQuantizer</scope><name>decode_unpacked</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a7b6a82e71df3f5a989505dd45ed72618" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>encode_norm</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a7dce04e60d67081b02d85af9fd13b61c" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>encode_qcint</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a0a8bfcc35799f1bfd754a3f5de1bed70" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>initialize_from</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a6bc5248e11416924b7d7d73e53672465" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>is_trained</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a6224c75b472ef7b2113c78665eee3604" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>knn_centroids_inner_product</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3fe455f9e50561dccad93982658bbefd" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>knn_centroids_L2</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a4aeef9f31288a7c28c02a2582616a660" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>M</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1adc079ef913e819d33584f11cb50be092" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>max_beam_size</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a2576ad822575071941166ce96cd14d72" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>max_mem_distances</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1ac9e1a3f90181d86f85f3d9716fb4a6ac" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>memory_per_point</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3eda6b9cc0ffa5ce141683f0a6e27349" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>nbits</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a4b1efc57c48c90f0e4b0f52822bf871b" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>niter_codebook_refine</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1aba72956d49ce4b06638c3e085e54d4b3" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>norm_bits</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a093437a71a2fd301cf10f2f156f39249" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>norm_max</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a648e012d823d2baf4947d4d2ce64af80" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>norm_min</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a345684bf40fb4395fb0bc29fa0708424" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>norm_tabs</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a4c70d7c0f02dba31120d2d3c01982482" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>only_8bit</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1ab3f0bb8418ad4ad36e0ae38a1a596684" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>pack_codes</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1aa5fe31c6a8b80a5bf03bd72bc7744def" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>qnorm</name></member>
      <member refid="structfaiss_1_1Quantizer_1abfc52a9334f44a5251f49e75360027e2" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>Quantizer</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1abe48d8c22ea9c3de22704aea7a606b31" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>refine_beam</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1ac59e6e5544cde2db8ffc340faaa52597" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>refine_beam_LUT</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a7ee812a1b2b8cf3e65686ae0e0a0ec5d" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ResidualQuantizer</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1aad8c5156a799a4adf632b14a45fc31cd" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ResidualQuantizer</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1ae83e8d2495911c14dda037e192a4120a" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ResidualQuantizer</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1ada125c789e149790702a584ffc6f28a3" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>retrain_AQ_codebook</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a288c9459e71889972f15cbbb74312a92" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>search_type</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437d" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>Search_type_t</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a9fa7f67e95b30ca682017ce0389f80ed" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>set_derived_values</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1adc71afaf88daa23926c3a0a25755406d" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>Skip_codebook_tables</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437daad867ba8b63c1a5e9a1ece814a0115ff" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_decompress</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da026ae767f6f750ba8900ebae16a30ea3" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_LUT_nonorm</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da74f8a53f2245497592d362c8a58acca6" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_norm_cqint4</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da30d771ce35280990ad8ee410761b44ed" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_norm_cqint8</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da12cbc8c410c5c6d434056d7d05d0899a" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_norm_float</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da1a74e7ab83487c197554d76b0c3943bd" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_norm_from_LUT</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da3f729a1c733fa6d540887a288beb1da9" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_norm_lsq2x4</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437dad6fc8bf97ff3082204873faefe4ce643" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_norm_qint4</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da3e4ce3de42ff657f037bd8f8b1b761fb" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_norm_qint8</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3f99107d33c9a79ab0a4ad1476e8437da897fcce2694ddcb88561ccd30967ff18" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>ST_norm_rq2x4</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a3e118ab9d0d1e83b43bbb264ec1d27a1" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>tot_bits</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a609e902b891025b69eb7442a54a59084" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>total_codebook_size</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a0985eadd777003e6faca9b2247d3b30b" prot="public" virt="virtual"><scope>faiss::ResidualQuantizer</scope><name>train</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1aeb2ac07bd05b9248e9a63fd03f2a84eb" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>Train_default</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1abef163b7b94ef867c727ab3344853637" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>train_norm</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1ad79abf8a589cbcc6089cc5095e17e226" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>Train_progressive_dim</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a8e098c1f307cbba92980add4316a9acf" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>Train_refine_codebook</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a07224ef7fa70036568a01649152475a9" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>Train_top_beam</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a5c1c8a9eb29fcaeb0eab565bfd2f7eef" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>train_type</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1a9d167678afe137a3c71439fa3cc3ea03" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>train_type_t</name></member>
      <member refid="structfaiss_1_1ResidualQuantizer_1acd4c6a23a96bf055337de4a5d8addcca" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>use_beam_LUT</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a4774f0efe877d34c5c98c2bef4ae1912" prot="public" virt="non-virtual"><scope>faiss::ResidualQuantizer</scope><name>verbose</name></member>
      <member refid="structfaiss_1_1AdditiveQuantizer_1a1a5d116e148ef705f695f0fd9a14b81d" prot="public" virt="virtual"><scope>faiss::ResidualQuantizer</scope><name>~AdditiveQuantizer</name></member>
      <member refid="structfaiss_1_1Quantizer_1a3983e6b49d0c28523ec650c877214ebc" prot="public" virt="virtual"><scope>faiss::ResidualQuantizer</scope><name>~Quantizer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
