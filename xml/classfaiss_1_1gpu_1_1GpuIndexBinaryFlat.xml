<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat" kind="class" language="C++" prot="public">
    <compoundname>faiss::gpu::GpuIndexBinaryFlat</compoundname>
    <basecompoundref refid="structfaiss_1_1IndexBinary" prot="public" virt="non-virtual">faiss::IndexBinary</basecompoundref>
    <includes refid="GpuIndexBinaryFlat_8h" local="no">GpuIndexBinaryFlat.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1aa5486bb18c4dd2bf2acdb1324b31940b" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfaiss_1_1gpu_1_1GpuResources" kindref="compound">GpuResources</ref> &gt;</type>
        <definition>std::shared_ptr&lt;GpuResources&gt; faiss::gpu::GpuIndexBinaryFlat::resources_</definition>
        <argsstring></argsstring>
        <name>resources_</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::resources_</qualifiedname>
        <briefdescription>
<para>Manages streans, cuBLAS handles and scratch memory for devices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="99" column="21" bodyfile="faiss/gpu/GpuIndexBinaryFlat.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a280f27e2529d4ce6e08520c7687254c3" prot="protected" static="no" mutable="no">
        <type>const <ref refid="structfaiss_1_1gpu_1_1GpuIndexBinaryFlatConfig" kindref="compound">GpuIndexBinaryFlatConfig</ref></type>
        <definition>const GpuIndexBinaryFlatConfig faiss::gpu::GpuIndexBinaryFlat::binaryFlatConfig_</definition>
        <argsstring></argsstring>
        <name>binaryFlatConfig_</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::binaryFlatConfig_</qualifiedname>
        <briefdescription>
<para>Configuration options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="102" column="36" bodyfile="faiss/gpu/GpuIndexBinaryFlat.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a6962261dda56de7315ba0481722dfc1f" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; BinaryFlatIndex &gt;</type>
        <definition>std::unique_ptr&lt;BinaryFlatIndex&gt; faiss::gpu::GpuIndexBinaryFlat::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::data_</qualifiedname>
        <briefdescription>
<para>Holds our GPU data containing the list of vectors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="105" column="21" bodyfile="faiss/gpu/GpuIndexBinaryFlat.h" bodystart="105" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1ae481f44b2f5233e2cc21298243133d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::gpu::GpuIndexBinaryFlat::GpuIndexBinaryFlat</definition>
        <argsstring>(GpuResourcesProvider *resources, const faiss::IndexBinaryFlat *index, GpuIndexBinaryFlatConfig config=GpuIndexBinaryFlatConfig())</argsstring>
        <name>GpuIndexBinaryFlat</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::GpuIndexBinaryFlat</qualifiedname>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> *</type>
          <declname>resources</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinaryFlat" kindref="compound">faiss::IndexBinaryFlat</ref> *</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1gpu_1_1GpuIndexBinaryFlatConfig" kindref="compound">GpuIndexBinaryFlatConfig</ref></type>
          <declname>config</declname>
          <defval><ref refid="structfaiss_1_1gpu_1_1GpuIndexBinaryFlatConfig" kindref="compound">GpuIndexBinaryFlatConfig</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct from a pre-existing <ref refid="structfaiss_1_1IndexBinaryFlat" kindref="compound">faiss::IndexBinaryFlat</ref> instance, copying data over to the given GPU </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="28" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1af63a3b95ee7d806e37143b686e1c1d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::gpu::GpuIndexBinaryFlat::GpuIndexBinaryFlat</definition>
        <argsstring>(GpuResourcesProvider *resources, int dims, GpuIndexBinaryFlatConfig config=GpuIndexBinaryFlatConfig())</argsstring>
        <name>GpuIndexBinaryFlat</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::GpuIndexBinaryFlat</qualifiedname>
        <param>
          <type><ref refid="classfaiss_1_1gpu_1_1GpuResourcesProvider" kindref="compound">GpuResourcesProvider</ref> *</type>
          <declname>resources</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1gpu_1_1GpuIndexBinaryFlatConfig" kindref="compound">GpuIndexBinaryFlatConfig</ref></type>
          <declname>config</declname>
          <defval><ref refid="structfaiss_1_1gpu_1_1GpuIndexBinaryFlatConfig" kindref="compound">GpuIndexBinaryFlatConfig</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct an empty instance that can be added to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="34" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a133dbba6c51339bcc3d15f7f66f90611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::gpu::GpuIndexBinaryFlat::~GpuIndexBinaryFlat</definition>
        <argsstring>() override</argsstring>
        <name>~GpuIndexBinaryFlat</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::~GpuIndexBinaryFlat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="39" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a7f84b85338a3264d70ed30af4356d87b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::gpu::GpuIndexBinaryFlat::getDevice</definition>
        <argsstring>() const</argsstring>
        <name>getDevice</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::getDevice</qualifiedname>
        <briefdescription>
<para>Returns the device that this index is resident on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="42" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1aee25d7276714db8b171e30aca048a997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classfaiss_1_1gpu_1_1GpuResources" kindref="compound">GpuResources</ref> &gt;</type>
        <definition>std::shared_ptr&lt; GpuResources &gt; faiss::gpu::GpuIndexBinaryFlat::getResources</definition>
        <argsstring>()</argsstring>
        <name>getResources</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::getResources</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to our <ref refid="classfaiss_1_1gpu_1_1GpuResources" kindref="compound">GpuResources</ref> object that manages memory, stream and handle resources on the GPU </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="46" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a1acf93b118b4136857b5dd9ab614e901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::copyFrom</definition>
        <argsstring>(const faiss::IndexBinaryFlat *index)</argsstring>
        <name>copyFrom</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::copyFrom</qualifiedname>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinaryFlat" kindref="compound">faiss::IndexBinaryFlat</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize ourselves from the given CPU index; will overwrite all data in ourselves </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="50" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a4a00b93de336e8536c657d69803ff5c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::copyTo</definition>
        <argsstring>(faiss::IndexBinaryFlat *index) const</argsstring>
        <name>copyTo</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::copyTo</qualifiedname>
        <param>
          <type><ref refid="structfaiss_1_1IndexBinaryFlat" kindref="compound">faiss::IndexBinaryFlat</ref> *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy ourselves to the given CPU index; will overwrite all data in the index instance </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="54" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a64b3ec0e12450654de038fd0abfbb367" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::add</definition>
        <argsstring>(faiss::idx_t n, const uint8_t *x) override</argsstring>
        <name>add</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::add</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1af04b1093cdebfea189e0e04da68794d7">add</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">faiss::idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add n vectors of dimension d to the index.</para>
<para>Vectors are implicitly assigned labels ntotal .. ntotal + n - 1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input matrix, size n * d / 8 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a8e4d8def13350646bf760886f324da6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::add</definition>
        <argsstring>(idx_t n, const void *x, NumericType numeric_type) override</argsstring>
        <name>add</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::add</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1a733b00988a4c48b1182023d13dc0f0b2">add</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="57" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1ac8f14dd3257963082fa638d24df244d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::reset</definition>
        <argsstring>() override</argsstring>
        <name>reset</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::reset</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1a11bff8bcaa366c563076a3d18f3ae30c">reset</reimplements>
        <briefdescription>
<para>Removes all elements from the database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="59" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a2fbea875ba970e52c9ffb18fcdee3aff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::search</definition>
        <argsstring>(idx_t n, const uint8_t *x, idx_t k, int32_t *distances, faiss::idx_t *labels, const faiss::SearchParameters *params=nullptr) const override</argsstring>
        <name>search</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::search</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1ad155e375a04e1500f84ffe45a7b98586">search</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">faiss::idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">faiss::SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query n vectors of dimension d to the index.</para>
<para>return at most k vectors. If there are not enough results for a query, the result array is padded with -1s.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d / 8 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output labels of the NNs, size n*k </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output pairwise distances, size n*k </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="61" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a2c95f0046fdba7785342def1618ac2c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::search</definition>
        <argsstring>(idx_t n, const void *x, NumericType numeric_type, idx_t k, int32_t *distances, idx_t *labels, const SearchParameters *params=nullptr) const override</argsstring>
        <name>search</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::search</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1a8c53952b7b317a6302e32e8fdf8b3b7f">search</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="69" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a9d65d48c6bb7a65da2cf1489efa364cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::reconstruct</definition>
        <argsstring>(faiss::idx_t key, uint8_t *recons) const override</argsstring>
        <name>reconstruct</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::reconstruct</qualifiedname>
        <reimplements refid="structfaiss_1_1IndexBinary_1ad4938acd1d31afd49c81fbb5211121c3">reconstruct</reimplements>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">faiss::idx_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct a stored vector.</para>
<para>This function may not be defined for some indexes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the vector to reconstruct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstucted vector (size d / 8) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="78" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a3c0ffd1655d8a5486660cb025340c9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::train</definition>
        <argsstring>(idx_t n, const uint8_t *x)</argsstring>
        <name>train</name>
        <qualifiedname>faiss::IndexBinary::train</qualifiedname>
        <reimplementedby refid="structfaiss_1_1gpu_1_1GpuIndexBinaryCagra_1a495d6b525bb80241efd78dd1e020cbed">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryFromFloat_1a7de4bb8e82f0dae621c87b44cfb64404">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryHNSW_1afc2793b3b3c53e5acd8315dfea500e68">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a4b4b1ba42e6af7c30ccbaf0fc0f38034">train</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform training on a representative set of vectors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of training vectors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>training vecors, size n * d / 8 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="54" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a3ea5e39564542897806c38f45256bfb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::train</definition>
        <argsstring>(idx_t n, const void *x, NumericType numeric_type)</argsstring>
        <name>train</name>
        <qualifiedname>faiss::IndexBinary::train</qualifiedname>
        <reimplementedby refid="structfaiss_1_1gpu_1_1GpuIndexBinaryCagra_1af5303d471d0b3d63d726a7545271718f">train</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryHNSW_1a54d064dc7fb501af4a3cad5de069d71b">train</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="55" column="18" bodyfile="faiss/IndexBinary.h" bodystart="55" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a33c74f55b919bf39138bb2ba60bbaafc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::add_with_ids</definition>
        <argsstring>(idx_t n, const uint8_t *x, const idx_t *xids)</argsstring>
        <name>add_with_ids</name>
        <qualifiedname>faiss::IndexBinary::add_with_ids</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryHash_1a4c173c78924cc5ebe82c809cbc4882ba">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1ace01cca47e08dfe5c74c5b4f31977032">add_with_ids</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as add, but stores xids instead of sequential ids.</para>
<para>The default implementation fails with an assertion, as it is not supported by all indexes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xids</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-null, ids to store for the vectors (size n) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="84" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1abf82dd0c7719eb18aa89cdad773fee6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::add_with_ids</definition>
        <argsstring>(idx_t n, const void *x, NumericType numeric_type, const idx_t *xids)</argsstring>
        <name>add_with_ids</name>
        <qualifiedname>faiss::IndexBinary::add_with_ids</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>NumericType</type>
          <declname>numeric_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="85" column="18" bodyfile="faiss/IndexBinary.h" bodystart="85" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a7d8f56aff2b732ce74fbc0f09af45e63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::range_search</definition>
        <argsstring>(idx_t n, const uint8_t *x, int radius, RangeSearchResult *result, const SearchParameters *params=nullptr) const</argsstring>
        <name>range_search</name>
        <qualifiedname>faiss::IndexBinary::range_search</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryFlat_1aecebd5a7e9073092343c337857b1e899">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryHash_1a5cc2617a99fe0f6218709bb34e7647b6">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryMultiHash_1af77a28b7a9e427208362ef2ad1c0dbe0">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a0c916e679ab3ebc366d16e55d77995d2">range_search</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radius</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Query n vectors of dimension d to the index.</para>
<para>return all vectors with distance &lt; radius. Note that many indexes do not implement the range_search (only the k-NN search is mandatory). The distances are converted to float to reuse the <ref refid="structfaiss_1_1RangeSearchResult" kindref="compound">RangeSearchResult</ref> structure, but they are integer. By convention, only distances &lt; radius (strict comparison) are returned, ie. radius = 0 does not return any result and 1 returns only exact same vectors.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d / 8 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>search radius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>result table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="148" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1aa706d8807d29c91e0a148553a8202bc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexBinary::assign</definition>
        <argsstring>(idx_t n, const uint8_t *x, idx_t *labels, idx_t k=1) const</argsstring>
        <name>assign</name>
        <qualifiedname>faiss::IndexBinary::assign</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the indexes of the k vectors closest to the query x.</para>
<para>This function is identical to search but only returns labels of neighbors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d / 8 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output labels of the NNs, size n*k </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="162" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a5ea7dee38e40f66b86d892bab2b6b80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t faiss::IndexBinary::remove_ids</definition>
        <argsstring>(const IDSelector &amp;sel)</argsstring>
        <name>remove_ids</name>
        <qualifiedname>faiss::IndexBinary::remove_ids</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryFlat_1ae5127fb557880bf5996531714f32b3d6">remove_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1ad05e4e6f3ce7bb54f88ece7fe645447b">remove_ids</reimplementedby>
        <param>
          <type>const <ref refid="structfaiss_1_1IDSelector" kindref="compound">IDSelector</ref> &amp;</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes IDs from the index. Not supported by all indexes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="169" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1afbeb7aa476a119b17cbfdb87e9de91e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::reconstruct_n</definition>
        <argsstring>(idx_t i0, idx_t ni, uint8_t *recons) const</argsstring>
        <name>reconstruct_n</name>
        <qualifiedname>faiss::IndexBinary::reconstruct_n</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a4a8cd9437b9adc21696aefe1fa440a22">reconstruct_n</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>i0</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>ni</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct vectors i0 to i0 + ni - 1.</para>
<para>This function may not be defined for some indexes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstucted vectors (size ni * d / 8) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="184" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a82b07fe855fba3208ae05391328b9ec3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::search_and_reconstruct</definition>
        <argsstring>(idx_t n, const uint8_t *x, idx_t k, int32_t *distances, idx_t *labels, uint8_t *recons, const SearchParameters *params=nullptr) const</argsstring>
        <name>search_and_reconstruct</name>
        <qualifiedname>faiss::IndexBinary::search_and_reconstruct</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a198ca7067fd9a08583f257f00b741b39">search_and_reconstruct</reimplementedby>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>recons</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1SearchParameters" kindref="compound">SearchParameters</ref> *</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Similar to search, but also reconstructs the stored vectors (or an approximation in the case of lossy coding) for the search results.</para>
<para>If there are not enough results for a query, the resulting array is padded with -1s.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstructed vectors size (n, k, d) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="194" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1aa22c24398be85229e338b15ea9a0e3f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexBinary::display</definition>
        <argsstring>() const</argsstring>
        <name>display</name>
        <qualifiedname>faiss::IndexBinary::display</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display the actual class name and some more info. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="204" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1ab148fd07d1066eea71123640c764b377" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::merge_from</definition>
        <argsstring>(IndexBinary &amp;otherIndex, idx_t add_id=0)</argsstring>
        <name>merge_from</name>
        <qualifiedname>faiss::IndexBinary::merge_from</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1ad80e8243ce1a800b7e22088b0fb2800d">merge_from</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &amp;</type>
          <declname>otherIndex</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>add_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>moves the entries from another dataset to self. On output, other is empty. add_id is added to all moved ids (for sequential ids, this would be this-&gt;ntotal) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="210" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a75b9b404f77c107b192e25d6406337bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::check_compatible_for_merge</definition>
        <argsstring>(const IndexBinary &amp;otherIndex) const</argsstring>
        <name>check_compatible_for_merge</name>
        <qualifiedname>faiss::IndexBinary::check_compatible_for_merge</qualifiedname>
        <reimplementedby refid="structfaiss_1_1IndexBinaryIVF_1a6a65e485671efc395161c12ee6fe3fc5">check_compatible_for_merge</reimplementedby>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &amp;</type>
          <declname>otherIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check that the two indexes are compatible (ie, they are trained in the same way and have the same parameters). Otherwise throw. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="215" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1aa65f1178997d72127f1ebca5cd7656a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t faiss::IndexBinary::sa_code_size</definition>
        <argsstring>() const</argsstring>
        <name>sa_code_size</name>
        <qualifiedname>faiss::IndexBinary::sa_code_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>size of the produced codes in bytes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="219" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexBinary_1a144d5d72fceb98fe9daea9cb393bbfd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::IndexBinary::add_sa_codes</definition>
        <argsstring>(idx_t n, const uint8_t *codes, const idx_t *xids)</argsstring>
        <name>add_sa_codes</name>
        <qualifiedname>faiss::IndexBinary::add_sa_codes</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as add_with_ids for <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="222" column="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1af832169ca7b4c2a3426875502d6859f0" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::searchFromCpuPaged_</definition>
        <argsstring>(idx_t n, const uint8_t *x, int k, int32_t *outDistancesData, idx_t *outIndicesData) const</argsstring>
        <name>searchFromCpuPaged_</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::searchFromCpuPaged_</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>outDistancesData</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>outIndicesData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called from search when the input data is on the CPU; potentially allows for pinned memory usage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="83" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a645e6563eda334a4e404b1315437a6ec" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuIndexBinaryFlat::searchNonPaged_</definition>
        <argsstring>(idx_t n, const uint8_t *x, int k, int32_t *outDistancesData, idx_t *outIndicesData) const</argsstring>
        <name>searchNonPaged_</name>
        <qualifiedname>faiss::gpu::GpuIndexBinaryFlat::searchNonPaged_</qualifiedname>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>outDistancesData</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref> *</type>
          <declname>outIndicesData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="90" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfaiss_1_1IndexBinary_1aaa0f338d22575d508cd6141972addaa6" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using faiss::IndexBinary::component_t =  uint8_t</definition>
        <argsstring></argsstring>
        <name>component_t</name>
        <qualifiedname>faiss::IndexBinary::component_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="30" column="5" bodyfile="faiss/IndexBinary.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1IndexBinary_1af958aa9b51dac1fcc433014959cad20c" prot="public" static="no">
        <type>int32_t</type>
        <definition>using faiss::IndexBinary::distance_t =  int32_t</definition>
        <argsstring></argsstring>
        <name>distance_t</name>
        <qualifiedname>faiss::IndexBinary::distance_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="31" column="5" bodyfile="faiss/IndexBinary.h" bodystart="31" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a0e485a7189eec2675032486d3b12cf88" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::IndexBinary::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <qualifiedname>faiss::IndexBinary::d</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>vector dimension </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="33" column="9" bodyfile="faiss/IndexBinary.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a277c2645b8def11c5d982384098c5380" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::IndexBinary::code_size</definition>
        <argsstring></argsstring>
        <name>code_size</name>
        <qualifiedname>faiss::IndexBinary::code_size</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>number of bytes per vector ( = d / 8 ) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="34" column="9" bodyfile="faiss/IndexBinary.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a41b6759d127475d5fcd2b3982a8f355e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefaiss_1ad63e84aa82f5bb0405ed924d58b20e2e" kindref="member">idx_t</ref></type>
        <definition>idx_t faiss::IndexBinary::ntotal</definition>
        <argsstring></argsstring>
        <name>ntotal</name>
        <qualifiedname>faiss::IndexBinary::ntotal</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>total nb of indexed vectors </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="35" column="11" bodyfile="faiss/IndexBinary.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a1656c00d77d55999becd71e3d8ea6dd7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexBinary::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <qualifiedname>faiss::IndexBinary::verbose</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>verbosity level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="36" column="10" bodyfile="faiss/IndexBinary.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a132119ae93e240b54621c5c669853c7f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexBinary::is_trained</definition>
        <argsstring></argsstring>
        <name>is_trained</name>
        <qualifiedname>faiss::IndexBinary::is_trained</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set if the <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> does not require training, or if training is done already </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="40" column="10" bodyfile="faiss/IndexBinary.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexBinary_1a344529c829717012b530ef9c13b145b7" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
        <definition>MetricType faiss::IndexBinary::metric_type</definition>
        <argsstring></argsstring>
        <name>metric_type</name>
        <qualifiedname>faiss::IndexBinary::metric_type</qualifiedname>
        <initializer>= <ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752cace9aa175fe11f346aa0a70df58977ff1" kindref="member">METRIC_L2</ref></initializer>
        <briefdescription>
<para>type of metric this index uses for search </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinary.h" line="43" column="16" bodyfile="faiss/IndexBinary.h" bodystart="43" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A GPU version of <ref refid="structfaiss_1_1IndexBinaryFlat" kindref="compound">IndexBinaryFlat</ref> for brute-force comparison of bit vectors via Hamming distance </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>faiss::IndexBinary</label>
        <link refid="structfaiss_1_1IndexBinary"/>
      </node>
      <node id="1">
        <label>faiss::gpu::GpuIndexBinaryFlat</label>
        <link refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>faiss::IndexBinary</label>
        <link refid="structfaiss_1_1IndexBinary"/>
      </node>
      <node id="1">
        <label>faiss::gpu::GpuIndexBinaryFlat</label>
        <link refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>binaryFlatConfig_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>faiss::gpu::GpuIndexBinaryFlatConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexBinaryFlatConfig"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>faiss::gpu::GpuIndexConfig</label>
        <link refid="structfaiss_1_1gpu_1_1GpuIndexConfig"/>
      </node>
    </collaborationgraph>
    <location file="faiss/gpu/GpuIndexBinaryFlat.h" line="24" column="1" bodyfile="faiss/gpu/GpuIndexBinaryFlat.h" bodystart="24" bodyend="106"/>
    <listofallmembers>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a64b3ec0e12450654de038fd0abfbb367" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>add</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a8e4d8def13350646bf760886f324da6b" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>add</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a144d5d72fceb98fe9daea9cb393bbfd9" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>add_sa_codes</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a33c74f55b919bf39138bb2ba60bbaafc" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>add_with_ids</name></member>
      <member refid="structfaiss_1_1IndexBinary_1abf82dd0c7719eb18aa89cdad773fee6a" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>add_with_ids</name></member>
      <member refid="structfaiss_1_1IndexBinary_1aa706d8807d29c91e0a148553a8202bc9" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>assign</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a280f27e2529d4ce6e08520c7687254c3" prot="protected" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>binaryFlatConfig_</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a75b9b404f77c107b192e25d6406337bb" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>check_compatible_for_merge</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a277c2645b8def11c5d982384098c5380" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>code_size</name></member>
      <member refid="structfaiss_1_1IndexBinary_1aaa0f338d22575d508cd6141972addaa6" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>component_t</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a1acf93b118b4136857b5dd9ab614e901" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>copyFrom</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a4a00b93de336e8536c657d69803ff5c2" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>copyTo</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a0e485a7189eec2675032486d3b12cf88" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>d</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a6962261dda56de7315ba0481722dfc1f" prot="protected" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>data_</name></member>
      <member refid="structfaiss_1_1IndexBinary_1aa22c24398be85229e338b15ea9a0e3f1" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>display</name></member>
      <member refid="structfaiss_1_1IndexBinary_1af958aa9b51dac1fcc433014959cad20c" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>distance_t</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a7f84b85338a3264d70ed30af4356d87b" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>getDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1aee25d7276714db8b171e30aca048a997" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>getResources</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1ae481f44b2f5233e2cc21298243133d6a" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>GpuIndexBinaryFlat</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1af63a3b95ee7d806e37143b686e1c1d1d" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>GpuIndexBinaryFlat</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a2a76f22851e42963b6a42c6d39e93b4b" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>IndexBinary</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a132119ae93e240b54621c5c669853c7f" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>is_trained</name></member>
      <member refid="structfaiss_1_1IndexBinary_1ab148fd07d1066eea71123640c764b377" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>merge_from</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a344529c829717012b530ef9c13b145b7" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>metric_type</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a41b6759d127475d5fcd2b3982a8f355e" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>ntotal</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a7d8f56aff2b732ce74fbc0f09af45e63" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>range_search</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a9d65d48c6bb7a65da2cf1489efa364cc" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>reconstruct</name></member>
      <member refid="structfaiss_1_1IndexBinary_1afbeb7aa476a119b17cbfdb87e9de91e4" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>reconstruct_n</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a5ea7dee38e40f66b86d892bab2b6b80e" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>remove_ids</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1ac8f14dd3257963082fa638d24df244d6" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>reset</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1aa5486bb18c4dd2bf2acdb1324b31940b" prot="protected" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>resources_</name></member>
      <member refid="structfaiss_1_1IndexBinary_1aa65f1178997d72127f1ebca5cd7656a2" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>sa_code_size</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a2fbea875ba970e52c9ffb18fcdee3aff" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>search</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a2c95f0046fdba7785342def1618ac2c1" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>search</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a82b07fe855fba3208ae05391328b9ec3" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>search_and_reconstruct</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1af832169ca7b4c2a3426875502d6859f0" prot="protected" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>searchFromCpuPaged_</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a645e6563eda334a4e404b1315437a6ec" prot="protected" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>searchNonPaged_</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a3c0ffd1655d8a5486660cb025340c9a4" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>train</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a3ea5e39564542897806c38f45256bfb6" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>train</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a1656c00d77d55999becd71e3d8ea6dd7" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>verbose</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuIndexBinaryFlat_1a133dbba6c51339bcc3d15f7f66f90611" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>~GpuIndexBinaryFlat</name></member>
      <member refid="structfaiss_1_1IndexBinary_1a9d2ee94e3bb4cbb82bf01d04b909f2d8" prot="public" virt="virtual"><scope>faiss::gpu::GpuIndexBinaryFlat</scope><name>~IndexBinary</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
