<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structfaiss_1_1HeapArray" kind="struct" language="C++" prot="public">
    <compoundname>faiss::HeapArray</compoundname>
    <includes refid="Heap_8h" local="no">Heap.h</includes>
    <templateparamlist>
      <param>
        <type>typename C</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfaiss_1_1HeapArray_1a284762db4e64dd74d82984b6b457304a" prot="public" static="no">
        <type>C::TI</type>
        <definition>typedef C::TI faiss::HeapArray&lt; C &gt;::TI</definition>
        <argsstring></argsstring>
        <name>TI</name>
        <qualifiedname>faiss::HeapArray::TI</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="479" column="28" bodyfile="faiss/utils/Heap.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1HeapArray_1a46eb2eae9e79a0dd7ab720283619a5a9" prot="public" static="no">
        <type>C::T</type>
        <definition>typedef C::T faiss::HeapArray&lt; C &gt;::T</definition>
        <argsstring></argsstring>
        <name>T</name>
        <qualifiedname>faiss::HeapArray::T</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="480" column="27" bodyfile="faiss/utils/Heap.h" bodystart="480" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1HeapArray_1aad477a3907c3496159eaf4b375be4432" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::HeapArray&lt; C &gt;::nh</definition>
        <argsstring></argsstring>
        <name>nh</name>
        <qualifiedname>faiss::HeapArray::nh</qualifiedname>
        <briefdescription>
<para>number of heaps </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="482" column="12" bodyfile="faiss/utils/Heap.h" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1HeapArray_1a1ee98429c766c77235f78c6d9aa32bb4" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::HeapArray&lt; C &gt;::k</definition>
        <argsstring></argsstring>
        <name>k</name>
        <qualifiedname>faiss::HeapArray::k</qualifiedname>
        <briefdescription>
<para>allocated size per heap </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="483" column="12" bodyfile="faiss/utils/Heap.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1HeapArray_1a22332dd179ce70e379addeaa47246cc2" prot="public" static="no" mutable="no">
        <type>TI *</type>
        <definition>TI* faiss::HeapArray&lt; C &gt;::ids</definition>
        <argsstring></argsstring>
        <name>ids</name>
        <qualifiedname>faiss::HeapArray::ids</qualifiedname>
        <briefdescription>
<para>identifiers (size nh * k) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="484" column="8" bodyfile="faiss/utils/Heap.h" bodystart="484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1HeapArray_1a4b131abb659e7d0ee315223270deac53" prot="public" static="no" mutable="no">
        <type>T *</type>
        <definition>T* faiss::HeapArray&lt; C &gt;::val</definition>
        <argsstring></argsstring>
        <name>val</name>
        <qualifiedname>faiss::HeapArray::val</qualifiedname>
        <briefdescription>
<para>values (distances or similarities), size nh * k </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="485" column="7" bodyfile="faiss/utils/Heap.h" bodystart="485" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1HeapArray_1a4fb98128a11901638aca7e07481410a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * faiss::HeapArray&lt; C &gt;::get_val</definition>
        <argsstring>(size_t key)</argsstring>
        <name>get_val</name>
        <qualifiedname>faiss::HeapArray::get_val</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Return the list of values for a heap. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="488" column="7" bodyfile="faiss/utils/Heap.h" bodystart="488" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1HeapArray_1a492695267029cdd40776d87e749ab106" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TI *</type>
        <definition>TI * faiss::HeapArray&lt; C &gt;::get_ids</definition>
        <argsstring>(size_t key)</argsstring>
        <name>get_ids</name>
        <qualifiedname>faiss::HeapArray::get_ids</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Correspponding identifiers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="493" column="8" bodyfile="faiss/utils/Heap.h" bodystart="493" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1HeapArray_1a48afc496c73e982b8e10fde786628292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::HeapArray&lt; C &gt;::heapify</definition>
        <argsstring>()</argsstring>
        <name>heapify</name>
        <qualifiedname>faiss::HeapArray::heapify</qualifiedname>
        <briefdescription>
<para>prepare all the heaps before adding </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="498" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1HeapArray_1a293d8646fba26cfe726d529f3fb58923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::HeapArray&lt; C &gt;::addn</definition>
        <argsstring>(size_t nj, const T *vin, TI j0=0, size_t i0=0, int64_t ni=-1)</argsstring>
        <name>addn</name>
        <qualifiedname>faiss::HeapArray::addn</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nj</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vin</declname>
        </param>
        <param>
          <type>TI</type>
          <declname>j0</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>i0</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ni</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add nj elements to heaps i0:i0+ni, with sequential ids</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nj</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of elements to add to each heap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vin</parametername>
</parameternamelist>
<parameterdescription>
<para>elements to add, size ni * nj </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j0</parametername>
</parameternamelist>
<parameterdescription>
<para>add this to the ids that are added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i0</parametername>
</parameternamelist>
<parameterdescription>
<para>first heap to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ni</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of elements to update (-1 = use nh) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="508" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1HeapArray_1a75cbbd8f60dd00f0523e8515e5072d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::HeapArray&lt; C &gt;::addn_with_ids</definition>
        <argsstring>(size_t nj, const T *vin, const TI *id_in=nullptr, int64_t id_stride=0, size_t i0=0, int64_t ni=-1)</argsstring>
        <name>addn_with_ids</name>
        <qualifiedname>faiss::HeapArray::addn_with_ids</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nj</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vin</declname>
        </param>
        <param>
          <type>const TI *</type>
          <declname>id_in</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>id_stride</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>i0</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ni</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same as addn</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id_in</parametername>
</parameternamelist>
<parameterdescription>
<para>ids of the elements to add, size ni * nj </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id_stride</parametername>
</parameternamelist>
<parameterdescription>
<para>stride for id_in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="520" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1HeapArray_1a0ea37899d4d03dcef41c1a8027777b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::HeapArray&lt; C &gt;::addn_query_subset_with_ids</definition>
        <argsstring>(size_t nsubset, const TI *subset, size_t nj, const T *vin, const TI *id_in=nullptr, int64_t id_stride=0)</argsstring>
        <name>addn_query_subset_with_ids</name>
        <qualifiedname>faiss::HeapArray::addn_query_subset_with_ids</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>nsubset</declname>
        </param>
        <param>
          <type>const TI *</type>
          <declname>subset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nj</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>vin</declname>
        </param>
        <param>
          <type>const TI *</type>
          <declname>id_in</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>id_stride</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same as addn_with_ids, but for just a subset of queries</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nsubset</parametername>
</parameternamelist>
<parameterdescription>
<para>number of query entries to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subset</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes of queries to update, in 0..nh-1, size nsubset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="533" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1HeapArray_1a3c686b3cc0594e6a284fa3a595bebdec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::HeapArray&lt; C &gt;::reorder</definition>
        <argsstring>()</argsstring>
        <name>reorder</name>
        <qualifiedname>faiss::HeapArray::reorder</qualifiedname>
        <briefdescription>
<para>reorder all the heaps </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="542" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1HeapArray_1a394c96180e1ebd1cab14a4506e54645b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::HeapArray&lt; C &gt;::per_line_extrema</definition>
        <argsstring>(T *vals_out, TI *idx_out) const</argsstring>
        <name>per_line_extrema</name>
        <qualifiedname>faiss::HeapArray::per_line_extrema</qualifiedname>
        <param>
          <type>T *</type>
          <declname>vals_out</declname>
        </param>
        <param>
          <type>TI *</type>
          <declname>idx_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this is not really a heap function. It just finds the per-line extrema of each line of array D <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vals_out</parametername>
</parameternamelist>
<parameterdescription>
<para>extreme value of each line (size nh, or NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx_out</parametername>
</parameternamelist>
<parameterdescription>
<para>index of extreme value (size nh or NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="549" column="10"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>a template structure for a set of [min|max]-heaps it is tailored so that the actual data of the heaps can just live in compact arrays. </para>
    </detaileddescription>
    <location file="faiss/utils/Heap.h" line="478" column="1" bodyfile="faiss/utils/Heap.h" bodystart="478" bodyend="550"/>
    <listofallmembers>
      <member refid="structfaiss_1_1HeapArray_1a293d8646fba26cfe726d529f3fb58923" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>addn</name></member>
      <member refid="structfaiss_1_1HeapArray_1a0ea37899d4d03dcef41c1a8027777b5d" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>addn_query_subset_with_ids</name></member>
      <member refid="structfaiss_1_1HeapArray_1a75cbbd8f60dd00f0523e8515e5072d06" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>addn_with_ids</name></member>
      <member refid="structfaiss_1_1HeapArray_1a492695267029cdd40776d87e749ab106" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>get_ids</name></member>
      <member refid="structfaiss_1_1HeapArray_1a4fb98128a11901638aca7e07481410a8" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>get_val</name></member>
      <member refid="structfaiss_1_1HeapArray_1a48afc496c73e982b8e10fde786628292" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>heapify</name></member>
      <member refid="structfaiss_1_1HeapArray_1a22332dd179ce70e379addeaa47246cc2" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>ids</name></member>
      <member refid="structfaiss_1_1HeapArray_1a1ee98429c766c77235f78c6d9aa32bb4" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>k</name></member>
      <member refid="structfaiss_1_1HeapArray_1aad477a3907c3496159eaf4b375be4432" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>nh</name></member>
      <member refid="structfaiss_1_1HeapArray_1a394c96180e1ebd1cab14a4506e54645b" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>per_line_extrema</name></member>
      <member refid="structfaiss_1_1HeapArray_1a3c686b3cc0594e6a284fa3a595bebdec" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>reorder</name></member>
      <member refid="structfaiss_1_1HeapArray_1a46eb2eae9e79a0dd7ab720283619a5a9" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>T</name></member>
      <member refid="structfaiss_1_1HeapArray_1a284762db4e64dd74d82984b6b457304a" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>TI</name></member>
      <member refid="structfaiss_1_1HeapArray_1a4b131abb659e7d0ee315223270deac53" prot="public" virt="non-virtual"><scope>faiss::HeapArray</scope><name>val</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
